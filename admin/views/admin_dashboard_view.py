#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vue du tableau de bord administrateur pour l'application Vynal Docs Automator
Version am√©lior√©e avec meilleure gestion de l'espace et performances optimis√©es
"""

import logging
import customtkinter as ctk
from datetime import datetime, timedelta
import os
import platform
import psutil
import threading
import queue
import time
from functools import lru_cache
from typing import Dict, Any, Optional

logger = logging.getLogger("VynalDocsAutomator.Admin.DashboardView")

class AdminDashboardView:
    """
    Vue du tableau de bord administrateur
    Affiche un r√©sum√© des statistiques d'utilisation, l'√©tat du syst√®me et les informations importantes
    """
    
    def __init__(self, parent, app_model):
        """
        Initialise la vue du tableau de bord administrateur
        
        Args:
            parent: Widget parent
            app_model: Mod√®le de l'application
        """
        self.parent = parent
        self.model = app_model
        
        # Cadre principal de la vue
        self.frame = ctk.CTkFrame(parent, fg_color="transparent")
        
        # File d'attente pour les mises √† jour asynchrones
        self.update_queue = queue.Queue()
        
        # Cache des donn√©es
        self._cache = {}
        self._cache_timeout = 300  # 5 minutes
        
        # √âtat de chargement
        self.loading = False
        
        # Cr√©ation de l'interface
        self.create_widgets()
        
        # D√©marrer le thread de mise √† jour
        self.update_thread = None
        self.stop_thread = False
        
        self._is_running = True
        self._update_interval = 5000  # 5 secondes
        self._update_after_id = None
        
        logger.info("AdminDashboardView initialis√©e")
    
    def create_widgets(self):
        """
        Cr√©e les widgets du tableau de bord administrateur
        """
        # Cadre pour le titre de la page
        self.header_frame = ctk.CTkFrame(self.frame, fg_color="transparent")
        self.header_frame.pack(fill=ctk.X, pady=(0, 10))
        
        # Titre principal
        ctk.CTkLabel(
            self.header_frame,
            text="Tableau de bord administrateur",
            font=ctk.CTkFont(size=20, weight="bold")
        ).pack(anchor="w", padx=20, pady=10)
        
        # Conteneur principal
        self.main_container = ctk.CTkFrame(self.frame, fg_color="transparent")
        self.main_container.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)
        
        # Ligne 1: Statistiques principales
        self.stats_frame = ctk.CTkFrame(self.main_container)
        self.stats_frame.pack(fill=ctk.X, pady=5)
        
        # Configuration avec grid pour les cartes de statistiques
        self.stats_frame.columnconfigure(0, weight=1)
        self.stats_frame.columnconfigure(1, weight=1)
        self.stats_frame.columnconfigure(2, weight=1)
        self.stats_frame.columnconfigure(3, weight=1)
        
        # Cr√©er les cartes de statistiques
        self.user_card = self.create_stat_card(
            self.stats_frame,
            "Utilisateurs",
            "üë•",
            "0",
            "Actifs aujourd'hui: 0",
            0, 0
        )
        
        self.document_card = self.create_stat_card(
            self.stats_frame,
            "Documents",
            "üìÑ",
            "0",
            "Cr√©√©s cette semaine: 0",
            0, 1
        )
        
        self.template_card = self.create_stat_card(
            self.stats_frame,
            "Mod√®les",
            "üìã",
            "0",
            "Utilis√©s cette semaine: 0",
            0, 2
        )
        
        self.error_card = self.create_stat_card(
            self.stats_frame,
            "Erreurs",
            "‚ö†Ô∏è",
            "0",
            "Derni√®res 24h",
            0, 3
        )
        
        # Conteneur pour les sections du milieu et du bas
        content_container = ctk.CTkFrame(self.main_container, fg_color="transparent")
        content_container.pack(fill=ctk.BOTH, expand=True, pady=5)
        
        # Utiliser un syst√®me de grille pour les sections
        content_container.columnconfigure(0, weight=1)
        content_container.columnconfigure(1, weight=1)
        content_container.rowconfigure(0, weight=1)
        content_container.rowconfigure(1, weight=1)
        
        # Ligne 2: √âtat du syst√®me et actions administratives
        self.system_frame = ctk.CTkFrame(content_container)
        self.system_frame.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
        
        # Titre de la section syst√®me
        ctk.CTkLabel(
            self.system_frame,
            text="√âtat du syst√®me",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=15, pady=10)
        
        # Tableau d'informations syst√®me
        self.system_info_table = ctk.CTkFrame(self.system_frame, fg_color="transparent")
        self.system_info_table.pack(fill=ctk.BOTH, expand=True, padx=15, pady=5)
        
        # Informations syst√®me
        self.system_info = {}
        system_info_items = [
            {"label": "Syst√®me d'exploitation", "key": "os"},
            {"label": "Version Python", "key": "python_version"},
            {"label": "Utilisation CPU", "key": "cpu_usage"},
            {"label": "Utilisation m√©moire", "key": "memory_usage"},
            {"label": "Espace disque", "key": "disk_space"},
            {"label": "Uptime application", "key": "uptime"}
        ]
        
        for i, item in enumerate(system_info_items):
            row_frame = ctk.CTkFrame(self.system_info_table, fg_color="transparent")
            row_frame.pack(fill=ctk.X, pady=2)
            
            ctk.CTkLabel(
                row_frame,
                text=item["label"],
                width=150,
                anchor="w",
                font=ctk.CTkFont(size=12)
            ).pack(side=ctk.LEFT)
            
            value_label = ctk.CTkLabel(
                row_frame,
                text="Chargement...",
                anchor="w",
                font=ctk.CTkFont(size=12, weight="bold")
            )
            value_label.pack(side=ctk.LEFT, padx=10)
            
            self.system_info[item["key"]] = value_label
        
        # Section Actions administratives
        self.admin_actions_frame = ctk.CTkFrame(content_container)
        self.admin_actions_frame.grid(row=0, column=1, padx=5, pady=5, sticky="nsew")
        
        # Titre de la section
        ctk.CTkLabel(
            self.admin_actions_frame,
            text="Actions administratives",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=15, pady=10)
        
        # Container pour les actions
        actions_container = ctk.CTkFrame(self.admin_actions_frame, fg_color="transparent")
        actions_container.pack(fill=ctk.BOTH, expand=True, padx=15, pady=5)
        
        # Action: Sauvegarde des donn√©es
        backup_frame = ctk.CTkFrame(actions_container, fg_color="transparent")
        backup_frame.pack(fill=ctk.X, pady=5)
        
        ctk.CTkLabel(
            backup_frame,
            text="Sauvegarde des donn√©es",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            backup_frame,
            text="Cr√©er une sauvegarde compl√®te des donn√©es de l'application",
            font=ctk.CTkFont(size=12),
            wraplength=350  # Augmenter la largeur pour √©viter la troncature
        ).pack(anchor="w", pady=(0, 5))
        
        ctk.CTkButton(
            backup_frame,
            text="Lancer la sauvegarde",
            command=self.perform_backup_stub
        ).pack(anchor="w", pady=5)
        
        # Action: V√©rification d'int√©grit√©
        integrity_frame = ctk.CTkFrame(actions_container, fg_color="transparent")
        integrity_frame.pack(fill=ctk.X, pady=5)
        
        ctk.CTkLabel(
            integrity_frame,
            text="V√©rification d'int√©grit√©",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            integrity_frame,
            text="V√©rifier l'int√©grit√© des donn√©es et r√©parer les probl√®mes",
            font=ctk.CTkFont(size=12),
            wraplength=350  # Augmenter la largeur pour √©viter la troncature
        ).pack(anchor="w", pady=(0, 5))
        
        ctk.CTkButton(
            integrity_frame,
            text="V√©rifier l'int√©grit√©",
            command=self.check_integrity_stub
        ).pack(anchor="w", pady=5)
        
        # Action: Optimisation
        optimize_frame = ctk.CTkFrame(actions_container, fg_color="transparent")
        optimize_frame.pack(fill=ctk.X, pady=5)
        
        ctk.CTkLabel(
            optimize_frame,
            text="Optimisation",
            font=ctk.CTkFont(size=14, weight="bold")
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            optimize_frame,
            text="Optimiser les performances de l'application",
            font=ctk.CTkFont(size=12),
            wraplength=350  # Augmenter la largeur pour √©viter la troncature
        ).pack(anchor="w", pady=(0, 5))
        
        ctk.CTkButton(
            optimize_frame,
            text="Optimiser",
            command=self.optimize_app_stub
        ).pack(anchor="w", pady=5)
        
        # Ligne 3: Activit√©s administratives et alertes syst√®me
        # Section Activit√©s r√©centes
        self.activities_frame = ctk.CTkFrame(content_container)
        self.activities_frame.grid(row=1, column=0, padx=5, pady=5, sticky="nsew")
        
        # Titre
        ctk.CTkLabel(
            self.activities_frame,
            text="Activit√©s administratives r√©centes",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=15, pady=10)
        
        # Zone d√©filante pour les activit√©s
        self.activities_list_frame = ctk.CTkScrollableFrame(self.activities_frame, height=150)
        self.activities_list_frame.pack(fill=ctk.BOTH, expand=True, padx=15, pady=(0, 10))
        
        # Message si aucune activit√©
        self.no_activities_label = ctk.CTkLabel(
            self.activities_list_frame,
            text="Aucune activit√© r√©cente",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        self.no_activities_label.pack(pady=20)
        
        # Section Alertes syst√®me
        self.alerts_frame = ctk.CTkFrame(content_container)
        self.alerts_frame.grid(row=1, column=1, padx=5, pady=5, sticky="nsew")
        
        # Titre
        ctk.CTkLabel(
            self.alerts_frame,
            text="Alertes syst√®me",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=15, pady=10)
        
        # Zone pour les alertes
        self.alerts_list_frame = ctk.CTkScrollableFrame(self.alerts_frame, height=150)
        self.alerts_list_frame.pack(fill=ctk.BOTH, expand=True, padx=15, pady=(0, 10))
        
        # Message si aucune alerte
        self.no_alerts_label = ctk.CTkLabel(
            self.alerts_list_frame,
            text="Aucune alerte active",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        self.no_alerts_label.pack(pady=20)
    
    def create_stat_card(self, parent, title, icon, value, subtitle, row, col):
        """
        Cr√©e une carte de statistique pour le tableau de bord
        
        Args:
            parent: Widget parent
            title: Titre de la carte
            icon: Ic√¥ne √† afficher
            value: Valeur principale
            subtitle: Texte secondaire
            row: Ligne dans la grille
            col: Colonne dans la grille
            
        Returns:
            dict: Dictionnaire contenant les widgets de la carte
        """
        card = ctk.CTkFrame(parent, fg_color=("#e1e5eb", "#343b48"))
        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
        
        top_frame = ctk.CTkFrame(card, fg_color="transparent")
        top_frame.pack(fill=ctk.X, padx=10, pady=(10, 5))
        
        # Titre et ic√¥ne
        icon_label = ctk.CTkLabel(top_frame, text=icon, font=ctk.CTkFont(size=24))
        icon_label.pack(side=ctk.LEFT)
        
        title_label = ctk.CTkLabel(top_frame, text=title, font=ctk.CTkFont(size=14))
        title_label.pack(side=ctk.LEFT, padx=10)
        
        # Valeur principale
        value_label = ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=28, weight="bold"))
        value_label.pack(pady=(5, 5))
        
        # Sous-titre/explication
        subtitle_label = ctk.CTkLabel(card, text=subtitle, font=ctk.CTkFont(size=12), text_color="gray")
        subtitle_label.pack(pady=(0, 10))
        
        return {
            "frame": card,
            "icon": icon_label,
            "title": title_label,
            "value": value_label,
            "subtitle": subtitle_label
        }
    
    def create_activity_item(self, parent, activity):
        """
        Cr√©e un √©l√©ment d'activit√© administrative
        
        Args:
            parent: Widget parent
            activity: Dictionnaire contenant les donn√©es d'activit√©
            
        Returns:
            ctk.CTkFrame: Cadre contenant l'√©l√©ment d'activit√©
        """
        item = ctk.CTkFrame(parent, fg_color=("gray95", "gray20"))
        item.pack(fill=ctk.X, pady=2)
        
        try:
            timestamp = datetime.fromisoformat(activity["timestamp"])
            formatted_time = timestamp.strftime("%d/%m/%Y %H:%M")
        except Exception:
            formatted_time = activity.get("timestamp", "")
        
        # Ligne sup√©rieure: description et temps
        top_frame = ctk.CTkFrame(item, fg_color="transparent")
        top_frame.pack(fill=ctk.X, padx=10, pady=(10, 5))
        
        description = ctk.CTkLabel(
            top_frame,
            text=activity.get("description", ""),
            anchor="w",
            font=ctk.CTkFont(size=13, weight="bold")
        )
        description.pack(side=ctk.LEFT, fill=ctk.X, expand=True)
        
        time_label = ctk.CTkLabel(
            top_frame,
            text=formatted_time,
            font=ctk.CTkFont(size=11),
            text_color="gray"
        )
        time_label.pack(side=ctk.RIGHT, padx=5)
        
        # Ligne inf√©rieure: d√©tails
        if "details" in activity and activity["details"]:
            details_frame = ctk.CTkFrame(item, fg_color="transparent")
            details_frame.pack(fill=ctk.X, padx=10, pady=(0, 10))
            
            details_label = ctk.CTkLabel(
                details_frame,
                text=activity["details"],
                anchor="w",
                font=ctk.CTkFont(size=12),
                text_color="gray",
                wraplength=350  # Augmenter pour √©viter la troncature
            )
            details_label.pack(anchor="w")
        
        # Utilisateur
        if "user" in activity and activity["user"]:
            user_frame = ctk.CTkFrame(item, fg_color="transparent")
            user_frame.pack(fill=ctk.X, padx=10, pady=(0, 10))
            
            user_label = ctk.CTkLabel(
                user_frame,
                text=f"Par: {activity['user']}",
                anchor="w",
                font=ctk.CTkFont(size=11),
                text_color="gray"
            )
            user_label.pack(side=ctk.LEFT)
        
        return item
    
    def create_alert_item(self, parent, alert):
        """
        Cr√©e un √©l√©ment d'alerte
        
        Args:
            parent: Widget parent
            alert: Dictionnaire contenant les donn√©es de l'alerte
            
        Returns:
            ctk.CTkFrame: Cadre contenant l'√©l√©ment d'alerte
        """
        # D√©finir la couleur en fonction du niveau d'alerte
        level = alert.get("level", "info")
        if level == "critical":
            bg_color = ("#ffcccc", "#5c2d2d")
            level_icon = "üî¥"
        elif level == "warning":
            bg_color = ("#ffe6cc", "#5c452d")
            level_icon = "üü†"
        elif level == "info":
            bg_color = ("#cce5ff", "#2d3e5c")
            level_icon = "üîµ"
        else:
            bg_color = ("gray95", "gray20")
            level_icon = "‚ö™"
        
        item = ctk.CTkFrame(parent, fg_color=bg_color)
        item.pack(fill=ctk.X, pady=2)
        
        # En-t√™te avec niveau et titre
        header_frame = ctk.CTkFrame(item, fg_color="transparent")
        header_frame.pack(fill=ctk.X, padx=10, pady=(10, 5))
        
        level_label = ctk.CTkLabel(
            header_frame,
            text=f"{level_icon} {level.capitalize()}",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        level_label.pack(side=ctk.LEFT)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text=alert.get("title", "Alerte sans titre"),
            font=ctk.CTkFont(size=13, weight="bold"),
            anchor="w"
        )
        title_label.pack(side=ctk.LEFT, padx=10)
        
        # Horodatage
        try:
            timestamp = datetime.fromisoformat(alert.get("timestamp", datetime.now().isoformat()))
            formatted_time = timestamp.strftime("%d/%m/%Y %H:%M")
        except Exception:
            formatted_time = alert.get("timestamp", "")
        
        time_label = ctk.CTkLabel(
            header_frame,
            text=formatted_time,
            font=ctk.CTkFont(size=11),
            text_color="gray"
        )
        time_label.pack(side=ctk.RIGHT)
        
        # Message de l'alerte
        if "message" in alert and alert["message"]:
            message_frame = ctk.CTkFrame(item, fg_color="transparent")
            message_frame.pack(fill=ctk.X, padx=10, pady=(0, 10))
            
            message_label = ctk.CTkLabel(
                message_frame,
                text=alert["message"],
                anchor="w",
                font=ctk.CTkFont(size=12),
                wraplength=350  # Augmenter pour √©viter la troncature
            )
            message_label.pack(anchor="w")
        
        # Bouton d'action si n√©cessaire
        if "action" in alert and alert["action"]:
            action_frame = ctk.CTkFrame(item, fg_color="transparent")
            action_frame.pack(fill=ctk.X, padx=10, pady=(0, 10))
            
            action_button = ctk.CTkButton(
                action_frame,
                text=alert["action"],
                width=100,
                height=25,
                font=ctk.CTkFont(size=11),
                command=lambda: self.handle_alert_action_stub(alert)
            )
            action_button.pack(side=ctk.LEFT)
        
        return item
    
    def update_view(self):
        """
        Met √† jour la vue avec les donn√©es actuelles de mani√®re asynchrone
        """
        if not self._is_running:
            return
            
        try:
            # V√©rifier si une mise √† jour est n√©cessaire
            current_time = time.time()
            if hasattr(self, '_last_update') and current_time - self._last_update < 5:
                return
                
            # Mettre √† jour les statistiques de mani√®re asynchrone
            self.frame.after(0, self._update_statistics)
            
            # Mettre √† jour les informations syst√®me
            self.frame.after(0, self._update_system_info)
            
            # Mettre √† jour les activit√©s et alertes
            self.frame.after(0, self.update_activities)
            self.frame.after(0, self.update_alerts)
            
            # Mettre √† jour le timestamp de derni√®re mise √† jour
            self._last_update = current_time
            
            # Planifier la prochaine mise √† jour
            self._update_after_id = self.frame.after(self._update_interval, self.update_view)
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de la vue: {e}")
            # R√©essayer dans 30 secondes en cas d'erreur
            self._update_after_id = self.frame.after(30000, self.update_view)
    
    def _update_statistics(self):
        """
        Met √† jour les statistiques de mani√®re asynchrone
        """
        try:
            # V√©rifier si le cache est valide
            if self._is_cache_valid('stats'):
                return

            # R√©cup√©rer les statistiques depuis le cache ou les calculer
            stats = self._get_cached_stats()
            
            # Mettre √† jour l'interface avec les nouvelles statistiques
            if hasattr(self, 'user_card'):
                self.user_card["value"].configure(text=str(stats.get("users_count", 0)))
                self.user_card["subtitle"].configure(text=f"Actifs aujourd'hui: {stats.get('active_users', 0)}")
            
            if hasattr(self, 'document_card'):
                self.document_card["value"].configure(text=str(stats.get("docs_count", 0)))
                self.document_card["subtitle"].configure(text=f"Cr√©√©s cette semaine: {stats.get('weekly_docs', 0)}")
            
            if hasattr(self, 'template_card'):
                self.template_card["value"].configure(text=str(stats.get("templates_count", 0)))
                self.template_card["subtitle"].configure(text=f"Utilis√©s cette semaine: {stats.get('weekly_templates', 0)}")
            
            if hasattr(self, 'error_card'):
                self.error_card["value"].configure(text=str(stats.get("recent_errors", 0)))
                self.error_card["subtitle"].configure(text=f"Derni√®res 24h: {stats.get('recent_errors', 0)}")
            
            # Mettre √† jour le cache
            self._update_cache_timestamp('stats')
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des statistiques: {e}")
            # Afficher un message d'erreur √† l'utilisateur
            self._show_error_message("Erreur de mise √† jour", "Impossible de mettre √† jour les statistiques")

    @lru_cache(maxsize=1)
    def _get_cached_stats(self):
        """
        R√©cup√®re les statistiques avec mise en cache
        """
        try:
            stats = {}
            
            # Statistiques utilisateurs - correction pour utiliser get_users()
            users = self.model.get_users() if hasattr(self.model, 'get_users') else []
            stats["users_count"] = len(users)
            stats["active_users"] = sum(1 for user in users 
                                      if self.is_user_active_today(user))
            
            # Statistiques documents
            stats["docs_count"] = len(getattr(self.model, "documents", []))
            stats["weekly_docs"] = sum(1 for doc in getattr(self.model, "documents", [])
                                     if self._is_created_this_week(doc))
            
            # Statistiques mod√®les
            stats["templates_count"] = len(getattr(self.model, "templates", []))
            stats["weekly_templates"] = sum(1 for template in getattr(self.model, "templates", [])
                                          if self._is_used_this_week(template))
            
            # Statistiques erreurs
            error_logs = self._get_recent_error_logs()
            stats["recent_errors"] = len(error_logs)
            
            return stats
            
        except Exception as e:
            logger.error(f"Erreur lors du calcul des statistiques: {e}")
            return {}

    def _show_error_message(self, title, message):
        """
        Affiche un message d'erreur √† l'utilisateur
        """
        if hasattr(self, 'error_dialog'):
            self.error_dialog.destroy()
        
        self.error_dialog = ctk.CTkToplevel(self.frame)
        self.error_dialog.title(title)
        self.error_dialog.geometry("300x150")
        
        # Centrer la fen√™tre
        self.error_dialog.update_idletasks()
        x = self.frame.winfo_rootx() + (self.frame.winfo_width() - 300) // 2
        y = self.frame.winfo_rooty() + (self.frame.winfo_height() - 150) // 2
        self.error_dialog.geometry(f"+{x}+{y}")
        
        # Message
        ctk.CTkLabel(
            self.error_dialog,
            text=message,
            wraplength=250
        ).pack(pady=20)
        
        # Bouton OK
        ctk.CTkButton(
            self.error_dialog,
            text="OK",
            command=self.error_dialog.destroy
        ).pack(pady=10)

    def _update_system_info(self):
        """
        Met √† jour les informations syst√®me de mani√®re asynchrone
        """
        try:
            # R√©cup√©rer les informations syst√®me
            system_info = self._get_system_info()
            
            # Mettre √† jour l'interface
            for key, value in system_info.items():
                if key in self.system_info:
                    self.system_info[key].configure(text=value)
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des informations syst√®me: {e}")
            self._show_error_message("Erreur syst√®me", "Impossible de mettre √† jour les informations syst√®me")

    def _get_system_info(self):
        """
        R√©cup√®re les informations syst√®me de mani√®re optimis√©e
        """
        try:
            info = {}
            
            # OS et version Python (ne change pas souvent)
            if not hasattr(self, '_static_info'):
                self._static_info = {
                    'os': f"{platform.system()} {platform.release()}",
                    'python_version': platform.python_version()
                }
            info.update(self._static_info)
            
            # CPU et m√©moire (mise √† jour fr√©quente)
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
            info['cpu_usage'] = f"{cpu_percent}%"
            info['memory_usage'] = f"{memory.percent}%"
            
            # Espace disque (mise √† jour moins fr√©quente)
            if not hasattr(self, '_disk_info') or time.time() - getattr(self, '_last_disk_check', 0) > 300:
                disk = psutil.disk_usage('/')
                self._disk_info = f"{disk.percent}% utilis√©"
                self._last_disk_check = time.time()
            info['disk_space'] = self._disk_info
            
            # Uptime application
            if hasattr(self.model, 'start_time'):
                uptime = datetime.now() - self.model.start_time
                hours = uptime.total_seconds() // 3600
                minutes = (uptime.total_seconds() % 3600) // 60
                info['uptime'] = f"{int(hours)}h {int(minutes)}m"
            else:
                info['uptime'] = "N/A"
            
            return info
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des informations syst√®me: {e}")
            return {}

    def _is_created_this_week(self, doc):
        """
        V√©rifie si un document a √©t√© cr√©√© cette semaine
        """
        if not hasattr(doc, 'created_at'):
            return False
        now = datetime.now()
        start_of_week = now - timedelta(days=now.weekday())
        return doc.created_at >= start_of_week

    def _is_used_this_week(self, template):
        """
        V√©rifie si un mod√®le a √©t√© utilis√© cette semaine de mani√®re plus robuste
        
        Args:
            template: Objet mod√®le √† v√©rifier
            
        Returns:
            bool: True si le mod√®le a √©t√© utilis√© cette semaine, False sinon
        """
        try:
            # V√©rifier si le mod√®le est valide
            if not template or not isinstance(template, (dict, object)):
                logger.warning(f"Mod√®le invalide d√©tect√©: {template}")
                return False
            
            # Obtenir la date de derni√®re utilisation
            last_used = None
            if isinstance(template, dict):
                last_used = template.get('last_used')
            else:
                last_used = getattr(template, 'last_used', None)
            
            if not last_used:
                return False
            
            # Convertir en datetime si n√©cessaire
            if isinstance(last_used, str):
                try:
                    last_used = datetime.fromisoformat(last_used)
                except ValueError:
                    logger.error(f"Format de date invalide pour le mod√®le: {last_used}")
                    return False
                
            # V√©rifier si utilis√© cette semaine
            now = datetime.now()
            start_of_week = now - timedelta(days=now.weekday())
            start_of_week = start_of_week.replace(hour=0, minute=0, second=0, microsecond=0)
            
            return last_used >= start_of_week
            
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification de l'utilisation du mod√®le: {e}")
            return False

    def get_template_statistics(self) -> Dict[str, Any]:
        """
        R√©cup√®re les statistiques d√©taill√©es des mod√®les
        
        Returns:
            Dict[str, Any]: Statistiques des mod√®les
        """
        try:
            stats = {
                "total": 0,
                "used_this_week": 0,
                "active": 0,
                "errors": 0
            }
            
            # R√©cup√©rer les mod√®les
            templates = []
            if hasattr(self.model, 'get_templates'):
                try:
                    templates = self.model.get_templates()
                except Exception as e:
                    logger.error(f"Erreur lors de la r√©cup√©ration des mod√®les: {e}")
                    return stats
            
            # Calculer les statistiques
            now = datetime.now()
            thirty_days_ago = now - timedelta(days=30)
            
            for template in templates:
                try:
                    stats["total"] += 1
                    
                    # V√©rifier si utilis√© cette semaine
                    if self._is_used_this_week(template):
                        stats["used_this_week"] += 1
                    
                    # V√©rifier si actif (utilis√© dans les 30 derniers jours)
                    last_used = self._get_template_last_used(template)
                    if last_used and last_used >= thirty_days_ago:
                        stats["active"] += 1
                    
                    # V√©rifier les erreurs
                    if self._has_template_errors(template):
                        stats["errors"] += 1
                    
                except Exception as e:
                    logger.error(f"Erreur lors du calcul des statistiques pour le mod√®le: {e}")
                    stats["errors"] += 1
                
            return stats
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des statistiques des mod√®les: {e}")
            return {
                "total": 0,
                "used_this_week": 0,
                "active": 0,
                "errors": 0
            }

    def _get_template_last_used(self, template) -> Optional[datetime]:
        """
        R√©cup√®re la date de derni√®re utilisation d'un mod√®le
        
        Args:
            template: Objet mod√®le
            
        Returns:
            Optional[datetime]: Date de derni√®re utilisation ou None
        """
        try:
            last_used = None
            
            # R√©cup√©rer la date selon le type d'objet
            if isinstance(template, dict):
                last_used = template.get('last_used')
            else:
                last_used = getattr(template, 'last_used', None)
            
            # Convertir en datetime si n√©cessaire
            if isinstance(last_used, str):
                last_used = datetime.fromisoformat(last_used)
            
            return last_used
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration de la date de derni√®re utilisation: {e}")
            return None

    def _has_template_errors(self, template) -> bool:
        """
        V√©rifie si un mod√®le a des erreurs
        
        Args:
            template: Objet mod√®le
            
        Returns:
            bool: True si le mod√®le a des erreurs, False sinon
        """
        try:
            # V√©rifier les erreurs selon le type d'objet
            if isinstance(template, dict):
                return bool(template.get('has_errors') or template.get('error_count', 0) > 0)
            else:
                return bool(getattr(template, 'has_errors', False) or getattr(template, 'error_count', 0) > 0)
            
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification des erreurs du mod√®le: {e}")
            return True

    def update_template_card(self):
        """
        Met √† jour la carte des mod√®les avec les derni√®res statistiques
        """
        try:
            # R√©cup√©rer les statistiques
            stats = self.get_template_statistics()
            
            # Mettre √† jour la carte
            if hasattr(self, 'template_card'):
                self.template_card["value"].configure(text=str(stats["total"]))
                self.template_card["subtitle"].configure(
                    text=f"Utilis√©s cette semaine: {stats['used_this_week']}"
                )
                
                # Mettre √† jour la couleur selon les erreurs
                if stats["errors"] > 0:
                    self.template_card["frame"].configure(
                        fg_color=("#ffcccc", "#5c2d2d")
                    )
                else:
                    self.template_card["frame"].configure(
                        fg_color=("#e1e5eb", "#343b48")
                    )
                
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de la carte des mod√®les: {e}")
            if hasattr(self, 'template_card'):
                self.template_card["value"].configure(text="Erreur")
                self.template_card["subtitle"].configure(text="Impossible de charger les donn√©es")

    def update_system_info(self):
        """
        Met √† jour les informations syst√®me
        """
        try:
            # Syst√®me d'exploitation
            os_info = f"{platform.system()} {platform.version()}"
            self.system_info["os"].configure(text=os_info)
            
            # Version Python
            python_version = platform.python_version()
            self.system_info["python_version"].configure(text=python_version)
            
            # Utilisation CPU
            cpu_percent = psutil.cpu_percent(interval=0.1)
            self.system_info["cpu_usage"].configure(text=f"{cpu_percent}%")
            
            # Utilisation m√©moire
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_used = self.format_bytes(memory.used)
            memory_total = self.format_bytes(memory.total)
            self.system_info["memory_usage"].configure(text=f"{memory_percent}% ({memory_used} / {memory_total})")
            
            # Espace disque
            disk = psutil.disk_usage('/')
            disk_percent = disk.percent
            disk_used = self.format_bytes(disk.used)
            disk_total = self.format_bytes(disk.total)
            self.system_info["disk_space"].configure(text=f"{disk_percent}% ({disk_used} / {disk_total})")
            
            # Uptime de l'application (√† adapter selon votre m√©thode de suivi)
            if hasattr(self.model, 'start_time'):
                uptime_seconds = (datetime.now() - self.model.start_time).total_seconds()
                uptime_str = self.format_uptime(uptime_seconds)
            else:
                uptime_str = "Non disponible"
                
            self.system_info["uptime"].configure(text=uptime_str)
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des informations syst√®me: {e}")
    
    def update_activities(self):
        """
        Met √† jour la liste des activit√©s administratives r√©centes
        """
        try:
            # Effacer les anciennes activit√©s
            for widget in self.activities_list_frame.winfo_children():
                if widget != self.no_activities_label:
                    widget.destroy()
            
            # R√©cup√©rer les activit√©s administratives
            admin_activities = self.get_admin_activities()
            
            if admin_activities:
                self.no_activities_label.pack_forget()
                
                # Ajouter les nouvelles activit√©s
                for activity in admin_activities:
                    self.create_activity_item(self.activities_list_frame, activity)
            else:
                self.no_activities_label.pack(pady=20)
                
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des activit√©s: {e}")
    
    def update_alerts(self):
        """
        Met √† jour la liste des alertes syst√®me
        """
        try:
            # Effacer les anciennes alertes
            for widget in self.alerts_list_frame.winfo_children():
                if widget != self.no_alerts_label:
                    widget.destroy()
            
            # R√©cup√©rer les alertes syst√®me
            system_alerts = self.get_system_alerts()
            
            if system_alerts:
                self.no_alerts_label.pack_forget()
                
                # Ajouter les nouvelles alertes
                for alert in system_alerts:
                    self.create_alert_item(self.alerts_list_frame, alert)
            else:
                self.no_alerts_label.pack(pady=20)
                
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des alertes: {e}")
    
    def is_user_active_today(self, user):
        """
        V√©rifie si un utilisateur a √©t√© actif aujourd'hui
        
        Args:
            user: Objet utilisateur (dictionnaire)
            
        Returns:
            bool: True si l'utilisateur a √©t√© actif aujourd'hui, False sinon
        """
        try:
            if not user:
                return False
                
            # V√©rifier si l'utilisateur a une derni√®re activit√©
            last_activity = user.get('last_activity') or user.get('last_login')
            if not last_activity:
                return False
                
            # Convertir en datetime si c'est une cha√Æne
            if isinstance(last_activity, str):
                try:
                    last_activity = datetime.fromisoformat(last_activity)
                except ValueError:
                    return False
                    
            # Comparer avec aujourd'hui
            today = datetime.now().date()
            last_activity_date = last_activity.date()
            return last_activity_date == today
            
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification de l'activit√© utilisateur: {e}")
            return False
    
    def count_documents_this_week(self):
        """
        Compte le nombre de documents cr√©√©s cette semaine
        
        Returns:
            int: Nombre de documents cr√©√©s cette semaine
        """
        # √Ä adapter selon votre mod√®le de donn√©es
        count = 0
        if hasattr(self.model, 'documents'):
            today = datetime.now()
            week_start = today - timedelta(days=today.weekday())
            week_start = week_start.replace(hour=0, minute=0, second=0, microsecond=0)
            
            for doc in self.model.documents:
                if hasattr(doc, 'created_at'):
                    doc_date = doc.created_at if isinstance(doc.created_at, datetime) else datetime.fromisoformat(doc.created_at)
                    if doc_date >= week_start:
                        count += 1
        return count
    
    def count_templates_used_this_week(self):
        """
        Compte le nombre de mod√®les utilis√©s cette semaine
        
        Returns:
            int: Nombre de mod√®les utilis√©s cette semaine
        """
        # √Ä adapter selon votre mod√®le de donn√©es
        # Ceci est un exemple simplifi√©
        return 0
    
    def count_errors_last_24h(self):
        """
        Compte le nombre d'erreurs dans les derni√®res 24 heures
        
        Returns:
            int: Nombre d'erreurs dans les derni√®res 24 heures
        """
        # √Ä adapter selon votre syst√®me de journalisation
        # Exemple simplifi√©
        return 0
    
    def get_admin_activities(self):
        """
        R√©cup√®re les activit√©s administratives r√©centes
        
        Returns:
            list: Liste des activit√©s administratives
        """
        # R√©cup√©rer depuis le mod√®le si disponible
        if hasattr(self.model, 'admin_activities'):
            return self.model.admin_activities
        
        # Sinon, renvoyer des donn√©es de d√©mo
        return [
            {
                "description": "Sauvegarde du syst√®me",
                "details": "Sauvegarde compl√®te effectu√©e avec succ√®s",
                "timestamp": datetime.now().isoformat(),
                "user": "Admin"
            },
            {
                "description": "Param√®tres modifi√©s",
                "details": "Modification des param√®tres de notification",
                "timestamp": (datetime.now() - timedelta(hours=2)).isoformat(),
                "user": "Admin"
            },
            {
                "description": "V√©rification d'int√©grit√©",
                "details": "Aucun probl√®me d√©tect√©",
                "timestamp": (datetime.now() - timedelta(days=1)).isoformat(),
                "user": "Syst√®me"
            }
        ]
    
    def get_system_alerts(self):
        """
        R√©cup√®re les alertes syst√®me actuelles
        
        Returns:
            list: Liste des alertes syst√®me
        """
        # R√©cup√©rer depuis le mod√®le si disponible
        # R√©cup√©rer depuis le mod√®le si disponible
        if hasattr(self.model, 'system_alerts'):
            return self.model.system_alerts
        
        # Sinon, renvoyer des donn√©es de d√©mo
        return [
            {
                "title": "Espace disque faible",
                "message": "Il reste moins de 15% d'espace disque libre.",
                "level": "warning",
                "timestamp": datetime.now().isoformat(),
                "action": "V√©rifier"
            },
            {
                "title": "Mise √† jour disponible",
                "message": "Une nouvelle version (1.1.0) est disponible.",
                "level": "info",
                "timestamp": (datetime.now() - timedelta(days=2)).isoformat(),
                "action": "Mettre √† jour"
            }
        ]
    
    def format_bytes(self, size_bytes):
        """
        Formate une taille en octets en une cha√Æne lisible
        
        Args:
            size_bytes: Taille en octets
            
        Returns:
            str: Taille format√©e
        """
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB", "TB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024
            i += 1
            
        return f"{size_bytes:.1f} {size_names[i]}"
    
    def format_uptime(self, seconds):
        """
        Formate une dur√©e en secondes en une cha√Æne lisible
        
        Args:
            seconds: Dur√©e en secondes
            
        Returns:
            str: Dur√©e format√©e
        """
        days, remainder = divmod(seconds, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        parts = []
        if days > 0:
            parts.append(f"{int(days)} jours")
        if hours > 0 or days > 0:
            parts.append(f"{int(hours)} heures")
        if minutes > 0 or hours > 0 or days > 0:
            parts.append(f"{int(minutes)} minutes")
        
        if not parts:
            return f"{int(seconds)} secondes"
        
        return ", ".join(parts)
    
    def show(self):
        """
        Affiche la vue et d√©marre les mises √† jour
        """
        self._is_running = True
        self.frame.pack(fill=ctk.BOTH, expand=True)
        self.update_view()
    
    def hide(self):
        """
        Masque la vue et arr√™te les mises √† jour
        """
        self._is_running = False
        if self._update_after_id:
            self.frame.after_cancel(self._update_after_id)
            self._update_after_id = None
        self.frame.pack_forget()
    
    def start_update_thread(self):
        """
        D√©marre le thread de mise √† jour en arri√®re-plan
        """
        if not self.update_thread or not self.update_thread.is_alive():
            self.update_thread = threading.Thread(target=self._update_loop, daemon=True)
            self.update_thread.start()
    
    def _update_loop(self):
        """
        Boucle de mise √† jour en arri√®re-plan
        """
        while not self.stop_thread:
            try:
                self.update_statistics_async()
                self.update_system_info_async()
                time.sleep(5)  # Attendre 5 secondes entre les mises √† jour
            except Exception as e:
                logger.error(f"Erreur dans la boucle de mise √† jour: {e}")
    
    @lru_cache(maxsize=32)
    def get_cached_data(self, key: str, timeout: int = 300) -> Optional[Any]:
        """
        R√©cup√®re les donn√©es du cache si elles sont valides
        """
        if key in self._cache:
            timestamp, data = self._cache[key]
            if time.time() - timestamp < timeout:
                return data
        return None
    
    def set_cached_data(self, key: str, data: Any):
        """
        Stocke les donn√©es dans le cache
        """
        self._cache[key] = (time.time(), data)
    
    def load_initial_data(self):
        """
        Charge les donn√©es initiales de mani√®re asynchrone
        """
        self.show_loading_indicator()
        threading.Thread(target=self._load_initial_data_async, daemon=True).start()
    
    def _load_initial_data_async(self):
        """
        Charge les donn√©es initiales en arri√®re-plan
        """
        try:
            # Charger les statistiques de base rapidement
            basic_stats = self.get_basic_statistics()
            self.update_queue.put(("basic_stats", basic_stats))

            # Charger les donn√©es plus lourdes ensuite
            detailed_stats = self.get_detailed_statistics()
            self.update_queue.put(("detailed_stats", detailed_stats))

            # Charger les informations syst√®me en dernier
            system_info = self.get_system_info()
            self.update_queue.put(("system_info", system_info))

            # Traiter les mises √† jour dans l'interface utilisateur
            self.frame.after(100, self._process_updates)
            
            # D√©marrer le thread de mise √† jour en arri√®re-plan
            self.start_update_thread()
            
        except Exception as e:
            logger.error(f"Erreur lors du chargement initial: {e}")
        finally:
            self.hide_loading_indicator()
    
    def _process_updates(self):
        """
        Traite les mises √† jour de l'interface utilisateur
        """
        try:
            # Traiter toutes les mises √† jour en attente
            updates = []
            while not self.update_queue.empty():
                updates.append(self.update_queue.get_nowait())
            
            # Appliquer les mises √† jour en une seule fois
            for update_type, data in updates:
                self._apply_update(update_type, data)
                
        except queue.Empty:
            pass
        finally:
            # Replanifier le traitement s'il y a encore des mises √† jour
            if not self.update_queue.empty():
                self.frame.after(100, self._process_updates)
    
    def _apply_update(self, update_type: str, data: Any):
        """
        Applique une mise √† jour √† l'interface utilisateur
        """
        try:
            if update_type == "basic_stats":
                self.update_basic_statistics_ui(data)
            elif update_type == "detailed_stats":
                self.update_detailed_statistics_ui(data)
            elif update_type == "system_info":
                self.update_system_info_ui(data)
        except Exception as e:
            logger.error(f"Erreur lors de l'application de la mise √† jour {update_type}: {e}")
    
    def show_loading_indicator(self):
        """Affiche l'indicateur de chargement"""
        if not hasattr(self, 'loading_frame'):
            self.loading_frame = ctk.CTkFrame(self.frame)
            self.loading_frame.place(relx=0.5, rely=0.5, anchor="center")
            
            # Label de chargement
            self.loading_label = ctk.CTkLabel(
                self.loading_frame,
                text="Chargement en cours...",
                font=ctk.CTkFont(size=14)
            )
            self.loading_label.pack(pady=10)
            
            # Barre de progression
            self.loading_progress = ctk.CTkProgressBar(self.loading_frame)
            self.loading_progress.pack(pady=5)
            self.loading_progress.start()
        else:
            self.loading_frame.place(relx=0.5, rely=0.5, anchor="center")

    def hide_loading_indicator(self):
        """Cache l'indicateur de chargement"""
        if hasattr(self, 'loading_frame'):
            self.loading_frame.place_forget()
            self.loading_progress.stop()

    def get_basic_statistics(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques de base rapidement"""
        cached_data = self.get_cached_data("basic_stats")
        if cached_data:
            return cached_data

        stats = {
            "users_count": len(self.model.get_users()) if hasattr(self.model, 'get_users') else 0,
            "docs_count": len(self.model.get_documents()) if hasattr(self.model, 'get_documents') else 0,
            "templates_count": len(self.model.get_templates()) if hasattr(self.model, 'get_templates') else 0
        }
        
        self.set_cached_data("basic_stats", stats)
        return stats

    def get_detailed_statistics(self) -> Dict[str, Any]:
        """R√©cup√®re les statistiques d√©taill√©es (plus lent)"""
        cached_data = self.get_cached_data("detailed_stats")
        if cached_data:
            return cached_data

        stats = {
            "active_users": self.count_active_users(),
            "weekly_docs": self.count_documents_this_week(),
            "weekly_templates": self.count_templates_used_this_week(),
            "recent_errors": self.count_errors_last_24h()
        }
        
        self.set_cached_data("detailed_stats", stats)
        return stats

    def update_basic_statistics_ui(self, stats: Dict[str, Any]):
        """Met √† jour l'interface avec les statistiques de base"""
        if hasattr(self, 'user_card'):
            self.user_card["value"].configure(text=str(stats["users_count"]))
        if hasattr(self, 'document_card'):
            self.document_card["value"].configure(text=str(stats["docs_count"]))
        if hasattr(self, 'template_card'):
            self.template_card["value"].configure(text=str(stats["templates_count"]))

    def update_detailed_statistics_ui(self, stats: Dict[str, Any]):
        """Met √† jour l'interface avec les statistiques d√©taill√©es"""
        if hasattr(self, 'user_card_subtitle'):
            self.user_card_subtitle.configure(text=f"Actifs aujourd'hui: {stats['active_users']}")
        if hasattr(self, 'document_card_subtitle'):
            self.document_card_subtitle.configure(text=f"Cr√©√©s cette semaine: {stats['weekly_docs']}")
        if hasattr(self, 'template_card_subtitle'):
            self.template_card_subtitle.configure(text=f"Utilis√©s cette semaine: {stats['weekly_templates']}")
        if hasattr(self, 'error_card_subtitle'):
            self.error_card_subtitle.configure(text=f"Derni√®res 24h: {stats['recent_errors']}")

    def update_system_info_ui(self, info: Dict[str, Any]):
        """Met √† jour l'interface avec les informations syst√®me"""
        if hasattr(self, 'system_info_frame'):
            cpu_usage = info.get('cpu_usage', 0)
            memory_usage = info.get('memory_usage', 0)
            disk_usage = info.get('disk_usage', 0)
            
            if hasattr(self, 'cpu_progress'):
                self.cpu_progress.set(cpu_usage / 100)
                self.cpu_label.configure(text=f"CPU: {cpu_usage:.1f}%")
            
            if hasattr(self, 'memory_progress'):
                self.memory_progress.set(memory_usage / 100)
                self.memory_label.configure(text=f"M√©moire: {memory_usage:.1f}%")
            
            if hasattr(self, 'disk_progress'):
                self.disk_progress.set(disk_usage / 100)
                self.disk_label.configure(text=f"Disque: {disk_usage:.1f}%")

    def update_statistics_async(self):
        """Met √† jour les statistiques de mani√®re asynchrone"""
        try:
            basic_stats = self.get_basic_statistics()
            self.update_queue.put(("basic_stats", basic_stats))
            
            detailed_stats = self.get_detailed_statistics()
            self.update_queue.put(("detailed_stats", detailed_stats))
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des statistiques: {e}")

    def update_system_info_async(self):
        """Met √† jour les informations syst√®me de mani√®re asynchrone"""
        try:
            system_info = self.get_system_info()
            self.update_queue.put(("system_info", system_info))
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des informations syst√®me: {e}")
    
    def perform_backup_stub(self):
        """
        M√©thode de substitution pour la sauvegarde
        """
        self.show_message(
            "Information",
            "La fonctionnalit√© de sauvegarde est en cours d'impl√©mentation.",
            "info"
        )
        
        # Essayer d'appeler la m√©thode du contr√¥leur si disponible
        if hasattr(self.model, 'perform_backup'):
            return self.model.perform_backup()
        return False
    
    def check_integrity_stub(self):
        """
        M√©thode de substitution pour la v√©rification d'int√©grit√©
        """
        self.show_message(
            "Information",
            "La fonctionnalit√© de v√©rification d'int√©grit√© est en cours d'impl√©mentation.",
            "info"
        )
        
        # Essayer d'appeler la m√©thode du contr√¥leur si disponible
        if hasattr(self.model, 'check_integrity'):
            return self.model.check_integrity()
        return False
    
    def optimize_app_stub(self):
        """
        M√©thode de substitution pour l'optimisation
        """
        self.show_message(
            "Information",
            "La fonctionnalit√© d'optimisation est en cours d'impl√©mentation.",
            "info"
        )
        
        # Essayer d'appeler la m√©thode du contr√¥leur si disponible
        if hasattr(self.model, 'optimize_app'):
            return self.model.optimize_app()
        return False
    
    def handle_alert_action_stub(self, alert):
        """
        M√©thode de substitution pour g√©rer les actions d'alerte
        """
        self.show_message(
            "Action d'alerte",
            f"Action '{alert.get('action')}' pour l'alerte '{alert.get('title')}'",
            "info"
        )
        
        # Essayer d'appeler la m√©thode du contr√¥leur si disponible
        if hasattr(self.model, 'handle_alert_action'):
            return self.model.handle_alert_action(alert)
        return False
    
    def show_message(self, title, message, message_type="info", is_progress=False):
        """
        Affiche un message dans une bo√Æte de dialogue
        
        Args:
            title: Titre du message
            message: Contenu du message
            message_type: Type de message ('info', 'success', 'warning', 'error')
            is_progress: Indique s'il s'agit d'un message de progression
        """
        # D√©terminer l'ic√¥ne en fonction du type de message
        if message_type == "error":
            icon = "‚ùå"
            color = "#e74c3c"
        elif message_type == "warning":
            icon = "‚ö†Ô∏è"
            color = "#f39c12"
        elif message_type == "success":
            icon = "‚úÖ"
            color = "#2ecc71"
        else:
            icon = "‚ÑπÔ∏è"
            color = "#3498db"
        
        # Cr√©er la bo√Æte de dialogue
        dialog = ctk.CTkToplevel(self.frame)
        dialog.title(title)
        dialog.geometry("400x200")
        dialog.lift()
        dialog.focus_force()
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Contenu du message
        content_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        content_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)
        
        # Ic√¥ne et titre
        header_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        header_frame.pack(fill=ctk.X, pady=(0, 10))
        
        icon_label = ctk.CTkLabel(header_frame, text=icon, font=ctk.CTkFont(size=24))
        icon_label.pack(side=ctk.LEFT, padx=(0, 10))
        
        title_label = ctk.CTkLabel(
            header_frame,
            text=title,
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=color
        )
        title_label.pack(side=ctk.LEFT)
        
        # Message
        message_label = ctk.CTkLabel(
            content_frame,
            text=message,
            wraplength=360,
            justify="left"
        )
        message_label.pack(fill=ctk.X, pady=10)
        
        if is_progress:
            # Ajouter une barre de progression
            progress = ctk.CTkProgressBar(content_frame)
            progress.pack(fill=ctk.X, pady=10)
            progress.configure(mode="indeterminate")
            progress.start()
        else:
            # Bouton OK
            button_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
            button_frame.pack(fill=ctk.X, pady=10)
            
            ok_button = ctk.CTkButton(
                button_frame,
                text="OK",
                width=100,
                command=dialog.destroy
            )
            ok_button.pack(side=ctk.RIGHT)

    def cleanup(self):
        """
        Nettoie les ressources utilis√©es par la vue
        """
        self._is_running = False
        if self._update_after_id:
            self.frame.after_cancel(self._update_after_id)
            self._update_after_id = None
        
        # Vider la file d'attente
        while not self.update_queue.empty():
            try:
                self.update_queue.get_nowait()
            except queue.Empty:
                break
        
        # Nettoyer les widgets
        for widget in self.frame.winfo_children():
            widget.destroy()
        
        logger.info("Nettoyage du tableau de bord effectu√©")

    def _get_recent_error_logs(self):
        """
        R√©cup√®re les journaux d'erreurs r√©cents.
        
        Returns:
            list: Liste des journaux d'erreurs r√©cents
        """
        try:
            # Essayer de r√©cup√©rer les journaux d'erreurs depuis le mod√®le
            if hasattr(self.model, 'get_error_logs'):
                return self.model.get_error_logs()
            
            # Si le mod√®le a un attribut pour les journaux d'erreurs
            if hasattr(self.model, 'error_logs'):
                return self.model.error_logs
            
            # Si aucune des m√©thodes ci-dessus n'est disponible, g√©n√©rer des donn√©es de d√©mo
            # Les journaux de d√©mo sont g√©n√©r√©s pour les derni√®res 48 heures
            now = datetime.now()
            demo_logs = []
            
            # G√©n√©rer quelques entr√©es de journal de d√©mo
            for i in range(10):
                hours_ago = (i * 5) % 48  # R√©partir sur 48 heures
                log_time = now - timedelta(hours=hours_ago)
                
                demo_logs.append({
                    "timestamp": log_time,
                    "level": "ERROR" if i % 3 == 0 else "WARNING",
                    "message": f"Erreur de d√©monstration #{i+1}",
                    "source": "syst√®me" if i % 2 == 0 else "application"
                })
            
            return demo_logs
            
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des journaux d'erreurs: {e}")
            return []
    
    def _is_within_last_24h(self, log):
        """
        V√©rifie si un journal d'erreur est dans les derni√®res 24 heures
        
        Args:
            log: Journal d'erreur √† v√©rifier
            
        Returns:
            bool: True si le journal est dans les derni√®res 24 heures, False sinon
        """
        try:
            now = datetime.now()
            log_time = log.get("timestamp")
            
            # Si log_time est une cha√Æne, la convertir en datetime
            if isinstance(log_time, str):
                log_time = datetime.fromisoformat(log_time)
                
            # Si log_time est None ou invalid, retourner False
            if not log_time:
                return False
                
            # V√©rifier si le journal est dans les derni√®res 24 heures
            time_diff = now - log_time
            return time_diff.total_seconds() < 86400  # 24 heures en secondes
            
        except Exception as e:
            logger.warning(f"Erreur lors de la v√©rification de la date du journal: {e}")
            return False

    def count_active_users(self):
        """
        Compte le nombre d'utilisateurs actifs aujourd'hui
        
        Returns:
            int: Nombre d'utilisateurs actifs
        """
        try:
            users = self.model.get_users() if hasattr(self.model, 'get_users') else []
            return sum(1 for user in users if self.is_user_active_today(user))
        except Exception as e:
            logger.error(f"Erreur lors du comptage des utilisateurs actifs: {e}")
            return 0

    def _is_cache_valid(self, key: str) -> bool:
        """
        V√©rifie si les donn√©es en cache sont valides
        
        Args:
            key: Cl√© du cache √† v√©rifier
            
        Returns:
            bool: True si le cache est valide, False sinon
        """
        try:
            if key in self._cache:
                timestamp, _ = self._cache[key]
                return time.time() - timestamp < self._cache_timeout
            return False
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification du cache: {e}")
            return False

    def _update_cache_timestamp(self, key: str):
        """
        Met √† jour le timestamp du cache pour une cl√© donn√©e
        
        Args:
            key: Cl√© du cache √† mettre √† jour
        """
        try:
            if key in self._cache:
                _, data = self._cache[key]
                self._cache[key] = (time.time(), data)
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour du timestamp du cache: {e}")