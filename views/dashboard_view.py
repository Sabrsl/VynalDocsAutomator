#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vue du tableau de bord pour l'application Vynal Docs Automator
"""

import logging
from typing import Callable, Dict, List, Optional, Any
import customtkinter as ctk
from datetime import datetime
import os
import sys
from PIL import Image

logger = logging.getLogger("VynalDocsAutomator.DashboardView")

class DashboardView:
    """
    Vue du tableau de bord
    Affiche un r√©sum√© des donn√©es et des activit√©s r√©centes
    """
    
    def __init__(self, parent: ctk.CTk, app_model: Any) -> None:
        """
        Initialise la vue du tableau de bord
        
        Args:
            parent: Widget parent
            app_model: Mod√®le de l'application
        """
        self.parent = parent
        self.model = app_model
        
        # Initialiser les actions rapides avec des fonctions par d√©faut.
        # Ces callbacks seront red√©finis par l'AppController.
        self.new_document: Callable[[], None] = lambda: logger.info("Action: Nouveau document (non impl√©ment√©e)")
        self.add_client: Callable[[], None] = lambda: logger.info("Action: Ajouter un client (non impl√©ment√©e)")
        self.new_template: Callable[[], None] = lambda: logger.info("Action: Cr√©er un mod√®le (non impl√©ment√©e)")
        self.process_document: Callable[[], None] = lambda: logger.info("Action: Nouveau document (non impl√©ment√©e)")
        
        # Callback appel√© apr√®s que la vue est compl√®tement rendue
        self.post_render_callback = None
        
        # Charger les ic√¥nes
        self.load_icons()
        
        # Cadre principal de la vue avec bordure arrondie
        self.frame = ctk.CTkFrame(parent, corner_radius=10)
        
        # Cr√©ation de l'interface
        self.create_widgets()
        
        logger.info("DashboardView initialis√©e")
    
    def load_icons(self) -> None:
        """
        Charge les ic√¥nes pour l'interface utilisateur
        """
        try:
            # Chemin du r√©pertoire des ic√¥nes (√† ajuster selon votre structure de projet)
            icon_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "assets", "icons")
            
            # Si le r√©pertoire des ic√¥nes n'existe pas, utiliser des ic√¥nes par d√©faut
            if not os.path.exists(icon_path):
                logger.warning(f"R√©pertoire d'ic√¥nes non trouv√©: {icon_path}")
                self.icons = {
                    "client": "üë•",
                    "document": "üìÑ",
                    "template": "üìã",
                    "settings": "‚öôÔ∏è"
                }
                self.use_text_icons = True
                return
                
            # Taille des ic√¥nes pour les cartes de statistiques
            icon_size = (64, 64)
            
            # Charger les ic√¥nes
            self.icons = {}
            
            # Ic√¥ne clients
            try:
                client_icon_path = os.path.join(icon_path, "users.png")
                if os.path.exists(client_icon_path):
                    self.icons["client"] = ctk.CTkImage(
                        light_image=Image.open(client_icon_path),
                        dark_image=Image.open(client_icon_path),
                        size=icon_size
                    )
                else:
                    self.icons["client"] = "üë•"
            except Exception as e:
                logger.warning(f"Erreur lors du chargement de l'ic√¥ne clients: {e}")
                self.icons["client"] = "üë•"
                
            # Ic√¥ne documents
            try:
                doc_icon_path = os.path.join(icon_path, "document.png")
                if os.path.exists(doc_icon_path):
                    self.icons["document"] = ctk.CTkImage(
                        light_image=Image.open(doc_icon_path),
                        dark_image=Image.open(doc_icon_path),
                        size=icon_size
                    )
                else:
                    self.icons["document"] = "üìÑ"
            except Exception as e:
                logger.warning(f"Erreur lors du chargement de l'ic√¥ne documents: {e}")
                self.icons["document"] = "üìÑ"
                
            # Ic√¥ne mod√®les
            try:
                template_icon_path = os.path.join(icon_path, "template.png")
                if os.path.exists(template_icon_path):
                    self.icons["template"] = ctk.CTkImage(
                        light_image=Image.open(template_icon_path),
                        dark_image=Image.open(template_icon_path),
                        size=icon_size
                    )
                else:
                    self.icons["template"] = "üìã"
            except Exception as e:
                logger.warning(f"Erreur lors du chargement de l'ic√¥ne mod√®les: {e}")
                self.icons["template"] = "üìã"
                
            # Ic√¥ne param√®tres
            self.icons["settings"] = "‚öôÔ∏è"
            
            # Utiliser des ic√¥nes d'image au lieu de texte
            self.use_text_icons = not all(
                isinstance(self.icons[key], ctk.CTkImage) 
                for key in ["client", "document", "template"]
            )
                
        except Exception as e:
            logger.error(f"Erreur lors du chargement des ic√¥nes: {e}")
            # Fallback sur les ic√¥nes texte
            self.icons = {
                "client": "üë•",
                "document": "üìÑ",
                "template": "üìã",
                "settings": "‚öôÔ∏è"
            }
            self.use_text_icons = True
    
    def create_widgets(self) -> None:
        """
        Cr√©e les widgets du tableau de bord.
        """
        # Cadre pour les statistiques avec bordure compl√®tement arrondie
        self.stats_frame = ctk.CTkFrame(self.frame, corner_radius=10)
        self.stats_frame.pack(fill=ctk.X, pady=10, padx=10)  # Ajout de padx pour √©viter le d√©bordement
        
        # Titre de la section
        ctk.CTkLabel(
            self.stats_frame,
            text="Vue d'ensemble",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=10, pady=5)
        
        # Cartes de statistiques
        self.cards_frame = ctk.CTkFrame(self.stats_frame, fg_color="transparent")
        self.cards_frame.pack(fill=ctk.X, padx=10, pady=5)
        
        # Configuration d'une grille √† 3 colonnes
        self.cards_frame.columnconfigure(0, weight=1)
        self.cards_frame.columnconfigure(1, weight=1)
        self.cards_frame.columnconfigure(2, weight=1)
        
        # Carte des clients
        self.client_card = self.create_stat_card(self.cards_frame, "Clients", self.icons["client"], "0", 0, 0)
        
        # Carte des mod√®les
        self.template_card = self.create_stat_card(self.cards_frame, "Mod√®les", self.icons["template"], "0", 0, 1)
        
        # Carte des documents
        self.document_card = self.create_stat_card(self.cards_frame, "Documents", self.icons["document"], "0", 0, 2)
        
        # Cadre pour les actions rapides
        self.actions_frame = ctk.CTkFrame(self.frame, corner_radius=10)
        self.actions_frame.pack(fill=ctk.X, pady=10, padx=10)  # Ajout de padx pour √©viter le d√©bordement
        
        # Titre de la section
        ctk.CTkLabel(
            self.actions_frame,
            text="Actions rapides",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=10, pady=5)
        
        # Boutons d'actions rapides
        self.action_buttons_frame = ctk.CTkFrame(self.actions_frame, fg_color="transparent")
        self.action_buttons_frame.pack(fill=ctk.X, padx=10, pady=5)
        
        # Cr√©er le bouton "Traiter un document"
        self.process_doc_btn = ctk.CTkButton(
            self.action_buttons_frame,
            text="Traiter un document",
            width=150,
            command=self._process_document_callback
        )
        self.process_doc_btn.pack(side=ctk.LEFT, padx=5, pady=5)
        
        # Cr√©er le bouton "Ajouter un client"
        self.add_client_btn = ctk.CTkButton(
            self.action_buttons_frame,
            text="Ajouter un client",
            width=150,
            command=self._add_client_callback
        )
        self.add_client_btn.pack(side=ctk.LEFT, padx=5, pady=5)
        
        # Cr√©er le bouton "Cr√©er un mod√®le"
        self.new_template_btn = ctk.CTkButton(
            self.action_buttons_frame,
            text="Cr√©er un mod√®le",
            width=150,
            command=self._new_template_callback
        )
        self.new_template_btn.pack(side=ctk.LEFT, padx=5, pady=5)
        
        # Cadre pour les activit√©s r√©centes
        self.activities_frame = ctk.CTkFrame(self.frame, corner_radius=10)
        self.activities_frame.pack(fill=ctk.BOTH, expand=True, pady=10, padx=10)  # Ajout de padx pour √©viter le d√©bordement
        
        # Titre de la section
        ctk.CTkLabel(
            self.activities_frame,
            text="Activit√©s r√©centes",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(anchor="w", padx=10, pady=5)
        
        # Zone d√©filante pour les activit√©s avec coin arrondis
        self.activities_list_frame = ctk.CTkScrollableFrame(self.activities_frame, corner_radius=8)
        self.activities_list_frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=5)
        
        # Message si aucune activit√©
        self.no_activities_label = ctk.CTkLabel(
            self.activities_list_frame,
            text="Aucune activit√© r√©cente",
            font=ctk.CTkFont(size=12),
            fg_color="transparent",
            text_color="gray"
        )
        self.no_activities_label.pack(pady=20)
    
    def _new_document_callback(self) -> None:
        """
        Fonction callback pour le bouton "Nouveau document"
        Utilise la fonction d√©finie par le contr√¥leur
        """
        try:
            if callable(self.new_document):
                logger.info("Appel de la fonction new_document depuis le tableau de bord")
                self.new_document()
            else:
                logger.error("La fonction new_document n'est pas d√©finie ou n'est pas callable")
        except Exception as e:
            logger.error(f"Erreur lors de l'appel √† new_document: {e}")
    
    def _add_client_callback(self) -> None:
        """
        Fonction callback pour le bouton "Ajouter un client"
        Utilise la fonction d√©finie par le contr√¥leur
        """
        try:
            if callable(self.add_client):
                logger.info("Appel de la fonction add_client depuis le tableau de bord")
                self.add_client()
            else:
                logger.error("La fonction add_client n'est pas d√©finie ou n'est pas callable")
        except Exception as e:
            logger.error(f"Erreur lors de l'appel √† add_client: {e}")
    
    def _new_template_callback(self) -> None:
        """
        Fonction callback pour le bouton "Cr√©er un mod√®le"
        Utilise la fonction d√©finie par le contr√¥leur
        """
        try:
            if callable(self.new_template):
                logger.info("Appel de la fonction new_template depuis le tableau de bord")
                self.new_template()
            else:
                logger.error("La fonction new_template n'est pas d√©finie ou n'est pas callable")
        except Exception as e:
            logger.error(f"Erreur lors de l'appel √† new_template: {e}")
    
    def _process_document_callback(self) -> None:
        """
        Fonction callback pour le bouton "Traiter un document"
        Utilise la fonction d√©finie par le contr√¥leur
        """
        try:
            if callable(self.process_document):
                logger.info("Appel de la fonction process_document depuis le tableau de bord")
                self.process_document()
            else:
                logger.error("La fonction process_document n'est pas d√©finie ou n'est pas callable")
        except Exception as e:
            logger.error(f"Erreur lors de l'appel √† process_document: {e}")
    
    def create_stat_card(
            self,
            parent: ctk.CTkFrame,
            title: str,
            icon,  # Peut √™tre une cha√Æne ou CTkImage
            value: str,
            row: int,
            col: int
    ) -> Dict[str, ctk.CTkBaseClass]:
        """
        Cr√©e une carte de statistique.

        Args:
            parent: Widget parent.
            title: Titre de la carte.
            icon: Ic√¥ne √† afficher (texte ou CTkImage).
            value: Valeur √† afficher.
            row: Ligne dans la grille.
            col: Colonne dans la grille.
        
        Returns:
            dict: Dictionnaire contenant les widgets de la carte.
        """
        card = ctk.CTkFrame(parent, corner_radius=8)
        card.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
        
        # Cr√©er un label pour l'ic√¥ne, avec gestion des deux types (texte ou image)
        if isinstance(icon, ctk.CTkImage):
            icon_label = ctk.CTkLabel(card, text="", image=icon)
        else:
            icon_label = ctk.CTkLabel(card, text=icon, font=ctk.CTkFont(size=30))
        
        icon_label.pack(pady=(10, 5))
        
        value_label = ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=24, weight="bold"))
        value_label.pack(pady=5)
        
        title_label = ctk.CTkLabel(card, text=title, font=ctk.CTkFont(size=14))
        title_label.pack(pady=(5, 10))
        
        return {"frame": card, "icon": icon_label, "value": value_label, "title": title_label}
    
    def create_activity_item(
            self,
            parent: ctk.CTkScrollableFrame,
            activity: Dict[str, Any]
    ) -> ctk.CTkFrame:
        """
        Cr√©e un √©l√©ment d'activit√©.

        Args:
            parent: Widget parent.
            activity: Dictionnaire contenant les donn√©es d'activit√©.
        
        Returns:
            ctk.CTkFrame: Cadre contenant l'√©l√©ment d'activit√©.
        """
        item = ctk.CTkFrame(parent, fg_color="transparent")
        item.pack(fill=ctk.X, pady=2)
        
        # Utiliser les ic√¥nes modernes ou emoji fallback
        activity_type = activity.get("type", "")
        if activity_type in self.icons:
            icon = self.icons.get(activity_type, "‚ÑπÔ∏è")
        else:
            icons = {
                "client": "üë•",
                "document": "üìÑ",
                "template": "üìã",
                "settings": "‚öôÔ∏è"
            }
            icon = icons.get(activity_type, "‚ÑπÔ∏è")
        
        try:
            timestamp = datetime.fromisoformat(activity["timestamp"])
            formatted_time = timestamp.strftime("%d/%m/%Y %H:%M")
        except (ValueError, KeyError, TypeError):
            formatted_time = activity.get("timestamp", "")
        
        # Si l'ic√¥ne est une image, utiliser un autre layout
        if isinstance(icon, ctk.CTkImage):
            # Cr√©er un frame pour contenir l'ic√¥ne et la description
            content_frame = ctk.CTkFrame(item, fg_color="transparent")
            content_frame.pack(side=ctk.LEFT, fill=ctk.X, expand=True)
            
            # Ic√¥ne plus petite pour les √©l√©ments d'activit√©
            small_icon = ctk.CTkImage(
                light_image=icon._light_image,
                dark_image=icon._dark_image,
                size=(20, 20)
            )
            
            icon_label = ctk.CTkLabel(content_frame, text="", image=small_icon)
            icon_label.pack(side=ctk.LEFT, padx=5)
            
            description = ctk.CTkLabel(
                content_frame, 
                text=activity.get('description', ''), 
                anchor="w", 
                font=ctk.CTkFont(size=12)
            )
            description.pack(side=ctk.LEFT, fill=ctk.X, expand=True)
        else:
            # Version texte/emoji
            description = ctk.CTkLabel(
                item, 
                text=f"{icon} {activity.get('description', '')}", 
                anchor="w", 
                font=ctk.CTkFont(size=12)
            )
            description.pack(side=ctk.LEFT, padx=5, fill=ctk.X, expand=True)
        
        time_label = ctk.CTkLabel(
            item, 
            text=formatted_time, 
            font=ctk.CTkFont(size=10), 
            text_color="gray"
        )
        time_label.pack(side=ctk.RIGHT, padx=5)
        
        return item
    
    def update_view(self) -> None:
        """
        Met √† jour la vue avec les donn√©es actuelles.
        """
        # Mettre √† jour les statistiques
        clients_count = len(getattr(self.model, "clients", []))
        templates_count = len(getattr(self.model, "templates", []))
        documents_count = len(getattr(self.model, "documents", []))
        
        self.client_card["value"].configure(text=str(clients_count))
        self.template_card["value"].configure(text=str(templates_count))
        self.document_card["value"].configure(text=str(documents_count))
        
        # Mettre √† jour la liste des activit√©s r√©centes
        for widget in self.activities_list_frame.winfo_children():
            if widget != self.no_activities_label:
                widget.destroy()
        
        activities = []
        try:
            activities = self.model.get_recent_activities()
        except AttributeError:
            logger.warning("La m√©thode get_recent_activities n'existe pas dans le mod√®le")
        
        if activities:
            self.no_activities_label.pack_forget()
            for activity in activities:
                self.create_activity_item(self.activities_list_frame, activity)
        else:
            self.no_activities_label.pack(pady=20)
        
        # Force l'affichage et la mise √† jour compl√®te
        self.frame.update()
        
        logger.info("DashboardView mise √† jour")
        
        # Appeler le callback apr√®s que la vue est compl√®tement mise √† jour
        if callable(self.post_render_callback):
            self.post_render_callback()
            # R√©initialiser le callback pour √©viter les appels multiples
            self.post_render_callback = None
    
    def show(self) -> None:
        """
        Affiche la vue et s'assure qu'elle est compl√®tement initialis√©e.
        """
        # S'assurer que le tableau de bord est compl√®tement initialis√©
        self.frame.pack(fill=ctk.BOTH, expand=True)
        
        # Mettre √† jour les donn√©es
        self.update_view()
        
        # Forcer la mise √† jour de l'interface
        self.frame.update()
        
        logger.info("DashboardView affich√©e et initialis√©e")
    
    def hide(self) -> None:
        """
        Masque la vue.
        """
        self.frame.pack_forget()
    
    def reconnect_buttons(self) -> None:
        """
        R√©initialise les commandes des boutons apr√®s une reconnexion
        Cette m√©thode est appel√©e par MainView apr√®s une reconnexion
        """
        try:
            logger.info("Reconnexion des boutons du tableau de bord")
            
            # R√©initialiser les commandes pour les boutons d'action rapide
            if hasattr(self, 'process_doc_btn'):
                self.process_doc_btn.configure(command=self._process_document_callback)
                
            if hasattr(self, 'add_client_btn'):
                self.add_client_btn.configure(command=self._add_client_callback)
                
            if hasattr(self, 'new_template_btn'):
                self.new_template_btn.configure(command=self._new_template_callback)
                
            logger.info("Boutons du tableau de bord reconnect√©s avec succ√®s")
            
        except Exception as e:
            logger.error(f"Erreur lors de la reconnexion des boutons: {e}")