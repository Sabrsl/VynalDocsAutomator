#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vue de gestion des documents pour l'application Vynal Docs Automator
avec organisation en dossiers
"""

import os
import logging
import shutil
import threading
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import messagebox, filedialog
import customtkinter as ctk
from utils.dialog_utils import DialogUtils
import traceback
import platform
import subprocess

# Exceptions personnalis√©es
class DocumentValidationError(Exception):
    """Exception pour les erreurs de validation de document"""
    pass

class FileSecurityError(Exception):
    """Exception pour les erreurs de s√©curit√© de fichier"""
    pass

logger = logging.getLogger("VynalDocsAutomator.DocumentView")

class DocumentView:
    """
    Vue de gestion des documents avec interface moderne et organisation en dossiers
    Permet de visualiser, cr√©er et g√©rer des documents
    """
    
    # Constantes de configuration
    MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 Mo
    MAX_CACHE_SIZE = 50
    OPERATION_TIMEOUT = 5.0
    ALLOWED_EXTENSIONS = ['.pdf', '.docx', '.doc', '.txt', '.odt', '.rtf']
    ALLOWED_MIME_TYPES = [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'text/plain',
        'application/vnd.oasis.opendocument.text',
        'application/rtf'
    ]
    
    def __init__(self, parent, app_model):
        """
        Initialise la vue de gestion des documents
        
        Args:
            parent: Widget parent
            app_model: Mod√®le de l'application
        """
        self.parent = parent
        self.model = app_model
        
        # Initialiser les variables de filtre en premier
        self.search_var = ctk.StringVar(value="")
        self.client_var = ctk.StringVar(value="Tous les clients")
        self.type_var = ctk.StringVar(value="Tous les types")
        self.type_filter_var = ctk.StringVar(value="Tous")  
        self.date_filter_var = ctk.StringVar(value="Toutes")
        
        # Initialiser les caches d√®s le d√©but
        self.client_names_cache = {}
        self._file_type_cache = {}
        self._file_type_cache_size = 100
        
        # Initialiser le gestionnaire d'utilisation
        from utils.usage_tracker import UsageTracker
        self.usage_tracker = UsageTracker()
        
        # Initialiser le gestionnaire de cache
        from utils.cache_manager import CacheManager
        self.cache_manager = CacheManager()
        
        # Initialiser l'optimiseur de fichiers
        from utils.file_optimizer import file_optimizer
        self.file_optimizer = file_optimizer
        
        # Initialiser l'analyseur de documents
        self.doc_analyzer = None
        self._init_doc_analyzer()
        
        # Cadre principal de la vue
        self.frame = ctk.CTkFrame(parent)
        
        # Liste pour stocker les documents s√©lectionn√©s
        self.selected_documents = []
        
        # Variable pour stocker le dossier s√©lectionn√©
        self.selected_folder = None
        self.current_subfolder = None  # Pour suivre le sous-dossier actuel
        
        # Structure de dossiers
        self.document_folders = {
            "client": "Par client",
            "type": "Par type",
            "date": "Par date"
        }
        
        # Ic√¥nes des dossiers
        self.folder_icons = {
            "client": "üë•",
            "type": "üìë",
            "date": "üìÖ"
        }
        
        # Param√®tres de performance et pagination
        self.page_size = 20  # Nombre de documents par page
        self.current_page = 0
        self.total_documents = 0
        self.documents_cache = {}
        self.last_filter = None
        
        # Param√®tres de performance
        self.debounce_delay = 300  # D√©lai de debounce en millisecondes
        self.search_timer = None
        self.is_loading = False
        self.loading_queue = None
        
        # Cr√©er les composants de l'interface
        self.create_widgets()
        
        # Initialiser le traitement asynchrone
        self._setup_async_processing()
        
        # Pr√©calculer et mettre en cache les informations des clients
        try:
            self._cache_client_data()
        except Exception as e:
            # Gestion d√©fensive des erreurs
            logger.error(f"Erreur lors de la mise en cache des donn√©es clients: {e}")
            # S'assurer que le cache est au moins vide mais initialis√©
            self.client_names_cache = {}
        
        # Cr√©er les attributs pour les mod√®les personnalis√©s, s'ils n'existent pas d√©j√†
        if not hasattr(self.model, 'custom_folders'):
            self.model.custom_folders = {}
        
        if not hasattr(self.model, 'get_custom_folders'):
            self.model.get_custom_folders = lambda: self.model.custom_folders
        
        if not hasattr(self.model, 'add_custom_folder'):
            setattr(self.model, 'add_custom_folder', self._add_custom_folder_adapter)
        
        if not hasattr(self.model, 'rename_custom_folder'):
            setattr(self.model, 'rename_custom_folder', self._rename_custom_folder_adapter)
        
        if not hasattr(self.model, 'delete_custom_folder'):
            setattr(self.model, 'delete_custom_folder', self._delete_custom_folder_adapter)
        
        if not hasattr(self.model, 'get_documents_by_custom_folder'):
            setattr(self.model, 'get_documents_by_custom_folder', self._get_documents_by_custom_folder_adapter)
        
        if not hasattr(self.model, 'document_in_custom_folder'):
            setattr(self.model, 'document_in_custom_folder', self._document_in_custom_folder_adapter)
        
        # Configurer la recherche en temps r√©el
        self._setup_search()
        
        logger.info("DocumentView moderne initialis√©e")
    
    def _init_doc_analyzer(self):
        """
        Initialise le module doc_analyzer de mani√®re s√©curis√©e
        """
        try:
            # Ajouter le r√©pertoire parent au PYTHONPATH
            import sys
            import os
            parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            if parent_dir not in sys.path:
                sys.path.insert(0, parent_dir)
            
            # Importer et initialiser DocumentAnalyzer
            from doc_analyzer.analyzer import DocumentAnalyzer
            self.doc_analyzer = DocumentAnalyzer()
            return True
        except ImportError as e:
            logger = logging.getLogger("VynalDocsAutomator")
            logger.error(f"Impossible d'importer le module doc_analyzer: {e}")
            return False
        except Exception as e:
            logger = logging.getLogger("VynalDocsAutomator")
            logger.error(f"Erreur lors de l'initialisation du doc_analyzer: {e}")
            return False
    
    def _setup_async_processing(self):
        """
        Configure le traitement asynchrone des documents
        """
        import threading
        import queue
        
        # Cr√©er une file d'attente de traitement
        self.loading_queue = queue.Queue()
        
        # D√©marrer un thread de surveillance de la file d'attente
        def queue_worker():
            while True:
                try:
                    # R√©cup√©rer une t√¢che de la file d'attente
                    task, args = self.loading_queue.get()
                    # Ex√©cuter la t√¢che
                    task(*args)
                    # Marquer la t√¢che comme termin√©e
                    self.loading_queue.task_done()
                except Exception as e:
                    logger = logging.getLogger("VynalDocsAutomator")
                    logger.error(f"Erreur dans le thread de traitement: {e}")
                    # Continuer malgr√© l'erreur
                    continue
        
        # D√©marrer le thread de traitement
        worker_thread = threading.Thread(target=queue_worker, daemon=True)
        worker_thread.start()
    
    def _cache_client_data(self):
        """Pr√©charge et met en cache les donn√©es des clients pour un acc√®s rapide - Version corrig√©e"""
        try:
            # V√©rifier si la propri√©t√© model existe
            if not hasattr(self, 'model'):
                logger.error("Mod√®le non initialis√©")
                self.client_names_cache = {}
                return
            
            # V√©rifier si clients existe dans le mod√®le
            if not hasattr(self.model, 'clients') or self.model.clients is None:
                logger.warning("Liste de clients non disponible dans le mod√®le")
                self.client_names_cache = {}
                return
            
            # Nettoyer le cache existant
            self._cleanup_client_cache()
            
            # Ajouter des logs de d√©bogage pour mieux comprendre la structure
            logger.debug(f"Type de la structure clients: {type(self.model.clients)}")
            
            # Initialiser le cache
            self.client_names_cache = {}
            
            # Traitement diff√©rent selon le type de la structure
            if isinstance(self.model.clients, list):
                # Pour une liste de clients
                for client in self.model.clients:
                    client_id = client.get("id")
                    client_name = client.get("name", "Inconnu")
                    
                    if client_id:
                        self.client_names_cache[client_id] = client_name
                        logger.debug(f"Client mis en cache (liste): ID={client_id}, Nom={client_name}")
            
            elif isinstance(self.model.clients, dict):
                # Pour un dictionnaire de clients
                for client_id, client in self.model.clients.items():
                    if isinstance(client, dict):  # V√©rifier que c'est bien un dictionnaire
                        client_name = client.get("name", "Inconnu")
                        self.client_names_cache[client_id] = client_name
                        logger.debug(f"Client mis en cache (dict): ID={client_id}, Nom={client_name}")
                    else:
                        logger.warning(f"Structure client invalide pour ID={client_id}: {type(client)}")
            
            else:
                logger.warning(f"Structure clients non reconnue: {type(self.model.clients)}")
            
            # Afficher un r√©sum√© du cache
            logger.info(f"Cache clients mis √† jour - Nombre de clients: {len(self.client_names_cache)}")
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise en cache des donn√©es clients: {e}")
            # S'assurer que le cache est au moins vide mais initialis√©
            self.client_names_cache = {}
    
    def _cleanup_client_cache(self):
        """Nettoie le cache des clients en supprimant les entr√©es obsol√®tes"""
        if not hasattr(self, 'client_names_cache') or not self.client_names_cache:
            return
        
        # Liste des IDs √† supprimer
        to_remove = []
        
        # V√©rifier chaque client dans le cache
        for client_id in self.client_names_cache:
            client_exists = False
            if isinstance(self.model.clients, list):
                client_exists = any(c.get('id') == client_id for c in self.model.clients)
            elif isinstance(self.model.clients, dict):
                client_exists = client_id in self.model.clients
            
            if not client_exists:
                to_remove.append(client_id)
        
        # Supprimer les entr√©es obsol√®tes
        for client_id in to_remove:
            logger.debug(f"Suppression du client {client_id} du cache (obsol√®te)")
            del self.client_names_cache[client_id]
        
        if to_remove:
            logger.info(f"Cache nettoy√© : {len(to_remove)} entr√©es obsol√®tes supprim√©es")
    
    def create_widgets(self):
        """
        Cr√©e les widgets de la vue avec un style moderne
        """
        # Barre d'outils
        self.toolbar = ctk.CTkFrame(self.frame)
        self.toolbar.pack(fill=ctk.X, pady=10)
        
        # Bouton Nouveau document
        self.new_doc_btn = ctk.CTkButton(
            self.toolbar,
            text="+ Nouveau document",
            command=self.new_document
        )
        self.new_doc_btn.pack(side=ctk.LEFT, padx=10)
        
        # Bouton Retour (initialement cach√©)
        self.back_btn = ctk.CTkButton(
            self.toolbar,
            text="Retour",
            command=self.handle_back
        )
        
        # Indicateur de chargement
        self.loading_label = ctk.CTkLabel(
            self.toolbar,
            text="Chargement...",
            text_color="#3498db",
            font=ctk.CTkFont(size=12, weight="bold")
        )
        
        # Recherche
        self.search_frame = ctk.CTkFrame(self.toolbar, fg_color="transparent")
        self.search_frame.pack(side=ctk.RIGHT, padx=10)
        
        self.search_var.trace("w", lambda name, index, mode: self.debounced_filter_documents())
        
        self.search_entry = ctk.CTkEntry(
            self.search_frame,
            placeholder_text="Rechercher un document...",
            width=200,
            textvariable=self.search_var
        )
        self.search_entry.pack(side=ctk.LEFT)
        
        # Ajouter un bouton de r√©initialisation de la recherche
        self.clear_search_btn = ctk.CTkButton(
            self.search_frame,
            text="‚úï",
            width=25,
            height=25,
            fg_color="transparent",
            hover_color="#E0E0E0",
            command=self._clear_search
        )
        self.clear_search_btn.pack(side=ctk.LEFT, padx=(2, 0))
        
        # Filtres suppl√©mentaires (masqu√©s dans la vue dossiers)
        self._setup_filters()
        
        # Zone principale de contenu
        self.content_frame = ctk.CTkScrollableFrame(self.frame)
        self.content_frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)
        
        # Message si aucun document
        self.no_documents_label = ctk.CTkLabel(
            self.content_frame,
            text="Aucun document disponible. Cr√©ez un nouveau document pour commencer.",
            font=ctk.CTkFont(size=12),
            fg_color="transparent",
            text_color="gray"
        )
        
        # Grille de documents
        self.documents_grid = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        
        # Grille de dossiers
        self.folders_grid = ctk.CTkFrame(self.content_frame, fg_color="transparent")
        
        # Configurer les grilles pour avoir 3 colonnes
        for grid in [self.documents_grid, self.folders_grid]:
            for i in range(3):
                grid.columnconfigure(i, weight=1)
        
        # Ajouter les contr√¥les de pagination (initialement cach√©s)
        self.pagination_frame = ctk.CTkFrame(self.frame)
        
        self.prev_page_button = ctk.CTkButton(
            self.pagination_frame,
            text="‚óÄ Pr√©c√©dent",
            command=self._previous_page,
            width=100,
            font=ctk.CTkFont(size=12)
        )
        self.prev_page_button.pack(side=ctk.LEFT, padx=5)
        
        self.pagination_label = ctk.CTkLabel(
            self.pagination_frame,
            text="Page 1/1",
            font=ctk.CTkFont(size=12)
        )
        self.pagination_label.pack(side=ctk.LEFT, padx=10)
        
        self.next_page_button = ctk.CTkButton(
            self.pagination_frame,
            text="Suivant ‚ñ∂",
            command=self._next_page,
            width=100,
            font=ctk.CTkFont(size=12)
        )
        self.next_page_button.pack(side=ctk.LEFT, padx=5)
        
        # Afficher la vue des dossiers par d√©faut
        self.show_folders_view()
    
    def _setup_filters(self):
        """Configure les filtres pour les documents"""
        # Cadre pour les filtres
        self.filter_frame = ctk.CTkFrame(self.toolbar, fg_color="transparent")
        
        # Filtre client
        client_label = ctk.CTkLabel(
            self.filter_frame,
            text="Client:",
            font=ctk.CTkFont(size=12)
        )
        client_label.pack(side=ctk.LEFT, padx=(0, 5))
        
        self.client_combobox = ctk.CTkComboBox(
            self.filter_frame,
            values=["Tous les clients"],
            variable=self.client_var,
            width=150,
            command=self.debounced_filter_documents
        )
        self.client_combobox.pack(side=ctk.LEFT, padx=5)
        
        # Filtre type
        type_label = ctk.CTkLabel(
            self.filter_frame,
            text="Type:",
            font=ctk.CTkFont(size=12)
        )
        type_label.pack(side=ctk.LEFT, padx=(10, 5))
        
        self.type_combobox = ctk.CTkComboBox(
            self.filter_frame,
            values=["Tous les types"],
            variable=self.type_var,
            width=150,
            command=self.debounced_filter_documents
        )
        self.type_combobox.pack(side=ctk.LEFT, padx=5)
        
        # Filtre par date
        date_label = ctk.CTkLabel(
            self.filter_frame,
            text="Date:",
            font=ctk.CTkFont(size=12)
        )
        date_label.pack(side=ctk.LEFT, padx=(10, 5))
        
        date_options = [
            "Toutes",
            "Aujourd'hui",
            "Cette semaine",
            "Ce mois",
            "Cette ann√©e"
        ]
        
        self.date_menu = ctk.CTkOptionMenu(
            self.filter_frame,
            values=date_options,
            variable=self.date_filter_var,
            width=150,
            command=self.debounced_filter_documents
        )
        self.date_menu.pack(side=ctk.LEFT, padx=5)
        
        # Initialiser les valeurs des filtres
        self._update_filter_values()
        
        # Ajouter un log pour aider au d√©bogage
        logger.info("Filtres configur√©s avec succ√®s")
    
    def show_folders_view(self):
        """Affiche la vue des dossiers"""
        # R√©initialiser la s√©lection des documents
        self.selected_documents = []
        self.update_selection_ui()
        
        # R√©initialiser la page courante
        self.current_page = 0
        
        # Cacher le bouton retour et le r√©initialiser
        self.back_btn.pack_forget()
        self.back_btn.configure(text="Retour")
        
        # Cacher le titre du dossier s'il existe
        if hasattr(self, 'folder_title_label'):
            self.folder_title_label.pack_forget()
        
        # Cacher les filtres sp√©cifiques
        self.filter_frame.pack_forget()
        
        # Cacher les contr√¥les de pagination
        self.pagination_frame.pack_forget()
        
        # R√©initialiser le dossier s√©lectionn√©
        self.selected_folder = None
        self.current_subfolder = None
        
        # Nettoyer la vue
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
        
        # Cr√©er les cards des dossiers
        self._create_folder_cards()
    
    def _create_folder_cards(self):
        """Cr√©e les cards de dossier pour la vue principale"""
        # D√©terminer les statistiques de documents par type
        stats = self._get_document_stats()
        
        # Cr√©er les cards des dossiers
        row, col = 0, 0
        for folder_id, folder_name in self.document_folders.items():
            count = stats.get(folder_id, 0)
            self.create_folder_card(folder_id, folder_name, count, row, col)
            col += 1
            if col >= 2:  # 2 cards par ligne
                col = 0
                row += 1
    
    def _get_document_stats(self):
        """Calcule les statistiques des documents pour chaque type de dossier"""
        stats = {
            "date": 0,
            "type": 0,
            "client": 0,
            "custom": 0
        }
        
        # Compter tous les documents
        stats["date"] = len(self.model.documents)
        
        # Compter par type
        doc_types = {}
        for doc in self.model.documents:
            doc_type = doc.get("type", "").lower()
            if doc_type:
                if doc_type not in doc_types:
                    doc_types[doc_type] = 0
                doc_types[doc_type] += 1
        stats["type"] = len(doc_types) if doc_types else 0
        
        # Compter par client
        client_docs = {}
        for doc in self.model.documents:
            client_id = doc.get("client_id", "")
            if client_id:
                if client_id not in client_docs:
                    client_docs[client_id] = 0
                client_docs[client_id] += 1
        stats["client"] = len(client_docs) if client_docs else 0
        
        # Compter les dossiers personnalis√©s
        custom_folders = self.model.get_custom_folders() if hasattr(self.model, 'get_custom_folders') else {}
        stats["custom"] = len(custom_folders)
        
        return stats
    
    def create_folder_card(self, folder_id, folder_name, count, row, col):
        """Cr√©e une card pour un dossier - version corrig√©e"""
        # Cr√©er le cadre principal avec une taille fixe
        card = ctk.CTkFrame(
            self.folders_grid,
            width=200,  # Largeur fixe
            height=200,  # Hauteur fixe
            corner_radius=10,
            border_width=0,
            fg_color=("gray95", "gray15")  # Couleur de fond adaptative
        )
        card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        card.grid_propagate(False)  # Emp√™cher le redimensionnement automatique
        
        # Cr√©er un cadre pour le contenu
        content_frame = ctk.CTkFrame(
            card,
            fg_color="transparent",
            width=180,  # Largeur fixe
            height=180  # Hauteur fixe
        )
        content_frame.pack(expand=True, fill="both", padx=10, pady=10)
        content_frame.pack_propagate(False)  # Emp√™cher le redimensionnement automatique
        
        # Ajouter l'ic√¥ne
        icon_label = ctk.CTkLabel(
            content_frame,
            text=self.folder_icons.get(folder_id, "üìÅ"),
            font=ctk.CTkFont(size=48)  # Taille d'ic√¥ne
        )
        icon_label.pack(pady=(20, 10))
        
        # Ajouter le nom du dossier
        name_label = ctk.CTkLabel(
            content_frame,
            text=folder_name,
            font=ctk.CTkFont(size=16, weight="bold"),  # Taille de police
            wraplength=160  # Largeur de texte
        )
        name_label.pack(pady=(0, 10))
        
        # Ajouter le compteur
        count_label = ctk.CTkLabel(
            content_frame,
            text=f"{count} document{'s' if count != 1 else ''}",
            font=ctk.CTkFont(size=12),  # Taille de police
            text_color=("gray50", "gray70")
        )
        count_label.pack(pady=(0, 20))
        
        # Gestionnaires d'√©v√©nements
        def handle_click(event, folder=folder_id):
            self.show_folder_documents(folder)
        
        def handle_enter(event):
            card.configure(border_width=2, border_color=("gray70", "gray30"))
            event.widget.configure(cursor="hand2")
        
        def handle_leave(event):
            card.configure(border_width=0)
            event.widget.configure(cursor="")
        
        # Lier les √©v√©nements au cadre et √† tous les widgets √† l'int√©rieur
        for widget in [card, content_frame, icon_label, name_label, count_label]:
            widget.bind("<Button-1>", handle_click)
            widget.bind("<Enter>", handle_enter)
            widget.bind("<Leave>", handle_leave)
        
        return card
    
    def show_folder_documents(self, folder_id):
        """Affiche le contenu d'un dossier sp√©cifique"""
        # R√©initialiser la s√©lection des documents
        self.selected_documents = []
        self.update_selection_ui()
        
        self.selected_folder = folder_id
        self.current_subfolder = None
        
        # Masquer la vue des dossiers
        self.folders_grid.pack_forget()
        
        # Afficher le bouton retour
        self.back_btn.pack(side=ctk.LEFT, padx=10, before=self.new_doc_btn)
        
        folder_name = self.document_folders.get(folder_id, "Documents")
        folder_icon = self.folder_icons.get(folder_id, "üìÅ")
        
        # Ajouter le titre du dossier
        if not hasattr(self, 'folder_title_label'):
            self.folder_title_label = ctk.CTkLabel(
                self.toolbar,
                text=f"{folder_icon} {folder_name}",
                font=ctk.CTkFont(size=16, weight="bold")
            )
        else:
            self.folder_title_label.configure(
                text=f"{folder_icon} {folder_name}"
            )
        self.folder_title_label.pack(side=ctk.LEFT, padx=20, after=self.back_btn)
        
        # Comportement diff√©rent selon le type de dossier
        if folder_id == "date":
            self._show_date_folders()
        elif folder_id == "type":
            self._show_type_folders()
        elif folder_id == "client":
            self._show_client_folders()
        elif folder_id == "custom":
            self._show_custom_folders()
        else:
            # Pour les autres dossiers, afficher directement les documents
            documents = self._get_filtered_documents()
            self._display_documents(documents)
            
            # Afficher les contr√¥les de pagination si n√©cessaire
            if len(documents) > self.page_size:
                self.pagination_frame.pack(fill=ctk.X, pady=5)
                self._update_pagination_controls(len(documents))
            else:
                self.pagination_frame.pack_forget()
    
    def _show_date_folders(self):
        """Affiche les dossiers organis√©s par date (avec regroupement par mois)"""
        # Nettoyer la vue
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
            
        # Analyser les documents par ann√©e-mois
        years = {}  # Dictionnaire pour regrouper par ann√©e
        months = {}  # Dictionnaire pour regrouper par mois
        current_year = datetime.now().year
        
        for doc in self.model.documents:
            date_str = doc.get("date", "")
            if date_str and len(date_str) >= 7:  # Format YYYY-MM
                year = date_str[:4]  # Prend "YYYY"
                year_month = date_str[:7]  # Prend "YYYY-MM"
                month = date_str[5:7]
                
                # Regrouper par ann√©e
                if year not in years:
                    years[year] = []
                years[year].append(doc)
                
                # Regrouper par mois
                if year_month not in months:
                    months[year_month] = {
                        "docs": [],
                        "year": int(year),
                        "month": month,
                    }
                months[year_month]["docs"].append(doc)
        
        # Noms des mois en fran√ßais
        months_names = {
            "01": "Janvier", "02": "F√©vrier", "03": "Mars",
            "04": "Avril", "05": "Mai", "06": "Juin",
            "07": "Juillet", "08": "Ao√ªt", "09": "Septembre",
            "10": "Octobre", "11": "Novembre", "12": "D√©cembre"
        }
        
        # Trier les ann√©es et les mois par ordre d√©croissant (plus r√©cent d'abord)
        sorted_years = sorted(years.keys(), reverse=True)
        sorted_months = sorted(months.keys(), reverse=True)
        
        if not sorted_months:
            # Aucun document avec date
            self.no_documents_label.configure(
                text="Aucun document avec date disponible."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Cr√©er les cards des mois, group√©es par ann√©e
        row, col = 0, 0
        current_year = None
        
        for year_month in sorted_months:
            month_data = months[year_month]
            year = str(month_data["year"])
            month = month_data["month"]
            docs = month_data["docs"]
            
            # Si on change d'ann√©e, ajouter un s√©parateur
            if year != current_year:
                if col != 0:  # Si on n'est pas au d√©but d'une ligne
                    row += 1
                col = 0
                
                # Ajouter le titre de l'ann√©e
                year_label = ctk.CTkLabel(
                    self.folders_grid,
                    text=f"Ann√©e {year}",
                    font=ctk.CTkFont(size=16, weight="bold")
                )
                year_label.grid(row=row, column=0, columnspan=3, sticky="w", padx=10, pady=(20, 10))
                row += 1
                current_year = year
            
            # Trier les documents du mois du plus r√©cent au plus ancien
            docs.sort(key=lambda x: (x.get('date', ''), x.get('created_at', '')), reverse=True)
            
            # Formater pour l'affichage: "Janvier 2023", "F√©vrier 2023", etc.
            month_name = months_names.get(month, month)
            display_name = f"{month_name} {year}"
            
            self._create_month_folder_card(year_month, display_name, len(docs), row, col)
            col += 1
            if col >= 3:  # 3 cards par ligne
                col = 0
                row += 1
    
    def _create_month_folder_card(self, year_month, display_name, count, row, col):
        """Cr√©e une card pour un dossier de mois - version corrig√©e"""
        # Cadre principal avec taille fixe
        card = ctk.CTkFrame(self.folders_grid)
        card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        card.configure(width=200, height=200)
        card.grid_propagate(False)
        
        # Conteneur interne pour centrer le contenu
        content_frame = ctk.CTkFrame(card, fg_color="transparent")
        content_frame.pack(expand=True, fill="both", padx=10, pady=10)
        
        # Ic√¥ne du mois
        icon_label = ctk.CTkLabel(
            content_frame,
            text="üìÖ",
            font=ctk.CTkFont(size=48)
        )
        icon_label.pack(pady=(20, 10))
        
        # Nom du mois
        name_label = ctk.CTkLabel(
            content_frame,
            text=display_name,
            font=ctk.CTkFont(size=16, weight="bold")
        )
        name_label.pack(pady=(0, 10))
        
        # Nombre de documents
        count_label = ctk.CTkLabel(
            content_frame,
            text=f"{count} document{'s' if count > 1 else ''}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        count_label.pack(pady=(0, 20))
        
        # Configurer les gestionnaires d'√©v√©nements
        def handle_click(event, ym=year_month):
            self.show_documents_by_month(ym, display_name)
        
        def handle_enter(event):
            card.configure(border_width=2)
            event.widget.configure(cursor="hand2")
        
        def handle_leave(event):
            card.configure(border_width=0)
            event.widget.configure(cursor="")
        
        # Lier les √©v√©nements au cadre et √† tous les widgets √† l'int√©rieur
        for widget in [card, content_frame, icon_label, name_label, count_label]:
            widget.bind("<Button-1>", handle_click)
            widget.bind("<Enter>", handle_enter)
            widget.bind("<Leave>", handle_leave)
        
        return card
    
    def show_documents_by_month(self, year_month, display_name):
        """Affiche les documents pour un mois sp√©cifique"""
        # R√©initialiser la s√©lection des documents
        self.selected_documents = []
        self.update_selection_ui()
        
        # Ajouter un log pour aider au d√©bogage
        logger.info(f"Affichage des documents pour le mois: {display_name} ({year_month})")
        
        # Mettre √† jour le chemin dans l'interface
        folder_name = self.document_folders.get(self.selected_folder, "Documents")
        self.folder_title_label.configure(
            text=f"üìÖ {folder_name} > {display_name}"
        )
        
        # D√©finir le mois comme sous-dossier courant
        self.current_subfolder = year_month
        
        # Filtrer les documents pour ce mois
        filtered_docs = []
        for doc in self.model.documents:
            doc_date = doc.get("date", "")
            if doc_date and doc_date.startswith(year_month):  # year_month est au format "YYYY-MM"
                filtered_docs.append(doc)
        
        # Ajouter un log de d√©bogage
        logger.info(f"Nombre de documents trouv√©s pour le mois {display_name}: {len(filtered_docs)}")
        
        # Afficher les documents
        self._display_documents(filtered_docs)
        
        # Afficher les contr√¥les de pagination si n√©cessaire
        if len(filtered_docs) > self.page_size:
            self.pagination_frame.pack(fill=ctk.X, pady=5)
            self._update_pagination_controls(len(filtered_docs))
        else:
            self.pagination_frame.pack_forget()
    
    def _show_type_folders(self):
        """Affiche les dossiers organis√©s par type de document"""
        # Nettoyer la vue
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
            
        # Analyser les documents par type
        types = {}
        for doc in self.model.documents:
            # Extraire le type
            doc_type = doc.get("type", "").lower()
            if not doc_type:
                doc_type = "autre"
            
            # Initialiser la liste si n√©cessaire
            if doc_type not in types:
                types[doc_type] = []
            
            # Ajouter le document √† la liste
            types[doc_type].append(doc)
        
        if not types:
            # Aucun document avec type
            self.no_documents_label.configure(
                text="Aucun document class√© par type disponible."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Cr√©er les cards des types
        row, col = 0, 0
        for doc_type, docs in sorted(types.items()):
            self._create_type_folder_card(doc_type, len(docs), row, col)
            col += 1
            if col >= 3:  # 3 cards par ligne
                col = 0
                row += 1
    
    def _create_type_folder_card(self, doc_type, count, row, col):
        """Cr√©e une card pour un dossier de type - version corrig√©e"""
        # Cadre principal avec taille fixe
        card = ctk.CTkFrame(self.folders_grid)
        card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        card.configure(width=200, height=200)
        card.grid_propagate(False)  # CRUCIAL: emp√™che le redimensionnement
        
        # Conteneur interne pour centrer le contenu
        content_frame = ctk.CTkFrame(card, fg_color="transparent")
        content_frame.pack(expand=True, fill="both", padx=10, pady=10)
        
        # Ic√¥ne du type
        type_icons = {
            "contrat": "üìù",
            "facture": "üí∞",
            "proposition": "üìä",
            "rapport": "üìà",
            "lettre": "‚úâÔ∏è",
            "courrier": "‚úâÔ∏è",
            "attestation": "üîñ",
            "autre": "üìÑ"
        }
        
        icon = type_icons.get(doc_type, "üìÑ")
        
        icon_label = ctk.CTkLabel(
            content_frame,
            text=icon,
            font=ctk.CTkFont(size=48)
        )
        icon_label.pack(pady=(20, 10))
        
        # Nom du type
        name_label = ctk.CTkLabel(
            content_frame,
            text=doc_type.capitalize(),
            font=ctk.CTkFont(size=16, weight="bold")
        )
        name_label.pack(pady=(0, 10))
        
        # Nombre de documents
        count_label = ctk.CTkLabel(
            content_frame,
            text=f"{count} document{'s' if count > 1 else ''}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        count_label.pack(pady=(0, 20))
        
        # Configurer les gestionnaires d'√©v√©nements
        def handle_click(event, type_name=doc_type):
            # Ajouter un log pour aider au d√©bogage
            logger.info(f"Clic sur le dossier de type: '{type_name}'")
            self.show_documents_by_type(type_name)
        
        def handle_enter(event):
            card.configure(border_width=2)
            event.widget.configure(cursor="hand2")
        
        def handle_leave(event):
            card.configure(border_width=0)
            event.widget.configure(cursor="")
        
        # Lier les √©v√©nements au cadre et √† tous les widgets √† l'int√©rieur
        for widget in [card, content_frame, icon_label, name_label, count_label]:
            widget.bind("<Button-1>", handle_click)
            widget.bind("<Enter>", handle_enter)
            widget.bind("<Leave>", handle_leave)
        
        return card
    
    def show_documents_by_type(self, doc_type):
        """Affiche les documents pour un type sp√©cifique"""
        # R√©initialiser la s√©lection des documents
        self.selected_documents = []
        self.update_selection_ui()
        
        # Ajouter un log pour aider au d√©bogage
        logger.info(f"Affichage des documents de type: '{doc_type}'")
        
        # Mettre √† jour le chemin dans l'interface
        folder_name = self.document_folders.get(self.selected_folder, "Documents")
        type_display = doc_type.capitalize() if doc_type else "Sans type"
        self.folder_title_label.configure(
            text=f"üìë {folder_name} > {type_display}"
        )
        
        # D√©finir le type comme sous-dossier courant
        self.current_subfolder = doc_type
        
        # Filtrer les documents pour ce type
        filtered_docs = []
        for doc in self.model.documents:
            current_type = doc.get("type", "").lower()
            if current_type == doc_type.lower():
                filtered_docs.append(doc)
        
        # Ajouter un log de d√©bogage
        logger.info(f"Nombre de documents trouv√©s pour le type '{doc_type}': {len(filtered_docs)}")
        
        # Afficher les documents
        self._display_documents(filtered_docs)
        
        # Afficher les contr√¥les de pagination si n√©cessaire
        if len(filtered_docs) > self.page_size:
            self.pagination_frame.pack(fill=ctk.X, pady=5)
            self._update_pagination_controls(len(filtered_docs))
        else:
            self.pagination_frame.pack_forget()
    
    def _show_client_folders(self):
        """Affiche les dossiers organis√©s par client"""
        # Nettoyer la vue
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
            
        # R√©cup√©rer les IDs des clients valides
        valid_client_ids = []
        if isinstance(self.model.clients, list):
            valid_client_ids = [c.get("id") for c in self.model.clients if c.get("id")]
        elif isinstance(self.model.clients, dict):
            valid_client_ids = list(self.model.clients.keys())
        
        # Initialiser le dictionnaire des clients avec les clients valides uniquement
        clients = {}
        for client_id in valid_client_ids:
            client_name = self._get_client_name_cached(client_id)
            if client_name != "Client inconnu":  # Ne pas inclure les clients inconnus
                clients[client_id] = {
                    "docs": [],
                    "name": client_name
                }
        
        # Ajouter les documents aux clients valides uniquement
        for doc in self.model.documents:
            client_id = doc.get("client_id")
            if client_id in clients:  # N'ajouter que si le client est valide
                clients[client_id]["docs"].append(doc)
        
        # Si aucun client valide
        if not clients:
            self.no_documents_label.configure(
                text="Aucun client disponible."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Trier les clients par nom
        sorted_clients = sorted(
            [(cid, info["name"], info["docs"]) for cid, info in clients.items()],
            key=lambda x: x[1].lower()  # Tri insensible √† la casse
        )
        
        # Cr√©er les cards des clients
        row, col = 0, 0
        for client_id, client_name, docs in sorted_clients:
            self._create_client_folder_card(client_id, client_name, len(docs), row, col)
            col += 1
            if col >= 3:  # 3 cards par ligne
                col = 0
                row += 1
    
    def _create_client_folder_card(self, client_id, client_name, count, row, col):
        """Cr√©e une card pour un dossier client - version corrig√©e"""
        # Cr√©er le cadre principal avec une taille fixe
        card = ctk.CTkFrame(
            self.folders_grid,
            width=200,  # Largeur fixe
            height=200,  # Hauteur fixe
            corner_radius=10,
            border_width=0,
            fg_color=("gray95", "gray15")  # Couleur de fond adaptative
        )
        card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        card.grid_propagate(False)  # Emp√™cher le redimensionnement automatique
        
        # Cr√©er un cadre pour le contenu
        content_frame = ctk.CTkFrame(
            card,
            fg_color="transparent",
            width=180,  # Largeur fixe
            height=180  # Hauteur fixe
        )
        content_frame.pack(expand=True, fill="both", padx=10, pady=10)
        content_frame.pack_propagate(False)  # Emp√™cher le redimensionnement automatique
        
        # Ajouter l'ic√¥ne
        icon_label = ctk.CTkLabel(
            content_frame,
            text="üë•",
            font=ctk.CTkFont(size=48)
        )
        icon_label.pack(pady=(20, 10))
        
        # Ajouter le nom du client
        name_label = ctk.CTkLabel(
            content_frame,
            text=client_name,
            font=ctk.CTkFont(size=16, weight="bold"),
            wraplength=160
        )
        name_label.pack(pady=(0, 10))
        
        # Ajouter le compteur
        count_label = ctk.CTkLabel(
            content_frame,
            text=f"{count} document{'s' if count != 1 else ''}",
            font=ctk.CTkFont(size=12),
            text_color=("gray50", "gray70")
        )
        count_label.pack(pady=(0, 20))
        
        # Gestionnaires d'√©v√©nements
        def handle_click(event, cid=client_id, cname=client_name):
            # Ajouter un log pour aider au d√©bogage
            logger.info(f"Clic sur le dossier client: '{cname}' (ID: {cid})")
            self.show_documents_by_client(cid, cname)
        
        def handle_enter(event):
            card.configure(border_width=2, border_color=("gray70", "gray30"))
            event.widget.configure(cursor="hand2")
        
        def handle_leave(event):
            card.configure(border_width=0)
            event.widget.configure(cursor="")
        
        # Lier les √©v√©nements au cadre et √† tous les widgets √† l'int√©rieur
        for widget in [card, content_frame, icon_label, name_label, count_label]:
            widget.bind("<Button-1>", handle_click)
            widget.bind("<Enter>", handle_enter)
            widget.bind("<Leave>", handle_leave)
        
        return card
    
    def show_documents_by_client(self, client_id, client_name):
        """Affiche les documents pour un client sp√©cifique"""
        # R√©initialiser la s√©lection des documents
        self.selected_documents = []
        self.update_selection_ui()
        
        # Ajouter un log pour aider au d√©bogage
        logger.info(f"Affichage des documents pour le client: '{client_name}' ({client_id})")
        
        # Mettre √† jour le chemin dans l'interface
        folder_name = self.document_folders.get(self.selected_folder, "Documents")
        self.folder_title_label.configure(
            text=f"üë§ {folder_name} > {client_name}"
        )
        
        # D√©finir le client comme sous-dossier courant
        self.current_subfolder = client_id
        
        # Filtrer les documents pour ce client
        filtered_docs = []
        for doc in self.model.documents:
            if doc.get("client_id") == client_id:
                filtered_docs.append(doc)
        
        # Ajouter un log de d√©bogage
        logger.info(f"Nombre de documents trouv√©s pour le client '{client_name}': {len(filtered_docs)}")
        
        # Afficher les documents
        self._display_documents(filtered_docs)
        
        # Afficher les contr√¥les de pagination si n√©cessaire
        if len(filtered_docs) > self.page_size:
            self.pagination_frame.pack(fill=ctk.X, pady=5)
            self._update_pagination_controls(len(filtered_docs))
        else:
            self.pagination_frame.pack_forget()
    
    def _show_custom_folders(self):
        """Affiche les dossiers personnalis√©s"""
        # Nettoyer la vue
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
            
        # R√©cup√©rer les dossiers personnalis√©s
        custom_folders = self.model.get_custom_folders()
        
        if not custom_folders:
            # Aucun dossier personnalis√©
            self.no_documents_label.configure(
                text="Aucun dossier personnalis√© disponible."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Cr√©er les cards des dossiers personnalis√©s
        row, col = 0, 0
        for folder_id, folder_data in sorted(custom_folders.items(), key=lambda x: x[1]["name"].lower()):
            self._create_custom_folder_card(
                folder_id,
                folder_data["name"],
                len(folder_data.get("documents", [])),
                row,
                col
            )
            col += 1
            if col >= 2:  # 2 cards par ligne
                col = 0
                row += 1
    
    def _create_custom_folder_card(self, folder_id, folder_name, count, row, col):
        """Cr√©e une card pour un dossier personnalis√© - version corrig√©e"""
        # Cadre principal avec taille fixe
        card = ctk.CTkFrame(self.folders_grid)
        card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        card.configure(width=200, height=200)
        card.grid_propagate(False)
        
        # Conteneur interne pour centrer le contenu
        content_frame = ctk.CTkFrame(card, fg_color="transparent")
        content_frame.pack(expand=True, fill="both", padx=10, pady=10)
        
        # Ic√¥ne du dossier personnalis√©
        icon_label = ctk.CTkLabel(
            content_frame,
            text="üìÅ",
            font=ctk.CTkFont(size=48)
        )
        icon_label.pack(pady=(20, 10))
        
        # Nom du dossier
        name_label = ctk.CTkLabel(
            content_frame,
            text=folder_name,
            font=ctk.CTkFont(size=16, weight="bold"),
            wraplength=200
        )
        name_label.pack(pady=(0, 10))
        
        # Nombre de documents
        count_label = ctk.CTkLabel(
            content_frame,
            text=f"{count} document{'s' if count > 1 else ''}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        count_label.pack(pady=(0, 20))
        
        # Configurer les gestionnaires d'√©v√©nements
        def handle_click(event, fid=folder_id, fname=folder_name):
            # Ajouter un log pour aider au d√©bogage
            logger.info(f"Clic sur le dossier personnalis√©: '{fname}' (ID: {fid})")
            self.show_documents_by_custom_folder(fid, fname)
        
        def handle_enter(event):
            card.configure(border_width=2)
            event.widget.configure(cursor="hand2")
        
        def handle_leave(event):
            card.configure(border_width=0)
            event.widget.configure(cursor="")
        
        # Lier les √©v√©nements au cadre et √† tous les widgets √† l'int√©rieur
        for widget in [card, content_frame, icon_label, name_label, count_label]:
            widget.bind("<Button-1>", handle_click)
            widget.bind("<Enter>", handle_enter)
            widget.bind("<Leave>", handle_leave)
        
        return card
    
    def create_custom_folder(self):
        """Cr√©e un nouveau dossier personnalis√©"""
        from utils.dialog_utils import DialogUtils
        
        # Afficher une bo√Æte de dialogue pour saisir le nom du dossier
        folder_dialog = ctk.CTkInputDialog(
            title="Nouveau dossier",
            text="Entrez le nom du nouveau dossier :"
        )
        folder_name = folder_dialog.get_input()
        
        if folder_name:
            # Ajouter le dossier dans le mod√®le
            success = self.model.add_custom_folder(folder_name) if hasattr(self.model, 'add_custom_folder') else False
            
            if success:
                # Afficher un message de confirmation
                DialogUtils.show_toast(self.parent, f"Dossier '{folder_name}' cr√©√© avec succ√®s", "success")
                # Rafra√Æchir la vue
                self._show_custom_folders()
            else:
                DialogUtils.show_message(self.parent, "Erreur", "Impossible de cr√©er le dossier", "error")
    
    def rename_custom_folder(self, folder_id, current_name):
        """Renomme un dossier personnalis√©"""
        from utils.dialog_utils import DialogUtils
        
        # Afficher une bo√Æte de dialogue pour saisir le nouveau nom
        folder_dialog = ctk.CTkInputDialog(
            title="Renommer le dossier",
            text="Entrez le nouveau nom du dossier :"
        )
        folder_dialog.set_text(current_name)
        new_name = folder_dialog.get_input()
        
        if new_name and new_name != current_name:
            # Renommer le dossier dans le mod√®le
            success = self.model.rename_custom_folder(folder_id, new_name) if hasattr(self.model, 'rename_custom_folder') else False
            
            if success:
                # Afficher un message de confirmation
                DialogUtils.show_toast(self.parent, f"Dossier renomm√© avec succ√®s", "success")
                # Rafra√Æchir la vue
                self._show_custom_folders()
            else:
                DialogUtils.show_message(self.parent, "Erreur", "Impossible de renommer le dossier", "error")
    
    def delete_custom_folder(self, folder_id):
        """Supprime un dossier personnalis√©"""
        from utils.dialog_utils import DialogUtils
        
        # Demander confirmation
        confirm = DialogUtils.show_confirmation(
            self.parent,
            "Confirmer la suppression",
            "√ätes-vous s√ªr de vouloir supprimer ce dossier ?\nLes documents qu'il contient ne seront pas supprim√©s.",
            lambda: self._confirm_delete_folder(folder_id)
        )
    
    def _confirm_delete_folder(self, folder_id):
        """Confirme la suppression d'un dossier personnalis√©"""
        from utils.dialog_utils import DialogUtils
        
        # Supprimer le dossier dans le mod√®le
        success = self.model.delete_custom_folder(folder_id) if hasattr(self.model, 'delete_custom_folder') else False
        
        if success:
            # Afficher un message de confirmation
            DialogUtils.show_toast(self.parent, "Dossier supprim√© avec succ√®s", "success")
            # Rafra√Æchir la vue
            self._show_custom_folders()
        else:
            DialogUtils.show_message(self.parent, "Erreur", "Impossible de supprimer le dossier", "error")
    
    def show_documents_by_custom_folder(self, folder_id, folder_name):
        """Affiche les documents d'un dossier personnalis√©"""
        # R√©initialiser la s√©lection des documents
        self.selected_documents = []
        self.update_selection_ui()
        
        # Mettre √† jour le chemin
        folder_cat = self.document_folders.get(self.selected_folder, "Documents")
        self.folder_title_label.configure(
            text=f"üìÅ {folder_cat} > {folder_name}"
        )
        
        # D√©finir le dossier personnalis√© comme sous-dossier courant
        self.current_subfolder = folder_id
        
        # R√©cup√©rer les documents du dossier
        documents = self.model.get_documents_by_custom_folder(folder_id) if hasattr(self.model, 'get_documents_by_custom_folder') else []
        
        # Afficher les documents
        self._display_documents(documents)
        
        # Afficher les contr√¥les de pagination si n√©cessaire
        if len(documents) > self.page_size:
            self.pagination_frame.pack(fill=ctk.X, pady=5)
            self._update_pagination_controls(len(documents))
        else:
            self.pagination_frame.pack_forget()
    
    def _display_documents(self, documents):
        """Affiche les documents dans la grille - version corrig√©e"""
        # Ajouter des logs pour le d√©bogage
        print(f"Tentative d'affichage de {len(documents)} documents")
        
        # Masquer la grille des dossiers
        self.folders_grid.pack_forget()
        
        # R√©initialiser la page
        self.current_page = 0
        
        # Afficher les filtres sp√©cifiques pour cette vue
        self.filter_frame.pack(side=ctk.RIGHT, padx=10, before=self.search_frame)
        
        # Si aucun document
        if not documents:
            print("Aucun document trouv√© - affichage du message")
            self.documents_grid.pack_forget()
            self.no_documents_label.configure(
                text="Aucun document disponible dans ce dossier."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Masquer le message "Aucun document"
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des documents
        self.documents_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.documents_grid.winfo_children():
            widget.destroy()
        
        # Trier les documents par date et heure de cr√©ation (du plus r√©cent au plus ancien)
        sorted_documents = sorted(
            documents,
            key=lambda x: (x.get('date', ''), x.get('created_at', '')),
            reverse=True  # True pour trier du plus r√©cent au plus ancien
        )
        
        # Calculer la pagination
        total_docs = len(sorted_documents)
        self.total_documents = total_docs
        
        start_idx = self.current_page * self.page_size
        end_idx = min(start_idx + self.page_size, total_docs)
        
        paginated_docs = sorted_documents[start_idx:end_idx]
        print(f"Affichage des documents {start_idx+1} √† {end_idx} sur {total_docs}")
        
        # Mettre en cache les documents pour cette vue
        key = f"folder_{self.selected_folder}_{self.current_subfolder}"
        self.documents_cache[key] = sorted_documents
        
        # Remplir la grille avec les documents pagin√©s (m√©thode corrig√©e)
        self._populate_documents_grid(paginated_docs)
        
        # Afficher les contr√¥les de pagination si n√©cessaire
        if total_docs > self.page_size:
            self.pagination_frame.pack(fill=ctk.X, pady=5)
            self._update_pagination_controls(total_docs)
        else:
            self.pagination_frame.pack_forget()
    
    def _populate_documents_grid(self, documents):
        """Remplit la grille avec les documents - version corrig√©e"""
        if not documents:
            print("Aucun document √† afficher")
            return
        
        print(f"Remplissage de la grille avec {len(documents)} documents")
        row, col = 0, 0
        for doc in documents:
            try:
                card = self.create_document_card(doc, row, col)
                card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
                
                col += 1
                if col >= 2:  # 2 cartes par ligne
                    col = 0
                    row += 1
            except Exception as e:
                print(f"Erreur lors de la cr√©ation de la carte pour le document {doc.get('id')}: {e}")
    
    def create_document_card(self, document, row, col):
        """
        Cr√©e une carte pour afficher un document avec dimensions fixes
        """
        # Cadre de la carte avec dimensions fixes
        card = ctk.CTkFrame(self.documents_grid)
        card.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")
        card.configure(width=240, height=320)  # Dimensions fixes
        card.grid_propagate(False)  # CRUCIAL: emp√™che le redimensionnement
        
        # Attacher le document √† la carte pour pouvoir le retrouver plus tard
        card.document = document
        
        # Conteneur interne pour centrer le contenu
        content_frame = ctk.CTkFrame(card, fg_color="transparent")
        content_frame.pack(expand=True, fill="both", padx=10, pady=10)
        
        # Case √† cocher de s√©lection
        var = ctk.BooleanVar(value=False)
        checkbox = ctk.CTkCheckBox(
            content_frame, 
            text="", 
            variable=var,
            width=16,
            height=16,
            checkbox_width=16,
            checkbox_height=16,
            corner_radius=3,
            command=lambda: self.toggle_document_selection(document, var)
        )
        checkbox.pack(anchor="nw")
        
        # Type de document avec ic√¥ne
        doc_type = document.get("type", "").lower()
        icon = "üìÑ"  # Par d√©faut
        
        if "contrat" in doc_type:
            icon = "üìù"
        elif "facture" in doc_type:
            icon = "üí∞"
        elif "proposition" in doc_type:
            icon = "üìä"
        elif "rapport" in doc_type:
            icon = "üìà"
        elif "lettre" in doc_type or "courrier" in doc_type:
            icon = "‚úâÔ∏è"
        elif "attestation" in doc_type:
            icon = "üîñ"
        
        type_label = ctk.CTkLabel(
            content_frame,
            text=f"{icon} {doc_type.capitalize() if doc_type else 'Document'}",
            font=ctk.CTkFont(size=13, weight="bold")
        )
        type_label.pack(fill=ctk.X, padx=10, pady=(30, 5))
        
        # Titre du document
        title = document.get("title", "Sans titre")
        if len(title) > 50:  # Limiter la longueur pour l'affichage
            title = title[:47] + "..."
        
        title_label = ctk.CTkLabel(
            content_frame,
            text=title,
            font=ctk.CTkFont(size=14, weight="bold"),
            wraplength=220
        )
        title_label.pack(fill=ctk.X, padx=10, pady=5)
        
        # Ic√¥ne de pr√©visualisation (≈ìil) en haut √† droite
        preview_label = ctk.CTkLabel(
            content_frame,
            text="üëÅÔ∏è",
            font=ctk.CTkFont(size=16),
            cursor="hand2"  # Curseur main pour indiquer que c'est cliquable
        )
        preview_label.place(x=content_frame.winfo_width() - 40, y=10)
        
        # Rendre l'ic√¥ne cliquable
        def on_preview_click(event):
            self.preview_document(document.get("id"))
        
        preview_label.bind("<Button-1>", on_preview_click)
        preview_label.bind("<Enter>", lambda e: preview_label.configure(text_color=("gray50", "gray70")))
        preview_label.bind("<Leave>", lambda e: preview_label.configure(text_color=("black", "white")))
        
        # Date
        date_label = ctk.CTkLabel(
            content_frame,
            text=f"Date: {document.get('date', 'Non sp√©cifi√©e')}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        date_label.pack(fill=ctk.X, padx=10, pady=2)
        
        # Client
        client_label = ctk.CTkLabel(
            content_frame,
            text=f"Client: {self._get_client_name_cached(document.get('client_id', ''))}",
            font=ctk.CTkFont(size=12),
            text_color="gray"
        )
        client_label.pack(fill=ctk.X, padx=10, pady=2)
        
        # Description (si pr√©sente)
        description = document.get("description", "")
        if description:
            if len(description) > 80:
                description = description[:77] + "..."
            
            desc_label = ctk.CTkLabel(
                content_frame,
                text=f"Description: {description}",
                font=ctk.CTkFont(size=12),
                text_color="gray",
                wraplength=220,
                justify="left"
            )
            desc_label.pack(fill=ctk.X, padx=10, pady=2)
        
        # Boutons d'action
        actions_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        actions_frame.pack(fill=ctk.X, padx=10, pady=10, side=ctk.BOTTOM)
        
        # Bouton Ouvrir avec pr√©visualisation
        open_btn = ctk.CTkButton(
            actions_frame,
            text="Ouvrir",
            width=80,
            height=25,
            command=lambda doc_id=document.get("id"): self.preview_document(doc_id)
        )
        open_btn.pack(side=ctk.LEFT, padx=5)
        
        # Bouton T√©l√©charger
        download_btn = ctk.CTkButton(
            actions_frame,
            text="T√©l√©charger",
            width=100,
            height=25,
            command=lambda doc_id=document.get("id"): self.download_document(doc_id)
        )
        download_btn.pack(side=ctk.RIGHT, padx=5)
        
        # Bouton Signer (uniquement pour les PDF)
        if document.get("type", "").lower().endswith(".pdf"):
            sign_btn = ctk.CTkButton(
                actions_frame,
                text="Signer",
                width=80,
                height=25,
                command=lambda doc_id=document.get("id"): self.sign_document(doc_id)
            )
            sign_btn.pack(side=ctk.RIGHT, padx=5)
        
        return card
    
    def _get_client_name_cached(self, client_id):
        """R√©cup√®re le nom du client avec gestion d'erreurs am√©lior√©e - Version corrig√©e"""
        if not client_id:
            logger.debug("ID client vide")
            return "Client inconnu"
        
        # V√©rifier si le cache existe et le r√©initialiser si n√©cessaire
        if not hasattr(self, 'client_names_cache') or self.client_names_cache is None:
            logger.warning("Cache clients non initialis√©, initialisation...")
            self.client_names_cache = {}
        
        # V√©rifier si l'ID est dans le cache
        if client_id in self.client_names_cache:
            # V√©rifier si le client existe toujours dans le mod√®le
            client_still_exists = False
            if isinstance(self.model.clients, list):
                client_still_exists = any(c.get('id') == client_id for c in self.model.clients)
            elif isinstance(self.model.clients, dict):
                client_still_exists = client_id in self.model.clients
            
            # Si le client n'existe plus, supprimer du cache
            if not client_still_exists:
                logger.warning(f"Client {client_id} supprim√© du cache car n'existe plus dans la base")
                del self.client_names_cache[client_id]
            else:
                return self.client_names_cache[client_id]
        
        # Tentative de r√©cup√©ration directe
        try:
            if hasattr(self.model, 'clients'):
                if isinstance(self.model.clients, list):
                    for client in self.model.clients:
                        if client.get("id") == client_id:
                            name = client.get("name", "Client inconnu")
                            # Mettre √† jour le cache
                            self.client_names_cache[client_id] = name
                            logger.debug(f"Client trouv√© et ajout√© au cache: {client_id} -> {name}")
                            return name
                
                elif isinstance(self.model.clients, dict):
                    if client_id in self.model.clients:
                        client = self.model.clients[client_id]
                        if isinstance(client, dict):
                            name = client.get("name", "Client inconnu")
                            # Mettre √† jour le cache
                            self.client_names_cache[client_id] = name
                            logger.debug(f"Client trouv√© et ajout√© au cache: {client_id} -> {name}")
                            return name
        
        except Exception as e:
            logger.error(f"Erreur lors de la recherche directe du client {client_id}: {e}")
        
        logger.warning(f"Client ID {client_id} introuvable")
        return "Client inconnu"
    
    def toggle_document_selection(self, document, var):
        """
        G√®re la s√©lection des documents pour suppression
        """
        if var.get():
            if document not in self.selected_documents:
                self.selected_documents.append(document)
        else:
            if document in self.selected_documents:
                self.selected_documents.remove(document)
        
        # Mettre √† jour l'interface en fonction du nombre de s√©lections
        self.update_selection_ui()
    
    def update_selection_ui(self):
        """
        Met √† jour l'interface utilisateur selon l'√©tat de s√©lection
        """
        count = len(self.selected_documents)
        
        if count > 0:
            # Afficher un badge flottant
            self.show_selection_badge(count)
        else:
            # Masquer le badge
            if hasattr(self, 'selection_badge') and self.selection_badge:
                self.selection_badge.pack_forget()
                delattr(self, 'selection_badge')
    
    def show_selection_badge(self, count):
        """
        Affiche un badge avec le nombre d'√©l√©ments s√©lectionn√©s
        """
        if hasattr(self, 'selection_badge'):
            self.selection_badge.pack_forget()
        
        self.selection_badge = ctk.CTkLabel(
            self.toolbar,
            text=f"{count} s√©lectionn√©{'s' if count > 1 else ''}",
            fg_color="#3498db",
            corner_radius=10,
            width=30,
            height=20,
            font=ctk.CTkFont(size=11, weight="bold"),
            text_color="white"
        )
        self.selection_badge.pack(side=ctk.LEFT, padx=(5, 0))
    
    def delete_selected_documents(self):
        """
        Supprime les documents s√©lectionn√©s
        """
        if not self.selected_documents:
            return
        
        # Nombre de documents √† supprimer
        count = len(self.selected_documents)
        
        # Demander confirmation
        confirm = DialogUtils.show_confirmation(
            self.parent,
            "Confirmer la suppression",
            f"√ätes-vous s√ªr de vouloir supprimer {count} document{'s' if count > 1 else ''} ?\n\nCette action est irr√©versible.",
            lambda: self._confirm_delete_documents()
        )
    
    def _confirm_delete_documents(self):
        """Confirme la suppression des documents s√©lectionn√©s"""
        try:
            # IDs des documents √† supprimer
            ids_to_delete = [doc.get("id") for doc in self.selected_documents]
            
            # 1. Supprimer les fichiers
            for doc in self.selected_documents:
                file_path = doc.get("file_path", "")
                if file_path and os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                    except Exception as e:
                        logger.error(f"Erreur lors de la suppression du fichier {file_path}: {e}")
            
            # 2. Supprimer les documents du mod√®le
            self.model.documents = [d for d in self.model.documents if d.get("id") not in ids_to_delete]
            
            # 3. Sauvegarder les changements
            self.model.save_documents()
            
            # 4. R√©initialiser la s√©lection
            self.selected_documents = []
            self.update_selection_ui()
            
            # 5. Mettre √† jour la vue (revenir √† la vue des dossiers si tous les documents sont supprim√©s)
            if self.selected_folder:
                # V√©rifier combien de documents restent dans ce dossier/sous-dossier
                remaining_docs = self._get_filtered_documents()
                
                if not remaining_docs:
                    # Si plus aucun document, remonter d'un niveau
                    if self.current_subfolder:
                        # Revenir au niveau du dossier
                        self.show_folder_documents(self.selected_folder)
                    else:
                        # Revenir √† la vue des dossiers
                        self.show_folders_view()
                else:
                    # Mettre √† jour la vue actuelle
                    self._display_documents(remaining_docs)
            else:
                # Dans la vue principale des dossiers, simplement mettre √† jour
                self.show_folders_view()
            
            # 6. Afficher une notification de succ√®s
            DialogUtils.show_toast(self.parent, f"{len(ids_to_delete)} document{'s' if len(ids_to_delete) > 1 else ''} supprim√©{'s' if len(ids_to_delete) > 1 else ''} avec succ√®s", "success")
            
        except Exception as e:
            logger.error(f"Erreur lors de la suppression des documents: {e}")
            DialogUtils.show_message(self.parent, "Erreur", f"Une erreur est survenue lors de la suppression: {str(e)}", "error")
    
    def _get_filtered_documents(self):
        """R√©cup√®re les documents filtr√©s en fonction du dossier et sous-dossier actuel"""
        logger.info(f"Filtrage par dossier: {self.selected_folder}, sous-dossier: {self.current_subfolder}")
        
        documents = self.model.documents
        
        # Si aucun dossier n'est s√©lectionn√©, retourner tous les documents
        if self.selected_folder is None:
            logger.info("Aucun dossier s√©lectionn√©, retour de tous les documents")
            return documents
        
        # Filtrer par dossier
        if self.selected_folder == "date" and self.current_subfolder:
            # Par date (ann√©e ou ann√©e-mois)
            filtered_docs = []
            for doc in documents:
                doc_date = doc.get("date", "")
                if doc_date:
                    # Si le sous-dossier est une ann√©e (ex: "2024")
                    if len(self.current_subfolder) == 4:
                        if doc_date.startswith(self.current_subfolder):
                            filtered_docs.append(doc)
                    # Si le sous-dossier est une ann√©e-mois (ex: "2024-03")
                    elif len(self.current_subfolder) == 7:
                        if doc_date.startswith(self.current_subfolder):
                            filtered_docs.append(doc)
            logger.info(f"Filtr√© par date '{self.current_subfolder}': {len(filtered_docs)} documents")
            return filtered_docs
        
        elif self.selected_folder == "type" and self.current_subfolder:
            # Par type
            filtered_docs = [doc for doc in documents if doc.get("type", "").lower() == self.current_subfolder.lower()]
            logger.info(f"Filtr√© par type '{self.current_subfolder}': {len(filtered_docs)} documents")
            return filtered_docs
        
        elif self.selected_folder == "client" and self.current_subfolder:
            # Par client
            filtered_docs = [doc for doc in documents if doc.get("client_id") == self.current_subfolder]
            logger.info(f"Filtr√© par client '{self.current_subfolder}': {len(filtered_docs)} documents")
            return filtered_docs
        
        # Si aucun sous-dossier n'est s√©lectionn√©, retourner tous les documents
        logger.info("Aucun sous-dossier s√©lectionn√©, retour de tous les documents")
        return documents
    
    def _update_pagination_controls(self, total_docs=None):
        """Met √† jour les contr√¥les de pagination - version corrig√©e"""
        if total_docs is not None:
            self.total_documents = total_docs
        
        # Calculer le nombre total de pages
        total_pages = max(1, (self.total_documents + self.page_size - 1) // self.page_size)
        current_page = self.current_page + 1  # Convertir en num√©rotation 1-based pour l'affichage
        
        # Mettre √† jour le texte de pagination
        self.pagination_label.configure(text=f"Page {current_page}/{total_pages}")
        
        # Activer/d√©sactiver les boutons selon la position
        self.prev_page_button.configure(
            state="normal" if self.current_page > 0 else "disabled",
            fg_color="#3498db" if self.current_page > 0 else "#7f8c8d",
            hover_color="#2980b9" if self.current_page > 0 else "#7f8c8d"
        )
        
        self.next_page_button.configure(
            state="normal" if self.current_page < total_pages - 1 else "disabled",
            fg_color="#3498db" if self.current_page < total_pages - 1 else "#7f8c8d",
            hover_color="#2980b9" if self.current_page < total_pages - 1 else "#7f8c8d"
        )
    
    def _previous_page(self):
        """Passe √† la page pr√©c√©dente - version corrig√©e"""
        if self.current_page > 0:
            self.current_page -= 1
            # Ajouter un log pour aider au d√©bogage
            logger.info(f"Navigation vers la page pr√©c√©dente: {self.current_page}")
            self._refresh_current_view()
    
    def _next_page(self):
        """Passe √† la page suivante - version corrig√©e"""
        # Calculer le nombre total de pages
        total_documents = len(self.model.documents)
        total_pages = (total_documents + self.page_size - 1) // self.page_size
        
        if self.current_page < total_pages - 1:
            self.current_page += 1
            # Ajouter un log pour aider au d√©bogage
            logger.info(f"Navigation vers la page suivante: {self.current_page}")
            self._refresh_current_view()
    
    def _refresh_current_view(self):
        """Rafra√Æchit la vue actuelle - version corrig√©e"""
        # Ajouter un log pour aider au d√©bogage
        logger.info(f"Rafra√Æchissement de la vue actuelle (page {self.current_page})")
        
        # D√©terminer la m√©thode √† appeler en fonction du dossier s√©lectionn√©
        if self.selected_folder == "date":
            self._show_date_folders()
        elif self.selected_folder == "type":
            self._show_type_folders()
        elif self.selected_folder == "client":
            self._show_client_folders()
        elif self.selected_folder == "custom":
            self._show_custom_folders()
    
    def load_documents_async(self):
        """Charge les documents de mani√®re asynchrone"""
        if self.is_loading:
            return
        
        self.is_loading = True
        self.show_loading_indicator()
        
        # Utiliser le threading pour le chargement asynchrone
        threading.Thread(target=self._load_documents_thread, daemon=True).start()
    
    def _load_documents_thread(self):
        """Thread de chargement des documents"""
        try:
            # S'assurer que les documents sont charg√©s dans le mod√®le
            self.model.load_documents()
            
            # Si nous sommes dans la vue des dossiers, mettre √† jour cette vue
            if self.selected_folder is None:
                self.parent.after(0, self.show_folders_view)
            else:
                # Sinon, r√©cup√©rer les documents filtr√©s selon le dossier actuel
                documents = self._get_filtered_documents()
                self.parent.after(0, lambda: self._display_documents(documents))
        except Exception as e:
            logger.error(f"Erreur lors du chargement des documents: {e}")
        finally:
            self.is_loading = False
            self.parent.after(0, self.hide_loading_indicator)
    
    def show_loading_indicator(self):
        """Affiche l'indicateur de chargement"""
        self.loading_label.pack(side=ctk.LEFT, padx=10)
    
    def hide_loading_indicator(self):
        """Masque l'indicateur de chargement"""
        self.loading_label.pack_forget()
    
    def debounced_filter_documents(self):
        """Applique les filtres avec un d√©lai pour √©viter les appels trop fr√©quents"""
        logger.info("D√©marrage du filtrage diff√©r√©...")
        
        # Annuler le timer pr√©c√©dent s'il existe
        if hasattr(self, '_filter_timer'):
            self.parent.after_cancel(self._filter_timer)
        
        # Cr√©er un nouveau timer
        self._filter_timer = self.parent.after(self.debounce_delay, self._apply_document_filters)
        logger.info(f"Timer de filtrage programm√© pour {self.debounce_delay}ms")
        
        # Afficher un indicateur visuel que la recherche est en cours
        if hasattr(self, 'search_entry'):
            self.search_entry.configure(placeholder_text="Recherche en cours...")
    
    def _apply_document_filters(self):
        """Applique les filtres aux documents - version corrig√©e"""
        logger.info("D√©but application des filtres")
        
        # M√©moriser l'√©tat de navigation actuel
        current_folder = self.selected_folder
        current_subfolder = self.current_subfolder
        logger.info(f"√âtat de navigation actuel: dossier={current_folder}, sous-dossier={current_subfolder}")
        
        # R√©cup√©rer les crit√®res de filtrage
        search_text = self.search_var.get().lower() if hasattr(self, 'search_var') else ""
        client_filter = self.client_var.get() if hasattr(self, 'client_var') else "Tous les clients"
        type_filter = self.type_var.get() if hasattr(self, 'type_var') else "Tous les types"
        date_filter = self.date_filter_var.get() if hasattr(self, 'date_filter_var') else "Toutes"
        
        logger.info(f"Crit√®res de filtrage: search='{search_text}', client='{client_filter}', type='{type_filter}', date='{date_filter}'")
        
        # R√©cup√©rer les documents de base selon le dossier actuel
        base_documents = self._get_filtered_documents()
        logger.info(f"Nombre de documents de base: {len(base_documents)}")
        
        # Filtre par client
        filtered_docs = base_documents
        if client_filter and client_filter != "Tous les clients":
            # Rechercher le client_id correspondant au nom
            client_id = None
            for cid, name in self.client_names_cache.items():
                if name == client_filter:
                    client_id = cid
                    break
            
            if client_id:
                filtered_docs = [d for d in filtered_docs if d.get("client_id") == client_id]
                logger.info(f"Apr√®s filtre client: {len(filtered_docs)} documents")
        
        # Filtre par type
        if type_filter and type_filter != "Tous les types":
            filtered_docs = [d for d in filtered_docs if d.get("type", "").lower() == type_filter.lower()]
            logger.info(f"Apr√®s filtre type: {len(filtered_docs)} documents")
        
        # Filtre par date
        if date_filter and date_filter != "Toutes":
            today = datetime.now()
            date_filtered_docs = []
            
            for doc in filtered_docs:
                doc_date = doc.get("date", "")
                if not doc_date:
                    continue
                    
                try:
                    doc_date_obj = datetime.strptime(doc_date, "%Y-%m-%d")
                    
                    if date_filter == "Aujourd'hui":
                        if doc_date_obj.date() == today.date():
                            date_filtered_docs.append(doc)
                    elif date_filter == "Cette semaine":
                        week_start = today - timedelta(days=today.weekday())
                        if doc_date_obj.date() >= week_start.date():
                            date_filtered_docs.append(doc)
                    elif date_filter == "Ce mois":
                        month_start = today.replace(day=1)
                        if doc_date_obj.date() >= month_start.date():
                            date_filtered_docs.append(doc)
                    elif date_filter == "Cette ann√©e":
                        year_start = today.replace(month=1, day=1)
                        if doc_date_obj.date() >= year_start.date():
                            date_filtered_docs.append(doc)
                except ValueError:
                    continue
            
            filtered_docs = date_filtered_docs
            logger.info(f"Apr√®s filtre date: {len(filtered_docs)} documents")
        
        # Filtre par recherche
        if search_text:
            search_results = []
            for doc in filtered_docs:
                # Rechercher dans tous les champs pertinents
                searchable_fields = [
                    doc.get("title", "").lower(),
                    doc.get("type", "").lower(),
                    doc.get("description", "").lower(),
                    self._get_client_name_cached(doc.get("client_id", "")).lower(),
                    doc.get("date", "").lower()
                ]
                
                # V√©rifier si le texte de recherche est pr√©sent dans au moins un champ
                if any(search_text in field for field in searchable_fields):
                    search_results.append(doc)
            
            filtered_docs = search_results
            logger.info(f"Apr√®s recherche '{search_text}': {len(filtered_docs)} documents")
        
        # R√©initialiser la pagination
        self.current_page = 0
        
        # Restaurer l'√©tat de navigation si nous ne sommes pas dans une recherche
        if not search_text:
            self.selected_folder = current_folder
            self.current_subfolder = current_subfolder
            logger.info("√âtat de navigation restaur√©")
        else:
            logger.info("Recherche active - navigation conserv√©e")
        
        # Afficher les documents filtr√©s en utilisant la nouvelle m√©thode
        self._display_documents_with_context(filtered_docs)
        logger.info("Filtres appliqu√©s avec succ√®s")
    
    def update_view(self):
        """Met √† jour la vue avec les donn√©es actuelles"""
        # R√©initialiser les documents s√©lectionn√©s
        self.selected_documents = []
        self.update_selection_ui()
        
        # Mettre √† jour les valeurs des ComboBox
        self._update_filter_values()
        
        # Recharger les clients
        self._cache_client_data()
        
        # Afficher l'indicateur de chargement
        self.show_loading_indicator()
        
        # Forcer le rechargement des documents depuis le fichier
        self.model.load_documents()
        
        # Si un dossier est s√©lectionn√©, le recharger
        if self.selected_folder is not None:
            # R√©cup√©rer les documents filtr√©s
            documents = self._get_filtered_documents()
            
            # Mettre √† jour l'affichage
            self._display_documents(documents)
        else:
            # Sinon, afficher la vue des dossiers
            self.show_folders_view()
        
        self.hide_loading_indicator()
    
    def _update_filter_values(self):
        """Met √† jour les valeurs des filtres √† partir des documents"""
        logger.info("Mise √† jour des valeurs des filtres...")
        
        try:
            # R√©cup√©rer tous les documents
            documents = self.model.documents
            
            # R√©cup√©rer les IDs clients valides
            valid_client_ids = []
            if isinstance(self.model.clients, list):
                valid_client_ids = [c.get("id") for c in self.model.clients if c.get("id")]
            elif isinstance(self.model.clients, dict):
                valid_client_ids = list(self.model.clients.keys())
            
            # Mettre √† jour les types disponibles
            types = sorted(set(doc.get("type", "") for doc in documents if doc.get("type")))
            types.insert(0, "Tous les types")
            self.type_var.set("Tous les types")
            
            # Mettre √† jour les clients disponibles - SEULEMENT LES CLIENTS VALIDES
            client_names = ["Tous les clients"]
            for client_id in valid_client_ids:
                client_name = self._get_client_name_cached(client_id)
                if client_name != "Client inconnu":  # Exclure les clients inconnus
                    client_names.append(client_name)
            
            # Mettre √† jour les dates disponibles
            dates = sorted(set(doc.get("date", "") for doc in documents if doc.get("date")))
            date_options = ["Toutes"]
            for date in dates:
                if date:
                    date_options.append(date)
            
            # Mettre √† jour les widgets
            if hasattr(self, 'type_combobox'):
                self.type_combobox.configure(values=types)
            
            if hasattr(self, 'client_combobox'):
                self.client_combobox.configure(values=sorted(client_names))  # Trier les noms de clients
            
            if hasattr(self, 'date_menu'):
                self.date_menu.configure(values=date_options)
            
            logger.info(f"Filtres mis √† jour: {len(types)} types, {len(client_names)} clients, {len(date_options)} dates")
            
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des filtres: {str(e)}")
            logger.error(traceback.format_exc())
    
    def new_document(self):
        """Cr√©e un nouveau document"""
        try:
            # V√©rifier s'il y a des mod√®les disponibles
            if not self.model.templates:
                DialogUtils.show_message(
                    self.parent,
                    "Attention",
                    "Aucun mod√®le disponible. Veuillez d'abord cr√©er un mod√®le.",
                    "warning"
                )
                return
            
            # V√©rifier s'il y a des clients disponibles
            if not self.model.clients:
                DialogUtils.show_message(
                    self.parent,
                    "Attention",
                    "Aucun client disponible. Veuillez d'abord ajouter un client.",
                    "warning"
                )
                return
            
            # Cr√©er une nouvelle instance du formulaire de document
            from views.document_form_view import DocumentFormView
            
            # Pr√©remplir le dossier si nous sommes dans un dossier personnalis√©
            folder_id = None
            if self.selected_folder == "custom" and self.current_subfolder:
                folder_id = self.current_subfolder
            
            # Cr√©er le document avec pr√©-remplissage du dossier et du type si applicable
            document_data = {}
            
            # Pr√©-remplir le type si nous sommes dans un dossier de type
            if self.selected_folder == "type" and self.current_subfolder:
                document_data["type"] = self.current_subfolder
            
            # Pr√©-remplir le client si nous sommes dans un dossier client
            if self.selected_folder == "client" and self.current_subfolder:
                document_data["client_id"] = self.current_subfolder
            
            # Cr√©er le formulaire avec les donn√©es pr√©-remplies
            form = DocumentFormView(
                self.parent,
                self.model,
                document_data=document_data,
                folder_id=folder_id,
                on_save_callback=self.on_document_saved
            )
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation du document: {e}")
            DialogUtils.show_message(
                self.parent,
                "Erreur",
                f"Impossible de cr√©er un nouveau document: {str(e)}",
                "error"
            )
    
    def on_document_saved(self, document_id=None, client_id=None, client_name=None, highlight=False, redirect_to_client=False, **kwargs):
        """
        Callback appel√© apr√®s la sauvegarde d'un document
        
        Args:
            document_id: ID du document sauvegard√©
            client_id: ID du client
            client_name: Nom du client
            highlight: Si True, met en √©vidence le document
            redirect_to_client: Si True, redirige vers le dossier du client
            **kwargs: Arguments suppl√©mentaires ignor√©s
        """
        logger.info(f"Document sauvegard√©: {document_id} pour le client {client_name} (ID: {client_id})")
        
        # Recharger les documents
        self.model.load_documents()
        
        if document_id and redirect_to_client and client_id:
            logger.info(f"Redirection vers le dossier client {client_id}")
            
            # D√©finir le dossier client comme dossier actif
            self.selected_folder = "client"
            
            def after_navigation():
                # D'abord afficher le dossier "Par client"
                self.show_folder_documents("client")
                
                def show_client_docs():
                    # Ensuite afficher les documents du client sp√©cifique
                    self.show_documents_by_client(
                        client_id,
                        client_name or self._get_client_name_cached(client_id)
                    )
                    
                    def do_highlight():
                        # Si on doit mettre en √©vidence le document, le faire apr√®s un d√©lai
                        if highlight:
                            logger.info(f"Mise en √©vidence du document {document_id}")
                            self._highlight_document(document_id)
                    
                    # Attendre que les documents soient affich√©s
                    self.parent.after(1000, do_highlight)
                
                # Attendre que la vue des dossiers soit pr√™te
                self.parent.after(200, show_client_docs)
            
            # Ex√©cuter la navigation apr√®s un court d√©lai pour s'assurer que
            # l'interface est pr√™te
            self.parent.after(100, after_navigation)
        else:
            # Comportement par d√©faut si pas de redirection demand√©e
            if self.selected_folder:
                document = next((d for d in self.model.documents if d.get("id") == document_id), None)
                if document and self._document_matches_current_folder(document):
                    # Rester dans le dossier actuel et mettre √† jour l'affichage
                    documents = self._get_filtered_documents()
                    self._display_documents(documents)
                    
                    # Si on doit mettre en √©vidence le document
                    if highlight:
                        self.parent.after(1000, lambda: self._highlight_document(document_id))
                else:
                    # Revenir √† la vue des dossiers
                    self.show_folders_view()
            else:
                # Par d√©faut, revenir √† la vue des dossiers
                self.show_folders_view()
    
    def _highlight_document(self, document_id):
        """Met en √©vidence un document avec un effet subtil qui pr√©serve la lisibilit√© du texte"""
        logger.info(f"Tentative de mise en √©vidence du document {document_id}")
        
        # Trouver le widget du document dans la grille
        found = False
        latest_card = None
        latest_date = None
        
        # Parcourir toutes les cartes de document dans la grille
        for card in self.documents_grid.winfo_children():
            try:
                if hasattr(card, 'document'):
                    # Obtenir la date de cr√©ation du document
                    doc_date = card.document.get('created_at') or card.document.get('date')
                    if doc_date:
                        # Si c'est la premi√®re carte ou si c'est la plus r√©cente
                        if latest_date is None or doc_date > latest_date:
                            latest_date = doc_date
                            latest_card = card
                            found = True
            except Exception as e:
                logger.warning(f"Erreur lors de la v√©rification d'une carte: {e}")
                continue
        
        if found and latest_card:
            logger.info(f"Document le plus r√©cent trouv√©, cr√©√© le {latest_date}")
            
            # Sauvegarder la couleur originale de la carte et du contenu
            original_color = latest_card.cget('fg_color')
            original_border = latest_card.cget('border_width')
            
            # Variable pour suivre si l'effet est en cours
            highlight_active = True
            
            # Gestionnaire d'√©v√©nement pour arr√™ter l'effet au clic
            def stop_highlight(event):
                nonlocal highlight_active
                if highlight_active:
                    highlight_active = False
                    latest_card.configure(fg_color=original_color, border_width=original_border)
                    logger.debug("Effet de mise en √©vidence arr√™t√© par clic utilisateur")
            
            # Lier l'√©v√©nement clic √† toutes les parties de la carte
            for widget in [latest_card] + latest_card.winfo_children():
                widget.bind("<Button-1>", stop_highlight, add="+")
            
            # Cr√©er un effet de bordure qui ne masque pas le texte
            def apply_subtle_border_effect():
                nonlocal highlight_active
                
                # Si l'effet a √©t√© arr√™t√© manuellement ou la carte n'existe plus
                if not highlight_active or not latest_card.winfo_exists():
                    return
                
                # Au lieu de changer la couleur de fond, utiliser une bordure subtile
                # qui n'affectera pas la lisibilit√©
                
                # D√©finir une bordure l√©g√®rement visible
                latest_card.configure(border_width=2)
                
                # Couleurs de bordure selon le th√®me
                if ctk.get_appearance_mode() == "Dark":
                    border_colors = [
                        "#4a6baf",  # Bleu subtil pour mode sombre
                        "#5272b1",
                        "#5a79b4",
                        "#6280b6",
                        "#6987b9",
                        "#6280b6",
                        "#5a79b4",
                        "#5272b1",
                        "#4a6baf",
                    ]
                else:
                    border_colors = [
                        "#7ba3e0",  # Bleu clair pour mode clair
                        "#6f9ade",
                        "#6391dc",
                        "#5789da",
                        "#4b80d8",
                        "#5789da",
                        "#6391dc",
                        "#6f9ade",
                        "#7ba3e0",
                    ]
                
                # Dur√©e totale de l'effet: environ 3 secondes
                total_steps = len(border_colors)
                interval = 300  # ms entre changements de couleur
                
                def step_effect(step=0):
                    nonlocal highlight_active
                    
                    # Arr√™ter si l'effet n'est plus actif ou si on a termin√©
                    if not highlight_active or step >= total_steps or not latest_card.winfo_exists():
                        # Restaurer l'√©tat d'origine
                        if latest_card.winfo_exists():
                            latest_card.configure(border_width=original_border)
                        highlight_active = False
                        return
                    
                    # Appliquer la couleur de bordure courante
                    latest_card.configure(border_color=border_colors[step])
                    
                    # Programmer l'√©tape suivante
                    self.parent.after(interval, lambda: step_effect(step + 1))
                
                # D√©marrer l'effet
                step_effect()
            
            # Lancer l'effet subtil
            apply_subtle_border_effect()
            
            # Arr√™ter automatiquement l'effet apr√®s 3 secondes
            self.parent.after(3000, lambda: stop_highlight(None) if highlight_active else None)
        else:
            logger.warning("Aucun document trouv√© dans la vue pour la mise en √©vidence")
            # R√©essayer apr√®s un court d√©lai
            self.parent.after(500, lambda: self._highlight_document(document_id))
    
    def _document_matches_current_folder(self, document):
        """V√©rifie si un document correspond au dossier actuel"""
        if self.selected_folder == "date" and self.current_subfolder:
            # Par date
            return document.get("date", "").startswith(self.current_subfolder)
        
        elif self.selected_folder == "type" and self.current_subfolder:
            # Par type
            return document.get("type", "").lower() == self.current_subfolder.lower()
        
        elif self.selected_folder == "client" and self.current_subfolder:
            # Par client
            return document.get("client_id") == self.current_subfolder
        
        elif self.selected_folder == "custom" and self.current_subfolder:
            # Par dossier personnalis√©
            # Cette v√©rification d√©pend de votre impl√©mentation
            if hasattr(self.model, 'document_in_custom_folder'):
                return self.model.document_in_custom_folder(document.get("id"), self.current_subfolder)
            return False
        
        return True
    
    def _open_document(self, document):
        """Ouvre un document"""
        try:
            # R√©cup√©rer le document
            document = next((d for d in self.model.documents if d.get('id') == document.get("id")), None)
            
            if not document:
                DialogUtils.show_message(
                    self.parent,
                    "Erreur",
                    "Document non trouv√©",
                    "error"
                )
                return
            
            # V√©rifier si le fichier existe
            file_path = document.get('file_path')
            
            if not file_path or not os.path.exists(file_path):
                DialogUtils.show_message(
                    self.parent,
                    "Erreur",
                    "Le fichier du document est introuvable",
                    "error"
                )
                return
            
            # Ouvrir le fichier avec l'application par d√©faut du syst√®me
            try:
                import subprocess
                if os.name == 'nt':  # Windows
                    os.startfile(file_path)
                elif os.name == 'posix':  # macOS ou Linux
                    subprocess.call(('open' if os.uname().sysname == 'Darwin' else 'xdg-open', file_path))
                
                logger.info(f"Document ouvert: {document.get('id')} - {file_path}")
                
            except Exception as e:
                logger.error(f"Erreur lors de l'ouverture du document: {e}")
                DialogUtils.show_message(
                    self.parent,
                    "Erreur",
                    f"Erreur lors de l'ouverture du document: {str(e)}",
                    "error"
                )
            
        except Exception as e:
            logger.error(f"Erreur lors de l'ouverture du document: {e}")
            DialogUtils.show_message(
                self.parent,
                "Erreur",
                f"Une erreur est survenue: {str(e)}",
                "error"
            )
    
    def download_document(self, document_id):
        """T√©l√©charge un document"""
        try:
            # R√©cup√©rer le document
            document = next((d for d in self.model.documents if d.get("id") == document_id), None)
            if not document:
                self.show_message("Erreur", "Document non trouv√©", "error")
                return
            
            # Demander o√π sauvegarder le fichier
            file_path = filedialog.asksaveasfilename(
                defaultextension=os.path.splitext(document.get("file_path", ""))[1],
                initialfile=document.get("title", "document")
            )
            
            if file_path:
                # Copier le fichier
                shutil.copy2(document.get("file_path"), file_path)
                self.show_message("Succ√®s", "Document t√©l√©charg√© avec succ√®s", "info")
        
        except Exception as e:
            logger.error(f"Erreur lors du t√©l√©chargement du document: {e}")
            self.show_message("Erreur", f"Impossible de t√©l√©charger le document: {str(e)}", "error")
    
    def preview_document(self, document_id):
        """Pr√©visualise un document"""
        try:
            # R√©cup√©rer le document
            document = next((d for d in self.model.documents if d.get("id") == document_id), None)
            if not document:
                self.show_message("Erreur", "Document non trouv√©", "error")
                return
            
            # Cr√©er et utiliser le pr√©visualiseur
            from utils.document_preview import DocumentPreview
            previewer = DocumentPreview(self.frame)
            previewer.preview(document)
            
        except Exception as e:
            logger.error(f"Erreur lors de la pr√©visualisation du document: {e}")
            self.show_message("Erreur", f"Impossible de pr√©visualiser le document: {str(e)}", "error")
    
    def import_document(self):
        """Importe un document externe avec validation de taille et analyse de contenu"""
        try:
            logger.debug("D√©but de l'importation d'un document")
            
            # Ouvrir une bo√Æte de dialogue pour s√©lectionner un fichier
            file_path = filedialog.askopenfilename(
                title="S√©lectionner un document √† importer",
                filetypes=[
                    ("Documents", "*.pdf;*.docx;*.doc;*.txt;*.odt"),
                    ("PDF", "*.pdf"),
                    ("Word", "*.docx;*.doc"),
                    ("Texte", "*.txt"),
                    ("OpenDocument", "*.odt"),
                    ("Tous les fichiers", "*.*")
                ]
            )
            
            if not file_path:
                logger.debug("Importation annul√©e par l'utilisateur")
                return
            
            logger.info(f"Fichier s√©lectionn√©: {file_path}")
            
            # V√©rifier si le fichier existe
            if not os.path.exists(file_path):
                logger.error(f"Le fichier n'existe pas: {file_path}")
                messagebox.showerror(
                    "Erreur",
                    "Le fichier s√©lectionn√© n'existe pas."
                )
                return
            
            # V√©rifier la taille du fichier
            file_size = os.path.getsize(file_path)
            if file_size > self.MAX_FILE_SIZE:
                logger.warning(f"Fichier trop volumineux: {file_path} ({file_size/1024/1024:.1f} Mo)")
                messagebox.showerror(
                    "Erreur",
                    f"Le fichier est trop volumineux ({file_size/1024/1024:.1f} Mo). Maximum autoris√©: {self.MAX_FILE_SIZE/1024/1024} Mo."
                )
                return
            
            logger.debug(f"Taille du fichier valid√©e: {file_size/1024/1024:.1f} Mo")
            
            # V√©rifier le type de fichier
            if not self._is_valid_file_type(file_path):
                logger.error(f"Type de fichier invalide: {file_path}")
                messagebox.showerror(
                    "Erreur",
                    "Type de fichier non autoris√© ou fichier corrompu."
                )
                return
            
            logger.info(f"Type de fichier valid√©: {file_path}")
            
            # R√©cup√©rer le nom de fichier comme titre par d√©faut
            filename = os.path.basename(file_path)
            title = os.path.splitext(filename)[0]
            
            # Cr√©er une fen√™tre de dialogue pour l'analyse
            dialog = ctk.CTkToplevel(self.parent)
            dialog.title("Analyse du document")
            dialog.geometry("800x600")
            dialog.transient(self.parent)
            dialog.grab_set()
            
            # Cr√©er l'interface de la fen√™tre d'analyse
            main_frame = ctk.CTkFrame(dialog)
            main_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # Titre
            title_label = ctk.CTkLabel(
                main_frame,
                text=f"Analyse de {filename}",
                font=ctk.CTkFont(size=18, weight="bold")
            )
            title_label.pack(pady=(0, 20))
            
            # Zone de contenu pour les r√©sultats
            content_frame = ctk.CTkFrame(main_frame)
            content_frame.pack(fill="both", expand=True, padx=10, pady=10)
            
            # Zone de statut et de progression
            status_frame = ctk.CTkFrame(main_frame)
            status_frame.pack(fill="x", padx=10, pady=(10, 0))
            
            # Indicateur de chargement
            spinner = None
            try:
                from utils.ui_components import LoadingSpinner
                spinner = LoadingSpinner(status_frame, size=20)
                spinner.pack(side="left", padx=(10, 5), pady=5)
                spinner.start()
            except Exception as e:
                logger.warning(f"Impossible de cr√©er l'indicateur de chargement: {e}")
            
            # √âtiquette de statut
            status_label = ctk.CTkLabel(
                status_frame,
                text=f"Analyse de {filename} en cours...",
                font=ctk.CTkFont(size=12)
            )
            status_label.pack(side="left", padx=5, pady=5)
            
            # Message initial
            info_label = ctk.CTkLabel(
                content_frame,
                text=f"Analyse de {filename} en cours...\nCette op√©ration peut prendre quelques instants.",
                font=ctk.CTkFont(size=14)
            )
            info_label.pack(pady=40)
            
            dialog.update()
            
            # Boutons (initialement d√©sactiv√©s)
            button_frame = ctk.CTkFrame(main_frame)
            button_frame.pack(fill="x", padx=10, pady=10)
            
            # Bouton Annuler (toujours disponible)
            ctk.CTkButton(
                button_frame,
                text="Annuler",
                command=dialog.destroy
            ).pack(side="right", padx=5)
            
            # Fonction pour passer de l'analyse √† l'importation
            def continue_import(analysis_results=None):
                # D√©terminer automatiquement le type de document
                doc_type = "autre"
                lower_title = title.lower()
                
                if "contrat" in lower_title or "agreement" in lower_title:
                    doc_type = "contrat"
                elif "facture" in lower_title or "invoice" in lower_title:
                    doc_type = "facture"
                elif "proposition" in lower_title or "proposal" in lower_title:
                    doc_type = "proposition"
                elif "rapport" in lower_title or "report" in lower_title:
                    doc_type = "rapport"
                
                # Si des r√©sultats d'analyse sont disponibles, utiliser ces informations
                if analysis_results and isinstance(analysis_results, dict):
                    # Extraire le type de document s'il est disponible
                    detected_type = analysis_results.get("document_type")
                    if detected_type:
                        doc_type = detected_type
                
                # Cr√©er un document avec les informations basiques
                document_data = {
                    "title": title,
                    "type": doc_type,
                    "file_path": file_path,  # Sera copi√© plus tard
                    "imported": True
                }
                
                # Si des variables ont √©t√© extraites, les inclure
                if analysis_results and "variables" in analysis_results:
                    document_data["variables"] = analysis_results["variables"]
                
                # Si nous sommes dans un dossier personnalis√©, associer le document √† ce dossier
                folder_id = None
                if self.selected_folder == "custom" and self.current_subfolder:
                    folder_id = self.current_subfolder
                    logger.debug(f"Document associ√© au dossier personnalis√©: {folder_id}")
                
                # Fermer la fen√™tre de dialogue
                dialog.destroy()
                
                # Ouvrir le formulaire pour compl√©ter les m√©tadonn√©es
                from views.document_form_view import DocumentFormView
                form = DocumentFormView(
                    self.parent,
                    self.model,
                    data=document_data,
                    on_save=self.on_document_saved,
                    mode="import",
                    custom_folder_id=folder_id
                )
            
            # Fonction pour afficher les r√©sultats
            def display_results(results):
                # Supprimer le message de chargement
                info_label.destroy()
                
                if spinner:
                    spinner.stop()
                    spinner.pack_forget()
                
                status_label.configure(text="Analyse termin√©e")
                
                # Cr√©er une zone d√©filante pour les r√©sultats
                results_frame = ctk.CTkScrollableFrame(content_frame)
                results_frame.pack(fill="both", expand=True, padx=10, pady=10)
                
                # Afficher des informations g√©n√©rales sur le document
                if "document_type" in results:
                    ctk.CTkLabel(
                        results_frame,
                        text=f"Type de document: {results['document_type']}",
                        font=ctk.CTkFont(size=14, weight="bold")
                    ).pack(anchor="w", pady=(5, 2))
                
                # Afficher les variables trouv√©es
                if "variables" in results and results["variables"]:
                    variables = results["variables"]
                    ctk.CTkLabel(
                        results_frame,
                        text="Variables d√©tect√©es:",
                        font=ctk.CTkFont(size=14, weight="bold")
                    ).pack(anchor="w", pady=(10, 5))
                    
                    for var_name, var_value in variables.items():
                        var_frame = ctk.CTkFrame(results_frame)
                        var_frame.pack(fill="x", padx=5, pady=2)
                        
                        ctk.CTkLabel(
                            var_frame,
                            text=f"{var_name}:",
                            font=ctk.CTkFont(size=12, weight="bold"),
                            width=150
                        ).pack(side="left", padx=5, pady=2)
                        
                        ctk.CTkLabel(
                            var_frame,
                            text=str(var_value),
                            font=ctk.CTkFont(size=12),
                            anchor="w"
                        ).pack(side="left", fill="x", expand=True, padx=5, pady=2)
                
                # Activer le bouton Continuer l'importation
                ctk.CTkButton(
                    button_frame,
                    text="Continuer l'importation",
                    command=lambda: continue_import(results)
                ).pack(side="right", padx=5)
            
            # Fonction pour g√©rer l'√©chec de l'analyse
            def handle_analysis_failure(error_msg):
                if spinner:
                    spinner.stop()
                    spinner.pack_forget()
                
                info_label.destroy()
                
                # Afficher un message d'erreur
                error_label = ctk.CTkLabel(
                    content_frame,
                    text=f"Impossible d'analyser le document:\n{error_msg}",
                    font=ctk.CTkFont(size=14),
                    text_color=("red", "#FF5555")
                )
                error_label.pack(pady=40)
                
                status_label.configure(text="Analyse √©chou√©e")
                
                # Activer le bouton pour continuer sans analyse
                ctk.CTkButton(
                    button_frame,
                    text="Continuer sans analyse",
                    command=lambda: continue_import()
                ).pack(side="right", padx=5)
            
            # Initialiser l'analyseur de documents si n√©cessaire
            if not hasattr(self, "doc_analyzer") or self.doc_analyzer is None:
                try:
                    from doc_analyzer import DocumentAnalyzer
                    self.doc_analyzer = DocumentAnalyzer()
                except Exception as e:
                    logger.error(f"Erreur lors de l'initialisation de l'analyseur: {e}")
                    self.doc_analyzer = None
            
            # Lancer l'analyse automatiquement
            def analyze_thread():
                try:
                    if self.doc_analyzer:
                        # Analyser le document
                        results = self.doc_analyzer.analyze_document(file_path)
                        
                        if results:
                            # Mettre √† jour l'interface dans le thread principal
                            dialog.after(0, lambda: display_results(results))
                        else:
                            dialog.after(0, lambda: handle_analysis_failure("Aucun r√©sultat d'analyse obtenu"))
                    else:
                        dialog.after(0, lambda: handle_analysis_failure("Analyseur non disponible"))
                except Exception as error:
                    logger.error(f"Erreur lors de l'analyse du document {file_path}: {error}")
                    dialog.after(0, lambda err=error: handle_analysis_failure(str(err)))
            
            # Lancer l'analyse automatiquement sans attendre un clic sur un bouton
            thread = threading.Thread(target=analyze_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            logger.error(f"Erreur lors de l'importation: {e}")
            messagebox.showerror(
                "Erreur",
                f"Une erreur est survenue lors de l'importation: {e}"
            )
    
    def show(self):
        """Affiche la vue"""
        self.frame.pack(fill=ctk.BOTH, expand=True)
        self.update_view()
        logger.info("Vue documents affich√©e")
    
    def hide(self):
        """Masque la vue"""
        self.frame.pack_forget()
    
    def _is_valid_file_type(self, file_path):
        """V√©rifie si le type de fichier est valide et s√©curis√©"""
        if not file_path:
            logger.warning("Tentative de validation d'un chemin de fichier vide")
            return False
        
        # V√©rifier le cache d'abord
        if file_path in self._file_type_cache:
            logger.debug(f"Type de fichier trouv√© dans le cache: {file_path}")
            return self._file_type_cache[file_path]
        
        # Extensions autoris√©es
        allowed_extensions = self.ALLOWED_EXTENSIONS
        
        # V√©rifier l'extension
        _, ext = os.path.splitext(file_path.lower())
        if ext not in allowed_extensions:
            logger.warning(f"Extension de fichier non autoris√©e: {ext} pour {file_path}")
            return False
        
        # Pour plus de s√©curit√©, v√©rifier aussi la signature du fichier (magic numbers)
        try:
            import magic
            file_type = magic.from_file(file_path, mime=True)
            
            # V√©rifier le type MIME
            if file_type not in self.ALLOWED_MIME_TYPES:
                logger.warning(f"Type MIME non autoris√©: {file_type} pour {file_path}")
                return False
            
            logger.debug(f"Type MIME valid√©: {file_type} pour {file_path}")
            
        except ImportError:
            logger.warning("Module python-magic non disponible, utilisation de la validation basique")
            # Si python-magic n'est pas disponible, utiliser une approche plus simple
            # V√©rifier la taille du fichier
            if os.path.getsize(file_path) == 0:
                logger.warning(f"Fichier vide d√©tect√©: {file_path}")
                return False
            
            # V√©rifier les premiers octets pour les formats courants
            try:
                with open(file_path, 'rb') as f:
                    header = f.read(8)
                    
                    # V√©rification simple des signatures
                    if ext == '.pdf' and not header.startswith(b'%PDF-'):
                        logger.warning(f"Signature PDF invalide pour {file_path}")
                        return False
                    elif ext in ['.docx', '.odt'] and not header.startswith(b'PK\x03\x04'):
                        logger.warning(f"Signature ZIP invalide pour {file_path}")
                        return False
            except Exception as e:
                logger.error(f"Erreur lors de la lecture du fichier {file_path}: {e}")
                return False
        
        # Mettre en cache le r√©sultat
        if len(self._file_type_cache) >= self._file_type_cache_size:
            self._file_type_cache.pop(next(iter(self._file_type_cache)))
        self._file_type_cache[file_path] = True
        
        logger.info(f"Type de fichier valid√© avec succ√®s: {file_path}")
        return True
    
    def _apply_filters(self, *args):
        """Applique les filtres et met √† jour l'affichage - version corrig√©e"""
        # Ajouter un log pour aider au d√©bogage
        logger.info("Application des filtres...")
        
        # R√©initialiser la page courante
        self.current_page = 1
        
        # R√©cup√©rer les documents filtr√©s
        filtered_docs = self._get_filtered_documents()
        
        # Afficher les documents filtr√©s
        self._display_documents(filtered_docs)
        
        # Ajouter un log final
        logger.info(f"Filtres appliqu√©s: {len(filtered_docs)} documents affich√©s")
    
    def _clear_search(self):
        """Efface le texte de recherche et retourne √† la vue pr√©c√©dente"""
        logger.info("R√©initialisation de la recherche via le bouton d'effacement")
        
        # Effacer le texte
        self.search_var.set("")
        
        # Forcer l'actualisation de l'entr√©e
        if hasattr(self, 'search_entry') and self.search_entry.winfo_exists():
            self.search_entry.delete(0, "end")
            self.search_entry.configure(placeholder_text="Rechercher un document...")
            self.search_entry.update()
            
            # Redonner le focus
            self.search_entry.focus_set()
        
        # Restaurer l'√©tat pr√©c√©dent
        self._restore_pre_search_state()
        
        logger.info("Recherche r√©initialis√©e, retour √† la vue pr√©c√©dente")
    
    def _add_custom_folder_adapter(self, folder_name):
        """Adaptateur pour ajouter un dossier personnalis√©"""
        try:
            import uuid
            folder_id = str(uuid.uuid4())
            
            # V√©rifier si custom_folders est initialis√©
            if not hasattr(self.model, 'custom_folders'):
                self.model.custom_folders = {}
            
            self.model.custom_folders[folder_id] = {
                "name": folder_name,
                "count": 0,
                "documents": []
            }
            # Sauvegarder les changements
            self._save_custom_folders()
            return True
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout du dossier personnalis√©: {e}")
            return False
    
    def _rename_custom_folder_adapter(self, folder_id, new_name):
        """Adaptateur pour renommer un dossier personnalis√©"""
        try:
            # V√©rifier si custom_folders est initialis√©
            if not hasattr(self.model, 'custom_folders'):
                logger.error("custom_folders n'est pas initialis√©")
                return False
            
            if folder_id not in self.model.custom_folders:
                return False
            
            self.model.custom_folders[folder_id]["name"] = new_name
            # Sauvegarder les changements
            self._save_custom_folders()
            return True
        except Exception as e:
            logger.error(f"Erreur lors du renommage du dossier personnalis√©: {e}")
            return False
    
    def _delete_custom_folder_adapter(self, folder_id):
        """Adaptateur pour supprimer un dossier personnalis√©"""
        try:
            # V√©rifier si custom_folders est initialis√©
            if not hasattr(self.model, 'custom_folders'):
                logger.error("custom_folders n'est pas initialis√©")
                return False
            
            if folder_id not in self.model.custom_folders:
                return False
            
            del self.model.custom_folders[folder_id]
            # Sauvegarder les changements
            self._save_custom_folders()
            return True
        except Exception as e:
            logger.error(f"Erreur lors de la suppression du dossier personnalis√©: {e}")
            return False
    
    def _get_documents_by_custom_folder_adapter(self, folder_id):
        """Adaptateur pour r√©cup√©rer les documents d'un dossier personnalis√©"""
        try:
            # V√©rifier si custom_folders est initialis√©
            if not hasattr(self.model, 'custom_folders'):
                logger.error("custom_folders n'est pas initialis√©")
                return []
            
            if folder_id not in self.model.custom_folders:
                return []
            
            # R√©cup√©rer les IDs des documents dans ce dossier
            document_ids = self.model.custom_folders[folder_id].get("documents", [])
            
            # R√©cup√©rer les documents correspondants
            return [doc for doc in self.model.documents if doc.get("id") in document_ids]
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des documents du dossier: {e}")
            return []
    
    def _document_in_custom_folder_adapter(self, document_id, folder_id):
        """Adaptateur pour v√©rifier si un document est dans un dossier personnalis√©"""
        try:
            # V√©rifier si custom_folders est initialis√©
            if not hasattr(self.model, 'custom_folders'):
                logger.error("custom_folders n'est pas initialis√©")
                return False
            
            if folder_id not in self.model.custom_folders:
                return False
            
            # V√©rifier si le document est dans ce dossier
            document_ids = self.model.custom_folders[folder_id].get("documents", [])
            return document_id in document_ids
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification du document dans le dossier: {e}")
            return False
    
    def _save_custom_folders(self):
        """Sauvegarde les dossiers personnalis√©s"""
        try:
            # V√©rifier si custom_folders est initialis√©
            if not hasattr(self.model, 'custom_folders'):
                logger.error("custom_folders n'est pas initialis√©")
                return False
            
            # Si le mod√®le a une m√©thode pour sauvegarder les dossiers personnalis√©s, l'utiliser
            if hasattr(self.model, 'save_custom_folders'):
                return self.model.save_custom_folders()
            
            # Sinon, utiliser une m√©thode par d√©faut
            import json
            import os
            
            # Cr√©er le r√©pertoire de donn√©es si n√©cessaire
            data_dir = getattr(self.model, 'data_dir', os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data'))
            os.makedirs(data_dir, exist_ok=True)
            
            # Sauvegarder dans un fichier JSON
            filepath = os.path.join(data_dir, 'custom_folders.json')
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(self.model.custom_folders, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des dossiers personnalis√©s: {e}")
            return False
    
    def _setup_search(self):
        """Configure la fonctionnalit√© de recherche en temps r√©el"""
        # Cr√©er la variable de recherche si elle n'existe pas d√©j√†
        if not hasattr(self, 'search_var'):
            self.search_var = ctk.StringVar(value="")
        
        # Variables pour m√©moriser l'√©tat de navigation avant la recherche
        if not hasattr(self, 'pre_search_state'):
            self.pre_search_state = {
                'folder': None,
                'subfolder': None,
                'search_active': False,
                'in_main_view': True
            }
        
        # Ajouter un callback direct en temps r√©el
        def search_callback(*args):
            # R√©cup√©rer la valeur actuelle
            current_search = self.search_var.get()
            
            # Si c'est la premi√®re entr√©e dans la recherche, m√©moriser l'√©tat actuel
            if not self.pre_search_state['search_active'] and current_search:
                self.pre_search_state['folder'] = self.selected_folder
                self.pre_search_state['subfolder'] = self.current_subfolder
                self.pre_search_state['in_main_view'] = (self.selected_folder is None)
                self.pre_search_state['search_active'] = True
                logger.info(f"√âtat m√©moris√© avant recherche: dossier={self.pre_search_state['folder']}, "
                            f"sous-dossier={self.pre_search_state['subfolder']}, "
                            f"vue principale={self.pre_search_state['in_main_view']}")
            
            # Si la recherche devient vide et √©tait active avant, restaurer l'√©tat pr√©c√©dent
            if self.pre_search_state['search_active'] and not current_search:
                logger.info("Recherche vid√©e, restauration de l'√©tat pr√©c√©dent")
                self._restore_pre_search_state()
                return
            
            # Annuler le timer existant si pr√©sent
            if hasattr(self, 'search_timer') and self.search_timer:
                self.parent.after_cancel(self.search_timer)
            
            # Planifier une nouvelle recherche
            self.search_timer = self.parent.after(
                300,  # d√©lai court pour une r√©activit√© en temps r√©el
                lambda: self._perform_search(current_search)
            )
        
        # Connecter la variable au callback
        self.search_var.trace_add("write", search_callback)
        
        # S'assurer que la barre de recherche utilise cette variable
        if hasattr(self, 'search_entry'):
            self.search_entry.configure(textvariable=self.search_var)
        
        logger.info("Configuration de la recherche en temps r√©el termin√©e")

    def _restore_pre_search_state(self):
        """Restaure l'√©tat avant la recherche"""
        # R√©cup√©rer l'√©tat m√©moris√©
        folder = self.pre_search_state['folder']
        subfolder = self.pre_search_state['subfolder']
        in_main_view = self.pre_search_state['in_main_view']
        
        logger.info(f"Restauration de l'√©tat: dossier={folder}, sous-dossier={subfolder}, vue principale={in_main_view}")
        
        # R√©initialiser l'√©tat de la recherche
        self.pre_search_state['search_active'] = False
        
        # Si nous √©tions dans la vue principale, y retourner
        if in_main_view:
            self.show_folders_view()
            return
        
        # Sinon, restaurer la navigation en fonction de l'√©tat pr√©c√©dent
        if folder is None:
            # Si nous √©tions dans la vue principale, afficher les dossiers
            self.show_folders_view()
        elif folder is not None and subfolder is None:
            # Si nous √©tions dans un dossier principal, afficher ses sous-dossiers
            self.show_folder_documents(folder)
        elif folder is not None and subfolder is not None:
            # Si nous √©tions dans un sous-dossier, afficher ses documents
            self._restore_subfolder_view(folder, subfolder)

    def _restore_subfolder_view(self, folder, subfolder):
        """Restaure la vue d'un sous-dossier sp√©cifique"""
        if folder == "date":
            display_name = self._get_month_display_name(subfolder)
            self.show_documents_by_month(subfolder, display_name)
        elif folder == "type":
            self.show_documents_by_type(subfolder)
        elif folder == "client":
            client_name = self._get_client_name_cached(subfolder)
            self.show_documents_by_client(subfolder, client_name)
        elif folder == "custom":
            folder_name = self.model.custom_folders.get(subfolder, {}).get("name", "Dossier personnalis√©")
            self.show_documents_by_custom_folder(subfolder, folder_name)

    def _perform_search(self, search_text):
        """Effectue la recherche en temps r√©el en pr√©servant la hi√©rarchie de navigation"""
        logger.info(f"Recherche en cours pour: '{search_text}'")
        
        # Recherche vide, retourner √† la vue appropri√©e
        if not search_text:
            # Si nous sommes dans la vue principale des dossiers
            if self.selected_folder is None:
                self.show_folders_view()
                return
            
            # Si nous sommes dans un dossier principal mais pas dans un sous-dossier
            elif self.selected_folder is not None and self.current_subfolder is None:
                self.show_folder_documents(self.selected_folder)
                return
            
            # Si nous sommes dans un sous-dossier
            elif self.selected_folder is not None and self.current_subfolder is not None:
                # Restaurer la vue du sous-dossier actuel
                self._restore_current_view()
                return
        
        # Si nous sommes dans la vue principale (aucun dossier s√©lectionn√©)
        if self.selected_folder is None:
            # Effectuer une recherche dans les dossiers principaux
            search_results = []
            for doc in self.model.documents:
                # Rechercher dans tous les champs pertinents
                searchable_fields = [
                    doc.get("title", "").lower(),
                    doc.get("type", "").lower(),
                    doc.get("description", "").lower(),
                    self._get_client_name_cached(doc.get("client_id", "")).lower(),
                    doc.get("date", "").lower()
                ]
                
                # V√©rifier si le texte de recherche est pr√©sent dans au moins un champ
                if any(search_text.lower() in field for field in searchable_fields):
                    search_results.append(doc)
            
            # Afficher les r√©sultats dans la vue principale
            self._display_documents(search_results)
            return
        
        # Si nous sommes dans un dossier principal mais pas dans un sous-dossier
        elif self.selected_folder is not None and self.current_subfolder is None:
            # Rechercher selon le type de dossier
            if self.selected_folder == "client":
                # Filtrer les clients selon le texte de recherche
                self._filter_clients_by_search(search_text)
            elif self.selected_folder == "type":
                # Filtrer les types selon le texte de recherche
                self._filter_types_by_search(search_text)
            elif self.selected_folder == "date":
                # Filtrer les dates selon le texte de recherche
                self._filter_dates_by_search(search_text)
            elif self.selected_folder == "custom":
                # Filtrer les dossiers personnalis√©s selon le texte de recherche
                self._filter_custom_folders_by_search(search_text)
            return
        
        # Si nous sommes dans un sous-dossier (niveau documents)
        elif self.selected_folder is not None and self.current_subfolder is not None:
            # Filtrer les documents du sous-dossier actuel
            documents = self._get_filtered_documents()
            search_results = []
            
            for doc in documents:
                # Rechercher dans tous les champs pertinents
                searchable_fields = [
                    doc.get("title", "").lower(),
                    doc.get("type", "").lower(),
                    doc.get("description", "").lower(),
                    self._get_client_name_cached(doc.get("client_id", "")).lower(),
                    doc.get("date", "").lower()
                ]
                
                # V√©rifier si le texte de recherche est pr√©sent dans au moins un champ
                if any(search_text.lower() in field for field in searchable_fields):
                    search_results.append(doc)
            
            # Afficher les r√©sultats filtr√©s sans changer de vue
            self._display_documents(search_results)
            return

    def _filter_clients_by_search(self, search_text):
        """Filtre et affiche les clients correspondant au texte de recherche"""
        search_text = search_text.lower()
        matching_clients = []
        
        # Rechercher dans les clients
        for client in self.model.clients:
            searchable_fields = [
                client.get("name", "").lower(),
                client.get("company", "").lower() if client.get("company") else "",
                client.get("email", "").lower() if client.get("email") else "",
                client.get("phone", "").lower() if client.get("phone") else "",
                client.get("address", "").lower() if client.get("address") else ""
            ]
            
            # V√©rifier si le texte de recherche est dans l'un des champs
            if any(search_text in field for field in searchable_fields):
                matching_clients.append(client)
        
        # Nettoyer la vue
        self.folders_grid.pack_forget()
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers pour les r√©sultats
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
        
        # Si aucun r√©sultat
        if not matching_clients:
            self.no_documents_label.configure(
                text="Aucun client ne correspond √† votre recherche."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Afficher les clients trouv√©s
        row, col = 0, 0
        for client in matching_clients:
            client_id = client.get("id", "")
            client_name = client.get("name", "Client inconnu")
            
            # Compter les documents pour ce client
            doc_count = len([d for d in self.model.documents if d.get("client_id") == client_id])
            
            # Cr√©er une carte pour ce client
            self._create_client_folder_card(client_id, client_name, doc_count, row, col)
            
            col += 1
            if col >= 2:  # 2 cards par ligne
                col = 0
                row += 1

    def _filter_types_by_search(self, search_text):
        """Filtre et affiche les types correspondant au texte de recherche"""
        search_text = search_text.lower()
        matching_types = {}
        
        # Collecter tous les types de documents qui correspondent
        for doc in self.model.documents:
            doc_type = doc.get("type", "").lower()
            if search_text in doc_type:
                if doc_type not in matching_types:
                    matching_types[doc_type] = 0
                matching_types[doc_type] += 1
        
        # Nettoyer la vue
        self.folders_grid.pack_forget()
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers pour les r√©sultats
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
        
        # Si aucun r√©sultat
        if not matching_types:
            self.no_documents_label.configure(
                text="Aucun type de document ne correspond √† votre recherche."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Afficher les types trouv√©s
        row, col = 0, 0
        for doc_type, count in matching_types.items():
            # Cr√©er une carte pour ce type
            self._create_type_folder_card(doc_type, count, row, col)
            
            col += 1
            if col >= 2:  # 2 cards par ligne
                col = 0
                row += 1

    def _filter_dates_by_search(self, search_text):
        """Filtre et affiche les dates correspondant au texte de recherche"""
        search_text = search_text.lower()
        matching_months = {}
        months_names = {
            "01": "Janvier", "02": "F√©vrier", "03": "Mars",
            "04": "Avril", "05": "Mai", "06": "Juin",
            "07": "Juillet", "08": "Ao√ªt", "09": "Septembre",
            "10": "Octobre", "11": "Novembre", "12": "D√©cembre"
        }
        
        # Parcourir tous les documents pour trouver les dates
        for doc in self.model.documents:
            date_str = doc.get("date", "")
            if len(date_str) >= 7:  # Format "YYYY-MM"
                year_month = date_str[:7]
                year = date_str[:4]
                month = date_str[5:7]
                month_name = months_names.get(month, month)
                display_name = f"{month_name} {year}"
                
                # V√©rifier si la recherche correspond au nom du mois ou √† l'ann√©e
                if (search_text in display_name.lower() or 
                    search_text in year or 
                    search_text in month):
                    if year_month not in matching_months:
                        matching_months[year_month] = {
                            "display_name": display_name,
                            "count": 0
                        }
                    matching_months[year_month]["count"] += 1
        
        # Nettoyer la vue
        self.folders_grid.pack_forget()
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers pour les r√©sultats
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
        
        # Si aucun r√©sultat
        if not matching_months:
            self.no_documents_label.configure(
                text="Aucune date ne correspond √† votre recherche."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Afficher les mois trouv√©s
        row, col = 0, 0
        for year_month, data in sorted(matching_months.items(), reverse=True):
            # Cr√©er une carte pour ce mois
            self._create_month_folder_card(year_month, data["display_name"], data["count"], row, col)
            
            col += 1
            if col >= 2:  # 2 cards par ligne
                col = 0
                row += 1

    def _filter_custom_folders_by_search(self, search_text):
        """Filtre et affiche les dossiers personnalis√©s correspondant au texte de recherche"""
        search_text = search_text.lower()
        matching_folders = []
        
        # Rechercher dans les noms des dossiers personnalis√©s
        for folder_id, folder_data in self.model.custom_folders.items():
            folder_name = folder_data.get("name", "").lower()
            if search_text in folder_name:
                matching_folders.append((folder_id, folder_data))
        
        # Nettoyer la vue
        self.folders_grid.pack_forget()
        self.documents_grid.pack_forget()
        self.no_documents_label.pack_forget()
        
        # Afficher la grille des dossiers pour les r√©sultats
        self.folders_grid.pack(fill=ctk.BOTH, expand=True, padx=0, pady=0)
        
        # Nettoyer la grille
        for widget in self.folders_grid.winfo_children():
            widget.destroy()
        
        # Si aucun r√©sultat
        if not matching_folders:
            self.no_documents_label.configure(
                text="Aucun dossier personnalis√© ne correspond √† votre recherche."
            )
            self.no_documents_label.pack(pady=20)
            return
        
        # Afficher les dossiers trouv√©s
        row, col = 0, 0
        for folder_id, folder_data in matching_folders:
            folder_name = folder_data.get("name", "Dossier personnalis√©")
            document_count = len(folder_data.get("documents", []))
            
            # Cr√©er une carte pour ce dossier
            self._create_custom_folder_card(folder_id, folder_name, document_count, row, col)
            
            col += 1
            if col >= 2:  # 2 cards par ligne
                col = 0
                row += 1

    def _get_month_display_name(self, year_month):
        """Convertit un format YYYY-MM en nom de mois affichable"""
        months_names = {
            "01": "Janvier", "02": "F√©vrier", "03": "Mars",
            "04": "Avril", "05": "Mai", "06": "Juin",
            "07": "Juillet", "08": "Ao√ªt", "09": "Septembre",
            "10": "Octobre", "11": "Novembre", "12": "D√©cembre"
        }
        
        if len(year_month) >= 7:
            year = year_month[:4]
            month = year_month[5:7]
            month_name = months_names.get(month, month)
            return f"{month_name} {year}"
        return year_month

    def handle_back(self):
        """G√®re le retour √† la vue pr√©c√©dente"""
        if self.current_subfolder:
            # Si on est dans un sous-dossier, retourner au dossier parent
            self.current_subfolder = None
            self.show_folder_documents(self.selected_folder)
        else:
            # Si on est dans un dossier principal, retourner √† la vue des dossiers
            self.show_folders_view()