#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vue principale de l'application Vynal Docs Automator
"""

import os
import logging
import customtkinter as ctk
from PIL import Image, ImageTk
import json
import tkinter as tk
import hashlib
from datetime import datetime

# Importation des vues
from views.dashboard_view import DashboardView
from views.client_view import ClientView
from views.document_view import DocumentView
from views.template_view import TemplateView
from views.settings_view import SettingsView
from views.chat_ai_view import ChatAIView

# Importer le moniteur d'activit√©
from utils.activity_monitor import ActivityMonitor

logger = logging.getLogger("VynalDocsAutomator.MainView")

class MainView:
    """
    Vue principale de l'application
    G√®re l'interface utilisateur globale et la navigation entre les diff√©rentes vues
    """
    
    def __init__(self, root, app_model, on_ready=None):
        """
        Initialise la vue principale
        
        Args:
            root: Fen√™tre principale CTk
            app_model: Mod√®le de l'application
            on_ready: Callback appel√© lorsque l'interface est pr√™te
        """
        self.root = root
        self.model = app_model
        self.on_ready = on_ready
        
        # Initialiser les trackers avant tout
        from utils.usage_tracker import UsageTracker
        self.usage_tracker = UsageTracker()
        
        # Configurer la fen√™tre principale
        self.root.title(self.model.config.get("app.name", "Vynal Docs Automator"))
        
        # R√©cup√©rer le th√®me des pr√©f√©rences utilisateur ou de la configuration globale
        user_theme = None
        if self.usage_tracker.is_user_registered():
            try:
                user_data = self.usage_tracker.get_user_data()
                if isinstance(user_data, dict) and "theme" in user_data:
                    user_theme = user_data["theme"].lower()
            except Exception as e:
                logger.warning(f"Erreur lors de la lecture des pr√©f√©rences utilisateur: {e}")
        
        # Utiliser le th√®me utilisateur ou la configuration globale
        theme = user_theme if user_theme else self.model.config.get("app.theme", "dark").lower()
        ctk.set_appearance_mode(theme)
        ctk.set_default_color_theme("blue")
        
        # Cr√©er le cadre principal
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill=ctk.BOTH, expand=True)
        
        # Initialiser les dictionnaires de widgets
        self.views = {}
        self.nav_buttons = {}
        
        # Cr√©er l'interface
        self._create_widgets()
        
        # Initialiser le moniteur d'activit√©
        self.activity_monitor = None
        self._setup_activity_monitor()
        
        # Configurer les √©v√©nements pour d√©tecter l'activit√©
        self._setup_activity_events()
        
        logger.info("Vue principale initialis√©e")
    
    def _create_widgets(self):
        """
        Cr√©e la barre lat√©rale et le contenu principal
        """
        # Cr√©er la barre lat√©rale et le contenu principal
        try:
            self.create_sidebar()
            self.create_content_area()
            
            # Cr√©er les diff√©rentes vues
            self.create_views()
            
            # Afficher la vue par d√©faut (tableau de bord)
            self.show_view("dashboard")
            
            logger.info("Vue dashboard affich√©e")
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation de la vue principale: {e}")
            # Afficher un message d'erreur √† l'utilisateur
            self.root.after(100, lambda: self.show_message(
                "Erreur d'initialisation", 
                f"Une erreur est survenue lors de l'initialisation de l'application: {e}",
                "error"
            ))

    def create_sidebar(self):
        """
        Cr√©e la barre lat√©rale avec le menu de navigation
        """
        # Cadre de la barre lat√©rale
        self.sidebar = ctk.CTkFrame(self.main_frame, width=200, corner_radius=0)
        self.sidebar.pack(side=ctk.LEFT, fill=ctk.Y, padx=0, pady=0)
        self.sidebar.pack_propagate(False)  # Emp√™cher le redimensionnement
        
        # Logo et titre
        self.logo_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.logo_frame.pack(side=ctk.TOP, fill=ctk.X, padx=20, pady=20)
        
        # Charger le logo s'il existe
        logo_path = self.model.config.get("app.company_logo", "")
        try:
            # Utiliser l'image du logo si elle existe, sinon cr√©er un placeholder
            if logo_path and os.path.exists(logo_path):
                logo_image = Image.open(logo_path)
                logo_image = logo_image.resize((150, 70), Image.LANCZOS)
                logo_photo = ImageTk.PhotoImage(logo_image)
                
                self.logo_label = ctk.CTkLabel(self.logo_frame, image=logo_photo, text="")
                self.logo_label.image = logo_photo  # Garder une r√©f√©rence
                self.logo_label.pack(side=ctk.TOP, pady=5)
            else:
                # Cr√©er une image de placeholder
                logger.info("Logo non trouv√©, utilisation d'un texte √† la place")
        except Exception as e:
            logger.error(f"Erreur lors du chargement du logo: {e}")
        
        # Titre de l'application en d√©grad√© visuel tr√®s subtil
        self.title_label = ctk.CTkLabel(
            self.logo_frame, 
            text="Vynal Docs",
            font=ctk.CTkFont(family="Helvetica", size=12, weight="normal"),  # Plus petit et normal
            text_color=("gray65", "gray75")  # Couleur encore plus subtile
        )
        self.title_label.pack(side=ctk.TOP, pady=(3, 0))  # Espacement minimal

        # Version int√©gr√©e avec d√©grad√© subtil
        version_text = f"Version {self.model.config.get('app.version', '1.0.0')}"
        ctk.CTkLabel(
            self.logo_frame,
            text=version_text,
            font=ctk.CTkFont(family="Helvetica", size=7),  # Encore plus petit
            text_color=("gray55", "gray65")  # Couleur encore plus subtile
        ).pack(side=ctk.TOP, pady=(0, 3))  # Espacement minimal
        
        # S√©parateur
        ctk.CTkFrame(self.sidebar, height=1, fg_color="gray").pack(side=ctk.TOP, fill=ctk.X, padx=10, pady=5)
        
        # Boutons de navigation
        
        # Cadre pour les boutons
        self.nav_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.nav_frame.pack(side=ctk.TOP, fill=ctk.BOTH, expand=True, padx=10, pady=10)
        
        # D√©finition des boutons du menu
        nav_items = [
            {"id": "dashboard", "text": "Tableau de bord", "icon": "üìä"},
            {"id": "clients", "text": "Clients", "icon": "üë•"},
            {"id": "templates", "text": "Mod√®les", "icon": "üìã"},
            {"id": "documents", "text": "Documents", "icon": "üìÑ"},
            {"id": "analysis", "text": "Chat IA", "icon": "ü§ñ"},
            {"id": "settings", "text": "Param√®tres", "icon": "‚öôÔ∏è"}
        ]
        
        # Cr√©er les boutons
        for item in nav_items:
            btn = ctk.CTkButton(
                self.nav_frame,
                text=f"{item['icon']} {item['text']}",
                anchor="w",
                height=40,
                corner_radius=10,
                fg_color="transparent",
                text_color=("gray10", "gray90"),
                hover_color=("gray85", "gray25"),
                command=lambda i=item["id"]: self.show_view(i)
            )
            btn.pack(side=ctk.TOP, fill=ctk.X, padx=5, pady=2)
            self.nav_buttons[item["id"]] = btn
        
        # Informations en bas de la barre lat√©rale
        self.sidebar_footer = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.sidebar_footer.pack(side=ctk.BOTTOM, fill=ctk.X, padx=10, pady=10)
        
        # Toolbar pour les boutons suppl√©mentaires
        self.toolbar = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        self.toolbar.pack(side=ctk.BOTTOM, fill=ctk.X, padx=10, pady=5)
        
        # Version de l'application
        ctk.CTkLabel(
            self.sidebar_footer,
            text=f"Version {self.model.config.get('app.version', '1.0.0')}",
            font=ctk.CTkFont(size=10)
        ).pack(side=ctk.TOP, pady=2)
        
        # Copyright
        ctk.CTkLabel(
            self.sidebar_footer,
            text=f"¬© {self.model.config.get('app.company_name', 'Vynal Agency LTD')}",
            font=ctk.CTkFont(size=10)
        ).pack(side=ctk.TOP, pady=2)
        
        # Bouton Mon compte
        # V√©rifier l'√©tat de connexion
        is_logged_in = self.usage_tracker.is_user_registered()
        
        # Cr√©er le bouton principal selon l'√©tat de connexion
        if is_logged_in:
            # Utilisateur connect√© - afficher son nom
            user_data = self.usage_tracker.get_user_data()
            display_name = user_data.get('email', 'Utilisateur').split('@')[0]
            button_text = f"üë§ {display_name}"
            button_color = "#3498db"
            hover_color = "#2980b9"
        else:
            # Utilisateur non connect√© - afficher "Se connecter"
            button_text = "üë§ Se connecter"
            button_color = "#2ecc71"
            hover_color = "#27ae60"
        
        # Cr√©er le bouton principal
        auth_button = ctk.CTkButton(
            self.sidebar_footer,
            text=button_text,
            command=self._show_auth_dialog,
            fg_color=button_color,
            hover_color=hover_color
        )
        auth_button.pack(side=ctk.TOP, fill=ctk.X, pady=5)
        self.auth_button = auth_button
        
        # Nous n'ajoutons pas les boutons suppl√©mentaires ici
        # Ils seront ajout√©s par update_auth_button
        self.update_auth_button()

    def create_content_area(self):
        """
        Cr√©e la zone de contenu principal
        """
        try:
            # Cadre pour le contenu
            self.content_area = ctk.CTkFrame(self.main_frame)
            self.content_area.pack(side=ctk.RIGHT, fill=ctk.BOTH, expand=True, padx=0, pady=0)
            
            # En-t√™te du contenu
            self.content_header = ctk.CTkFrame(self.content_area, height=60, fg_color=("gray90", "gray20"))
            self.content_header.pack(side=ctk.TOP, fill=ctk.X, padx=0, pady=0)
            self.content_header.pack_propagate(False)  # Emp√™cher le redimensionnement
            
            # Titre de la page
            self.page_title = ctk.CTkLabel(
                self.content_header,
                text="Tableau de bord",
                font=ctk.CTkFont(size=20, weight="bold")
            )
            self.page_title.pack(side=ctk.LEFT, padx=20, pady=10)
            
            # Barre d'√©tat
            self.status_bar = ctk.CTkFrame(
                self.content_area,
                height=25,
                fg_color=("#DBDBDB", "#2B2B2B")  # Gris clair pour le mode clair, gris fonc√© pour le mode sombre
            )
            self.status_bar.pack(side=ctk.BOTTOM, fill=ctk.X)
            
            # Label de statut
            self.status_label = ctk.CTkLabel(
                self.status_bar,
                text="Pr√™t",
                font=ctk.CTkFont(size=11),
                anchor="w",
                text_color=("gray10", "gray90")  # Texte fonc√© pour le mode clair, clair pour le mode sombre
            )
            self.status_label.pack(side=ctk.LEFT, padx=10, pady=2)
            
            # Cadre principal pour les diff√©rentes vues
            self.main_content = ctk.CTkFrame(self.content_area, fg_color="transparent")
            self.main_content.pack(side=ctk.TOP, fill=ctk.BOTH, expand=True, padx=20, pady=20)
            
            logger.debug("Zone de contenu cr√©√©e avec succ√®s")
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de la zone de contenu: {e}")
            # Cr√©er une structure minimale en cas d'erreur
            self.content_area = ctk.CTkFrame(self.main_frame)
            self.content_area.pack(side=ctk.RIGHT, fill=ctk.BOTH, expand=True)
            self.main_content = ctk.CTkFrame(self.content_area)
            self.main_content.pack(fill=ctk.BOTH, expand=True)
    
    def create_views(self):
        """
        Cr√©e les diff√©rentes vues de l'application
        """
        try:
            # Initialiser le dictionnaire des vues s'il n'existe pas
            if not hasattr(self, 'views'):
                self.views = {}
            
            # Cr√©er les vues dans le bon conteneur
            view_classes = {
                "dashboard": DashboardView,
                "clients": ClientView,
                "templates": TemplateView,
                "documents": DocumentView,
                "analysis": ChatAIView,
                "settings": SettingsView
            }
            
            # Importer document_creator_view si n√©cessaire
            try:
                from views.document_creator_view import DocumentCreatorView
                view_classes["document_creator"] = DocumentCreatorView
                logger.info("DocumentCreatorView import√©e dans les classes de vues disponibles")
            except Exception as e:
                logger.warning(f"Impossible d'importer DocumentCreatorView: {e}")
            
            # Cr√©er chaque vue individuellement avec gestion des erreurs
            for view_id, view_class in view_classes.items():
                try:
                    if view_id not in self.views:
                        self.views[view_id] = view_class(self.main_content, self.model)
                        logger.info(f"Vue {view_id} cr√©√©e avec succ√®s")
                except Exception as e:
                    logger.error(f"Erreur lors de la cr√©ation de la vue {view_id}: {e}")
            
            # S'assurer que toutes les vues sont initialement cach√©es
            for view_id, view in self.views.items():
                try:
                    if hasattr(view, 'hide'):
                        view.hide()
                        logger.debug(f"Vue {view_id} masqu√©e")
                except Exception as e:
                    logger.error(f"Erreur lors du masquage de la vue {view_id}: {e}")
            
            logger.info("Toutes les vues ont √©t√© initialis√©es")
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation des vues: {e}")
            # Cr√©er une structure minimale pour √©viter les erreurs fatales
            if "dashboard" not in self.views:
                self.views["dashboard"] = DashboardView(self.main_content, self.model)
                logger.info("Vue dashboard cr√©√©e comme fallback")
    
    def show_view(self, view_id):
        """
        Affiche une vue sp√©cifique et masque les autres
        
        Args:
            view_id: Identifiant de la vue √† afficher
        """
        # V√©rifier si la vue existe, sinon tenter de la cr√©er
        if view_id not in self.views:
            try:
                view_classes = {
                    "dashboard": DashboardView,
                    "clients": ClientView,
                    "templates": TemplateView,
                    "documents": DocumentView,
                    "analysis": ChatAIView,
                    "settings": SettingsView
                }
                # Ajouter DocumentCreatorView si elle n'est pas d√©j√† l√†
                if "document_creator" not in view_classes and view_id == "document_creator":
                    try:
                        from views.document_creator_view import DocumentCreatorView
                        view_classes["document_creator"] = DocumentCreatorView
                    except Exception as e:
                        logger.error(f"Erreur d'importation de DocumentCreatorView: {e}")
                
                if view_id in view_classes:
                    self.views[view_id] = view_classes[view_id](self.main_content, self.model)
                    logger.info(f"Vue {view_id} cr√©√©e avec succ√®s")
                else:
                    logger.error(f"Vue {view_id} non trouv√©e et impossible √† cr√©er")
                    return
            except Exception as e:
                logger.error(f"Erreur lors de la cr√©ation de la vue {view_id}: {e}")
                return
        
        # Mettre √† jour le titre de la page
        titles = {
            "dashboard": "Tableau de bord",
            "clients": "Gestion des clients",
            "templates": "Mod√®les de documents",
            "documents": "Documents",
            "analysis": "Chat IA",
            "settings": "Param√®tres",
            "document_creator": "Cr√©ation de document"
        }
        
        self.page_title.configure(text=titles.get(view_id, view_id.capitalize()))
        
        # Masquer toutes les vues
        for _id, view in self.views.items():
            view.hide()
        
        # Mettre en √©vidence le bouton actif
        for btn_id, button in self.nav_buttons.items():
            if btn_id == view_id:
                button.configure(fg_color=("gray85", "gray25"))
            else:
                button.configure(fg_color="transparent")
        
        # Si c'est la vue des param√®tres, force une mise √† jour compl√®te
        if view_id == "settings":
            # Pour la vue des param√®tres, toujours mettre √† jour avant d'afficher
            self.views[view_id].update_view()
            
            # Mettre √† jour l'√©tat du bouton d'authentification au cas o√π
            self.update_auth_button()
        
        # Afficher la vue s√©lectionn√©e
        self.views[view_id].show()
        
        logger.info(f"Vue {view_id} affich√©e")
    
    def show_message(self, title, message, message_type="info"):
        """
        Affiche une bo√Æte de dialogue avec un message
        
        Args:
            title: Titre de la bo√Æte de dialogue
            message: Message √† afficher
            message_type: Type de message ('info', 'error', 'warning')
        """
        if message_type == "error":
            icon = "‚ùå"
        elif message_type == "warning":
            icon = "‚ö†Ô∏è"
        else:
            icon = "‚ÑπÔ∏è"
        
        dialog = ctk.CTkToplevel(self.root)
        dialog.title(title)
        dialog.geometry("400x200")
        dialog.lift()  # Mettre au premier plan
        dialog.focus_force()  # Donner le focus
        dialog.grab_set()  # Modal
        
        # Centrer la fen√™tre
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Message
        msg_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        msg_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            msg_frame,
            text=f"{icon} {title}",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(pady=(0, 10))
        
        ctk.CTkLabel(
            msg_frame,
            text=message,
            wraplength=360
        ).pack(pady=10)
        
        # Bouton OK
        ctk.CTkButton(
            msg_frame,
            text="OK",
            width=100,
            command=dialog.destroy
        ).pack(pady=10)
    
    def show_confirmation(self, title, message, on_yes, on_no=None):
        """
        Affiche une bo√Æte de dialogue de confirmation
        
        Args:
            title: Titre de la bo√Æte de dialogue
            message: Message √† afficher
            on_yes: Fonction √† appeler si l'utilisateur confirme
            on_no: Fonction √† appeler si l'utilisateur annule
        """
        dialog = ctk.CTkToplevel(self.root)
        dialog.title(title)
        dialog.geometry("400x200")
        dialog.lift()
        dialog.focus_force()
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.update_idletasks()
        width = dialog.winfo_width()
        height = dialog.winfo_height()
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Message
        msg_frame = ctk.CTkFrame(dialog, fg_color="transparent")
        msg_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)
        
        ctk.CTkLabel(
            msg_frame,
            text=f"‚ö†Ô∏è {title}",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(pady=(0, 10))
        
        ctk.CTkLabel(
            msg_frame,
            text=message,
            wraplength=360
        ).pack(pady=10)
        
        # Boutons
        btn_frame = ctk.CTkFrame(msg_frame, fg_color="transparent")
        btn_frame.pack(pady=10)
        
        def yes_action():
            dialog.destroy()
            if on_yes:
                on_yes()
        
        def no_action():
            dialog.destroy()
            if on_no:
                on_no()
        
        ctk.CTkButton(
            btn_frame,
            text="Oui",
            width=100,
            fg_color="green",
            command=yes_action
        ).pack(side=ctk.LEFT, padx=10)
        
        ctk.CTkButton(
            btn_frame,
            text="Non",
            width=100,
            fg_color="red",
            command=no_action
        ).pack(side=ctk.LEFT, padx=10)
    
    def update_view(self):
        """
        M√©thode g√©n√©rique pour mettre √† jour la vue principale
        """
        # Mettre √† jour le titre de l'application
        self.root.title(self.model.config.get("app.name", "Vynal Docs Automator"))
        
        # Mettre √† jour le th√®me
        theme = self.model.config.get("app.theme", "dark").lower()
        ctk.set_appearance_mode(theme)

    def _show_auth_dialog(self):
        """Affiche la fen√™tre d'authentification"""
        try:
            # Cr√©er la vue d'authentification si elle n'existe pas
            if not hasattr(self, 'auth_view'):
                from views.auth_view import AuthView
                self.auth_view = AuthView(self.root, self.usage_tracker)
                self.auth_view.set_auth_callback(self._on_auth_change)
            
            # V√©rifier si l'utilisateur est connect√©
            is_logged_in = self.usage_tracker.is_user_registered()
            
            # Afficher la vue d'authentification
            self.auth_view.show()
            
            # Afficher l'onglet appropri√©
            if is_logged_in:
                self.auth_view._show_tab("account")
            else:
                self.auth_view._show_tab("login")
                
            logger.info("Fen√™tre d'authentification affich√©e")
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage de la fen√™tre d'authentification: {e}")
            self.show_message(
                "Erreur",
                "Une erreur est survenue lors de l'affichage de la fen√™tre d'authentification.",
                "error"
            )

    def _on_auth_change(self, is_logged_in, user_data):
        """
        Callback appel√© lorsque l'√©tat d'authentification change
        
        Args:
            is_logged_in (bool): True si l'utilisateur est connect√©, False sinon
            user_data (dict): Donn√©es de l'utilisateur si connect√©, None sinon
        """
        try:
            # Mettre √† jour l'interface utilisateur
            self.update_auth_button()
            
            # Afficher un message appropri√©
            if is_logged_in:
                self.show_message(
                    "Connexion r√©ussie",
                    f"Bienvenue {user_data.get('name', 'utilisateur')} !",
                    "success"
                )
            else:
                self.show_message(
                    "D√©connexion",
                    "Vous avez √©t√© d√©connect√© avec succ√®s.",
                    "info"
                )
                
            logger.info(f"√âtat d'authentification mis √† jour - Connect√©: {is_logged_in}")
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour de l'√©tat d'authentification: {e}")
            
    def update_auth_button(self):
        """Met √† jour l'interface utilisateur selon l'√©tat d'authentification"""
        if not hasattr(self, 'usage_tracker'):
            from utils.usage_tracker import UsageTracker
            self.usage_tracker = UsageTracker()
        
        is_logged_in = self.usage_tracker.is_user_registered()
        
        # Mettre √† jour le texte et la couleur des boutons selon l'√©tat de connexion
        if is_logged_in:
            # Utilisateur connect√©
            user_data = self.usage_tracker.get_user_data()
            display_name = user_data.get('email', 'Utilisateur').split('@')[0]
            button_text = f"üë§ {display_name}"
            button_color = "#3498db"
            hover_color = "#2980b9"
        else:
            # Utilisateur non connect√©
            button_text = "üë§ Se connecter"
            button_color = "#2ecc71"
            hover_color = "#27ae60"
        
        # Mettre √† jour le bouton principal
        if hasattr(self, 'auth_button') and self.auth_button:
            try:
                self.auth_button.configure(
                    text=button_text,
                    fg_color=button_color,
                    hover_color=hover_color
                )
            except Exception as e:
                logger.warning(f"Erreur lors de la mise √† jour du bouton d'authentification: {e}")
        
        # Nettoyer tous les boutons existants dans la barre lat√©rale
        try:
            if hasattr(self, 'sidebar_footer') and self.sidebar_footer:
                # Supprimer tous les widgets enfants sauf le bouton principal
                for widget in list(self.sidebar_footer.winfo_children()):
                    if widget != self.auth_button:
                        try:
                            widget.destroy()
                        except Exception as e:
                            logger.warning(f"Erreur lors de la suppression d'un widget: {e}")
            
            # Supprimer les r√©f√©rences aux boutons
            for btn_name in ['logout_button', 'register_button', 'login_button']:
                if hasattr(self, btn_name):
                    delattr(self, btn_name)
            
            # Ajouter les boutons appropri√©s selon l'√©tat de connexion
            if hasattr(self, 'sidebar_footer') and self.sidebar_footer:
                if is_logged_in:
                    # Utilisateur connect√© - ajouter le bouton de d√©connexion
                    logout_button = ctk.CTkButton(
                        self.sidebar_footer,
                        text="üîí D√©connexion",
                        command=self._handle_logout,
                        fg_color="transparent",
                        hover_color=("gray85", "gray25"),
                        anchor="w"
                    )
                    logout_button.pack(side=ctk.TOP, fill=ctk.X, pady=5)
                    self.logout_button = logout_button
                else:
                    # Utilisateur non connect√© - ajouter les boutons d'inscription et de connexion
                    register_button = ctk.CTkButton(
                        self.sidebar_footer,
                        text="‚úèÔ∏è S'inscrire",
                        command=lambda: self._show_auth_dialog_tab("register"),
                        fg_color="transparent",
                        hover_color=("gray85", "gray25"),
                        anchor="w"
                    )
                    register_button.pack(side=ctk.TOP, fill=ctk.X, pady=5)
                    self.register_button = register_button
                    
                    login_button = ctk.CTkButton(
                        self.sidebar_footer,
                        text="üîë Se connecter",
                        command=lambda: self._show_auth_dialog_tab("login"),
                        fg_color="transparent",
                        hover_color=("gray85", "gray25"),
                        anchor="w"
                    )
                    login_button.pack(side=ctk.TOP, fill=ctk.X, pady=5)
                    self.login_button = login_button
        except Exception as e:
            logger.warning(f"Erreur lors de la mise √† jour des boutons d'authentification: {e}")
        
        # Mettre √† jour l'interface de la vue principale
        self.update_view()
        
        # Journaliser le changement d'√©tat
        logger.info(f"√âtat d'authentification mis √† jour - Connect√©: {is_logged_in}")

    def _show_auth_dialog_tab(self, tab_name):
        """
        Affiche le dialogue d'authentification avec un onglet sp√©cifique
        
        Args:
            tab_name: Nom de l'onglet √† afficher ("login", "register" ou "account")
        """
        # Utiliser la m√©thode standard pour afficher la fen√™tre d'authentification
        self._show_auth_dialog()
        
        # Puis afficher l'onglet sp√©cifi√©
        try:
            if hasattr(self, 'auth_view') and self.auth_view:
                logger.info(f"Affichage de l'onglet {tab_name}")
                self.auth_view._show_tab(tab_name)
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage de l'onglet {tab_name}: {e}")

    # Methods for activity monitor integration and lock/unlock functionality
    def _setup_activity_monitor(self):
        """Configure et initialise le moniteur d'activit√© si n√©cessaire"""
        try:
            # Cr√©er une instance du moniteur d'activit√©
            self.activity_monitor = ActivityMonitor(
                lock_callback=self._lock_application,
                config_manager=self.model.config
            )
            
            # D√©marrer le moniteur si les conditions sont remplies
            self.activity_monitor.start()
            
            logger.info("Moniteur d'activit√© configur√©")
        except Exception as e:
            logger.error(f"Erreur lors de la configuration du moniteur d'activit√©: {e}")
    
    def _setup_activity_events(self):
        """Configure les √©v√©nements pour d√©tecter l'activit√© de l'utilisateur"""
        try:
            if self.activity_monitor:
                # Associer les √©v√©nements de la fen√™tre principale
                self.root.bind("<Motion>", self._on_user_activity)
                self.root.bind("<Key>", self._on_user_activity)
                self.root.bind("<Button>", self._on_user_activity)
                self.root.bind("<MouseWheel>", self._on_user_activity)
                
                # Bind √©v√©nements sur le frame principal aussi
                self.main_frame.bind("<Motion>", self._on_user_activity)
                self.main_frame.bind("<Button>", self._on_user_activity)
                
                logger.debug("√âv√©nements de surveillance d'activit√© configur√©s")
        except Exception as e:
            logger.error(f"Erreur lors de la configuration des √©v√©nements d'activit√©: {e}")
    
    def _on_user_activity(self, event=None):
        """Callback appel√© lors d'une activit√© utilisateur"""
        if self.activity_monitor:
            self.activity_monitor.register_activity(event)
    
    def _lock_application(self):
        """Verrouille l'application et affiche l'√©cran de connexion"""
        try:
            # Ex√©cuter sur le thread principal pour √©viter les probl√®mes d'interface
            self.root.after(0, self._show_unlock_dialog)
            logger.info("Application verrouill√©e par inactivit√©")
        except Exception as e:
            logger.error(f"Erreur lors du verrouillage de l'application: {e}")
    
    def _show_unlock_dialog(self):
        """Affiche la bo√Æte de dialogue de d√©verrouillage"""
        try:
            # Masquer l'application principale
            for widget in self.root.winfo_children():
                widget.pack_forget()
            
            # Cr√©er une fen√™tre modale par-dessus l'application
            self.lock_dialog = ctk.CTkToplevel(self.root)
            self.lock_dialog.title("D√©verrouillage requis")
            self.lock_dialog.attributes("-topmost", True)
            
            # Rendre la fen√™tre modale
            self.lock_dialog.grab_set()
            self.lock_dialog.focus_force()
            
            # Emp√™cher la fermeture par la croix
            self.lock_dialog.protocol("WM_DELETE_WINDOW", lambda: None)
            
            # Dimensions
            width = 400
            height = 250
            self.lock_dialog.geometry(f"{width}x{height}")
            
            # Centrer la fen√™tre
            self.lock_dialog.update_idletasks()
            x = (self.root.winfo_screenwidth() // 2) - (width // 2)
            y = (self.root.winfo_screenheight() // 2) - (height // 2)
            self.lock_dialog.geometry(f"{width}x{height}+{x}+{y}")
            
            # Frame principal avec padding
            main_frame = ctk.CTkFrame(self.lock_dialog)
            main_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)
            
            # Titre
            title_label = ctk.CTkLabel(
                main_frame,
                text="üîí Session verrouill√©e",
                font=ctk.CTkFont(size=20, weight="bold")
            )
            title_label.pack(pady=(0, 20))
            
            # Message
            message_label = ctk.CTkLabel(
                main_frame,
                text="Votre session a √©t√© verrouill√©e en raison d'inactivit√©.\nVeuillez entrer votre mot de passe pour continuer.",
                wraplength=350
            )
            message_label.pack(pady=(0, 20))
            
            # Champ de mot de passe
            password_var = ctk.StringVar()
            password_entry = ctk.CTkEntry(
                main_frame,
                placeholder_text="Mot de passe",
                show="‚Ä¢",
                width=200,
                textvariable=password_var
            )
            password_entry.pack(pady=(0, 10))
            password_entry.focus_set()
            
            # Message d'erreur
            error_label = ctk.CTkLabel(
                main_frame,
                text="",
                text_color="red"
            )
            error_label.pack(pady=(0, 10))
            
            # Fonction de validation
            def validate_password():
                password = password_var.get()
                if not password:
                    error_label.configure(text="Veuillez entrer votre mot de passe")
                    return
                
                # V√©rifier le mot de passe
                if self._check_password(password):
                    # Fermer la bo√Æte de dialogue
                    self.lock_dialog.destroy()
                    
                    # R√©afficher les widgets principaux de l'application
                    self._restore_main_view()
                    
                    # R√©initialiser le moniteur d'activit√©
                    if self.activity_monitor:
                        self.activity_monitor.reset()
                    
                    logger.info("Application d√©verrouill√©e avec succ√®s")
                else:
                    error_label.configure(text="Mot de passe incorrect")
                    password_entry.delete(0, "end")
            
            # Gestion de l'√©v√©nement Entr√©e
            password_entry.bind("<Return>", lambda event: validate_password())
            
            # Bouton de d√©verrouillage
            unlock_button = ctk.CTkButton(
                main_frame,
                text="D√©verrouiller",
                width=150,
                command=validate_password
            )
            unlock_button.pack(pady=10)
            
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage de la bo√Æte de dialogue de d√©verrouillage: {e}")
            # En cas d'erreur, restaurer l'interface principale
            self._restore_main_view()
    
    def _restore_main_view(self):
        """Restaure l'affichage principal de l'application apr√®s d√©verrouillage"""
        try:
            # R√©afficher les widgets principaux
            if hasattr(self, 'main_frame'):
                # Clear le root d'abord
                for widget in self.root.winfo_children():
                    if widget != self.lock_dialog:  # Ne pas toucher au dialogue de verrouillage
                        widget.pack_forget()
                
                # R√©afficher le frame principal
                self.main_frame.pack(fill=ctk.BOTH, expand=True)
                
                # R√©organiser les composants principaux
                if hasattr(self, 'sidebar'):
                    self.sidebar.pack(side=ctk.LEFT, fill=ctk.Y, padx=0, pady=0)
                
                if hasattr(self, 'content_area'):
                    self.content_area.pack(side=ctk.RIGHT, fill=ctk.BOTH, expand=True)
                    
                    # R√©afficher les composants de la zone de contenu
                    if hasattr(self, 'toolbar_frame'):
                        self.toolbar_frame.pack(side=ctk.TOP, fill=ctk.X, padx=0, pady=0)
                    
                    if hasattr(self, 'main_content'):
                        self.main_content.pack(side=ctk.TOP, fill=ctk.BOTH, expand=True, padx=20, pady=20)
                    
                    if hasattr(self, 'status_bar'):
                        self.status_bar.pack(side=ctk.BOTTOM, fill=ctk.X)
            
            # Redessiner la fen√™tre
            self.root.update_idletasks()
            logger.info("Interface principale restaur√©e apr√®s d√©verrouillage")
        except Exception as e:
            logger.error(f"Erreur lors de la restauration de l'interface principale: {e}")
            # En cas d'erreur grave, essayer de recharger compl√®tement l'interface
            try:
                self._create_widgets()
                logger.info("Interface r√©initialis√©e apr√®s erreur de restauration")
            except Exception as e2:
                logger.critical(f"Erreur critique lors de la r√©initialisation de l'interface: {e2}")
    
    def _check_password(self, password):
        """
        V√©rifie si le mot de passe est correct
        
        Args:
            password: Mot de passe √† v√©rifier
            
        Returns:
            bool: True si le mot de passe est correct, False sinon
        """
        try:
            # V√©rifier si la configuration contient un hash de mot de passe
            password_hash = self.model.config.get("security.password_hash", "")
            if not password_hash:
                logger.error("Aucun mot de passe n'est configur√©")
                return False
            
            # Hacher le mot de passe entr√©
            input_hash = hashlib.sha256(password.encode()).hexdigest()
            
            # Comparer les hash
            return input_hash == password_hash
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification du mot de passe: {e}")
            return False
    
    def update_activity_monitor(self):
        """Met √† jour le moniteur d'activit√© selon les param√®tres actuels"""
        if self.activity_monitor:
            # Arr√™ter l'ancien moniteur
            self.activity_monitor.stop()
            
            # Red√©marrer avec les nouveaux param√®tres
            self.activity_monitor.start()
            
            logger.info("Moniteur d'activit√© mis √† jour")
    
    def shutdown(self):
        """Arr√™te proprement le moniteur d'activit√© lors de la fermeture"""
        if self.activity_monitor:
            self.activity_monitor.stop()
            logger.info("Moniteur d'activit√© arr√™t√© lors de la fermeture de l'application")

    def show_settings(self):
        """Affiche la vue des param√®tres"""
        try:
            # Masquer toutes les autres vues
            self.hide_all_views()
            
            # Cr√©er la vue des param√®tres si elle n'existe pas
            if not hasattr(self, 'settings_view') or self.settings_view is None:
                from views.settings_view import SettingsView
                self.settings_view = SettingsView(self.content_frame, self.app_model)
            
            # Mettre √† jour et afficher la vue
            self.settings_view.update_view()
            self.settings_view.show()
            
            # Mettre √† jour le titre
            self.update_view_title("Param√®tres")
            
            # Activer le bouton dans la barre lat√©rale
            self.highlight_sidebar_button("settings")
            
            logger.info("Vue des param√®tres affich√©e")
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage de la vue des param√®tres: {e}")
            self.show_error(f"Impossible d'afficher les param√®tres: {str(e)}")

    def refresh_license_status(self):
        """
        Rafra√Æchit l'√©tat de la licence dans toute l'application
        Cette m√©thode est appel√©e apr√®s une mise √† jour de licence
        """
        try:
            logger.info("Rafra√Æchissement de l'√©tat de la licence dans l'application")
            
            # V√©rifier si nous avons un mod√®le de licence
            if hasattr(self.app_model, 'license_model') and self.app_model.license_model:
                # R√©cup√©rer les donn√©es utilisateur depuis UsageTracker
                from utils.usage_tracker import UsageTracker
                usage_tracker = UsageTracker()
                
                if usage_tracker.is_user_registered():
                    user_data = usage_tracker.get_user_data() or {}
                    email = user_data.get('email', '')
                    license_key = user_data.get('license_key', '')
                    license_valid = user_data.get('license_valid', False)
                    
                    # Mettre √† jour le statut dans le mod√®le de l'application
                    if hasattr(self.app_model, 'set_license_status'):
                        self.app_model.set_license_status(license_valid, email, license_key)
                        logger.info(f"Statut de licence mis √† jour: valide={license_valid}")
                
                # Rafra√Æchir toutes les vues
                if hasattr(self, 'dashboard_view') and self.dashboard_view:
                    self.dashboard_view.update_view()
                
                if hasattr(self, 'settings_view') and self.settings_view:
                    self.settings_view.update_view()
                
                # Mettre √† jour l'interface utilisateur en fonction de la licence
                self.update_features_availability()
                
                logger.info("Rafra√Æchissement de l'√©tat de licence termin√©")
            else:
                logger.warning("Mod√®le de licence non disponible pour le rafra√Æchissement")
        except Exception as e:
            logger.error(f"Erreur lors du rafra√Æchissement de l'√©tat de licence: {e}")
    
    def update_features_availability(self):
        """
        Met √† jour la disponibilit√© des fonctionnalit√©s en fonction de l'√©tat de la licence
        """
        try:
            # V√©rifier si nous avons un mod√®le de licence
            if hasattr(self.app_model, 'license_model') and self.app_model.license_model:
                # R√©cup√©rer les informations de licence
                from utils.usage_tracker import UsageTracker
                usage_tracker = UsageTracker()
                
                license_valid = False
                features = []
                
                if usage_tracker.is_user_registered():
                    user_data = usage_tracker.get_user_data() or {}
                    email = user_data.get('email', '')
                    license_valid = user_data.get('license_valid', False)
                    
                    if license_valid and email:
                        # R√©cup√©rer les fonctionnalit√©s actives pour cette licence
                        license_data = self.app_model.license_model.get_license(email)
                        if license_data and "features" in license_data:
                            features = license_data.get("features", [])
                
                # Mettre √† jour les boutons et menus en fonction des fonctionnalit√©s disponibles
                # Par exemple, activer/d√©sactiver certains boutons selon les fonctionnalit√©s
                
                logger.info(f"Mise √† jour des fonctionnalit√©s disponibles: licence valide={license_valid}, fonctionnalit√©s={features}")
            else:
                logger.warning("Mod√®le de licence non disponible pour la mise √† jour des fonctionnalit√©s")
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des fonctionnalit√©s disponibles: {e}")