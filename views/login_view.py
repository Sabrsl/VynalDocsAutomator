#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Vue de connexion pour l'application Vynal Docs Automator
"""

import os
import logging
import tkinter as tk
import customtkinter as ctk
from typing import Optional, Callable
import hashlib
import json
import random
import string
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import secrets
from utils.email_config import EmailConfig
from datetime import datetime, timedelta

logger = logging.getLogger("VynalDocsAutomator.LoginView")

# Cr√©ation d'une classe simple de gestion des tentatives de connexion
class LoginAttemptManager:
    """G√®re les tentatives de connexion et les verrouillages"""
    
    def __init__(self):
        self.last_attempt_time = None
        self.lockout_end_time = None
        self.attempt_count = 0
    
    def record_attempt(self, success: bool):
        """Enregistre une tentative de connexion"""
        self.last_attempt_time = datetime.now()
        
        if not success:
            self.attempt_count += 1
            if self.attempt_count >= 3:
                lockout_minutes = min(15, 1 * (2 ** (self.attempt_count - 3)))
                self.lockout_end_time = self.last_attempt_time + timedelta(minutes=lockout_minutes)
        else:
            # R√©initialiser en cas de succ√®s
            self.attempt_count = 0
            self.lockout_end_time = None
    
    def can_attempt(self):
        """V√©rifie si une tentative est autoris√©e"""
        if not self.lockout_end_time:
            return True, None
        
        now = datetime.now()
        if now >= self.lockout_end_time:
            # R√©initialiser partiellement apr√®s expiration du verrouillage
            self.lockout_end_time = None
            return True, None
        
        # Retourner le temps restant
        return False, self.lockout_end_time - now

class LoginView:
    """Vue de connexion avec protection par mot de passe"""
    
    def __init__(self, parent: tk.Widget, on_success: Callable[[], None], app_key=None):
        """
        Initialise la vue de connexion
        
        Args:
            parent: Widget parent
            on_success: Callback appel√© apr√®s une connexion r√©ussie
            app_key: Cl√© de l'application pour le chiffrement
        """
        self.parent = parent
        self.on_success = on_success
        self.window = None
        self.password_hash = None
        self.attempt_manager = LoginAttemptManager()
        
        # Timer pour le compte √† rebours
        self._countdown_timer = None
        self._password_attempts = 0
        self._max_attempts = 3
        self.email_config = EmailConfig(app_key)
        
        # Configuration email
        self.smtp_config = {
            "server": "smtp.gmail.com",
            "port": 587,
            "username": "",  # √Ä configurer
            "password": "",  # √Ä configurer
            "from_email": ""  # √Ä configurer
        }
        
        # Charger la configuration SMTP depuis le fichier config.json
        self._load_smtp_config()
    
    def _load_smtp_config(self):
        """Charge la configuration SMTP depuis le fichier config.json"""
        try:
            config_file = os.path.join("data", "config.json")
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            if "smtp" in config:
                self.smtp_config.update(config["smtp"])
        except Exception as e:
            logger.error(f"Erreur lors du chargement de la configuration SMTP: {e}")
    
    def _generate_temp_password(self, length=12):
        """G√©n√®re un mot de passe temporaire al√©atoire"""
        alphabet = string.ascii_letters + string.digits + string.punctuation
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    def _send_temp_password(self, email, temp_password):
        """Envoie le mot de passe temporaire par email"""
        try:
            # V√©rifier que l'email est configur√©
            if not self.email_config.is_configured():
                logger.error("La configuration email n'est pas disponible")
                return False

            # R√©cup√©rer la configuration SMTP
            config = self.email_config.get_config()
            smtp = config.get('smtp', {})

            # Cr√©er le message
            msg = MIMEMultipart()
            msg['From'] = smtp['from_email']
            msg['To'] = email
            msg['Subject'] = "R√©initialisation de votre mot de passe - Vynal Docs Automator"
            
            body = f"""
            Bonjour,
            
            Vous avez demand√© la r√©initialisation de votre mot de passe pour l'application Vynal Docs Automator.
            
            Voici votre mot de passe temporaire : {temp_password}
            
            Pour des raisons de s√©curit√©, vous devrez changer ce mot de passe √† votre prochaine connexion.
            
            Si vous n'√™tes pas √† l'origine de cette demande, veuillez ignorer cet email.
            
            Cordialement,
            L'√©quipe Vynal Docs
            """
            
            msg.attach(MIMEText(body, 'plain'))
            
            # Envoyer l'email
            with smtplib.SMTP(smtp['server'], smtp['port']) as server:
                if smtp.get('use_tls', True):
                    server.starttls()
                server.login(smtp['username'], smtp['password'])
                server.send_message(msg)
            
            logger.info(f"Mot de passe temporaire envoy√© √† {email}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de l'email: {e}")
            return False

    def show(self, password_hash: str):
        """
        Affiche la fen√™tre de connexion
        
        Args:
            password_hash: Hash du mot de passe √† v√©rifier
        """
        if self.window is not None:
            return
        
        self.password_hash = password_hash
        
        # D√©finir les couleurs et styles
        primary_color = "#3498db"       # Bleu principal
        success_color = "#2ecc71"       # Vert pour succ√®s
        error_color = "#e74c3c"         # Rouge pour erreurs
        hover_color = "#2980b9"         # Bleu plus fonc√© pour hover
        
        # Cr√©er la fen√™tre de connexion
        self.window = ctk.CTkToplevel(self.parent)
        self.window.title("Connexion")
        self.window.geometry("450x420")
        self.window.resizable(False, False)
        
        # Emp√™cher l'interaction avec la fen√™tre principale
        self.window.transient(self.parent)
        self.window.grab_set()
        
        # Centrer parfaitement la fen√™tre sur l'√©cran
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
        
        # Conteneur principal avec padding
        main_container = ctk.CTkFrame(self.window, fg_color="transparent")
        main_container.pack(fill=ctk.BOTH, expand=True, padx=30, pady=30)
        
        # Frame central avec ombre et coins arrondis
        frame = ctk.CTkFrame(
            main_container,
            corner_radius=15,
            border_width=1,
            border_color=("gray85", "gray25"),
            fg_color=("gray98", "gray10")
        )
        frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)
        
        # Logo/Ic√¥ne (si disponible)
        # Utilisez une image de verrouillage par d√©faut
        logo_label = ctk.CTkLabel(
            frame,
            text="üîí",
            font=ctk.CTkFont(size=48)
        )
        logo_label.pack(pady=(30, 10))
        
        # Titre
        title_label = ctk.CTkLabel(
            frame,
            text="Connexion s√©curis√©e",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=(0, 5))
        
        # Message
        message_label = ctk.CTkLabel(
            frame,
            text="Entrez votre mot de passe pour acc√©der √† Vynal Docs",
            wraplength=320,
            font=ctk.CTkFont(size=14)
        )
        message_label.pack(pady=(0, 30))
        
        # Champ de mot de passe avec ic√¥ne
        password_frame = ctk.CTkFrame(frame, fg_color="transparent")
        password_frame.pack(pady=(0, 20), fill=ctk.X, padx=50)
        
        self.password_var = ctk.StringVar()
        self.password_entry = ctk.CTkEntry(
            password_frame,
            placeholder_text="Mot de passe",
            show="‚Ä¢",
            height=40,
            textvariable=self.password_var,
            border_width=1,
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        self.password_entry.pack(fill=ctk.X)
        
        # Bouton de connexion
        self.login_button = ctk.CTkButton(
            frame,
            text="Se connecter",
            width=250,
            height=45,
            corner_radius=8,
            fg_color=primary_color,
            hover_color=hover_color,
            font=ctk.CTkFont(size=15, weight="bold"),
            command=self._verify_password
        )
        self.login_button.pack(pady=(5, 15))
        
        # Message d'erreur (initialement cach√©)
        self.error_label = ctk.CTkLabel(
            frame,
            text="",
            text_color=error_color,
            wraplength=320,
            font=ctk.CTkFont(size=13)
        )
        self.error_label.pack(pady=(0, 10))
        
        # Lien "Mot de passe oubli√©"
        forgot_password_label = ctk.CTkLabel(
            frame,
            text="Mot de passe oubli√© ?",
            text_color=primary_color,
            cursor="hand2",
            font=ctk.CTkFont(size=13, underline=True)
        )
        forgot_password_label.pack(pady=(5, 20))
        forgot_password_label.bind("<Button-1>", lambda e: self._show_reset_dialog())
        forgot_password_label.bind("<Enter>", lambda e: forgot_password_label.configure(text_color=hover_color))
        forgot_password_label.bind("<Leave>", lambda e: forgot_password_label.configure(text_color=primary_color))
        
        # Lier la touche Entr√©e √† la v√©rification du mot de passe
        self.window.bind('<Return>', lambda e: self._verify_password())
        
        # Focus sur le champ de mot de passe
        self.password_entry.focus()
        
        # Emp√™cher la fermeture de la fen√™tre
        self.window.protocol("WM_DELETE_WINDOW", self._handle_close)
        
        # V√©rifier l'√©tat du blocage au d√©marrage
        can_attempt, lockout_time = self.attempt_manager.can_attempt()
        if not can_attempt and lockout_time:
            # D√©sactiver le champ de mot de passe et le bouton de connexion
            self.password_entry.configure(state="disabled")
            self.login_button.configure(state="disabled")
            # D√©marrer le compte √† rebours
            self._start_countdown(lockout_time)
        
        logger.info("Fen√™tre de connexion affich√©e")
    
    def _handle_close(self):
        """G√®re la fermeture de la fen√™tre"""
        # D√©finir les couleurs
        primary_color = "#3498db"     # Bleu principal
        success_color = "#2ecc71"     # Vert pour succ√®s
        error_color = "#e74c3c"       # Rouge pour erreurs
        hover_color = "#2980b9"       # Bleu plus fonc√© pour hover
        
        # Cr√©er la bo√Æte de dialogue
        dialog = ctk.CTkToplevel(self.window)
        dialog.title("Confirmation")
        dialog.geometry("400x250")
        dialog.resizable(False, False)
        dialog.transient(self.window)
        dialog.grab_set()
        
        # Centrer parfaitement la fen√™tre
        dialog.update_idletasks()
        width = 400
        height = 250
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Frame principal avec coins arrondis
        frame = ctk.CTkFrame(
            dialog,
            corner_radius=15,
            border_width=1,
            border_color=("gray85", "gray25")
        )
        frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)
        
        # Ic√¥ne d'avertissement
        warning_label = ctk.CTkLabel(
            frame,
            text="‚ö†Ô∏è",
            font=ctk.CTkFont(size=40)
        )
        warning_label.pack(pady=(15, 5))
        
        # Message principal
        ctk.CTkLabel(
            frame,
            text="Quitter l'application ?",
            font=ctk.CTkFont(size=18, weight="bold")
        ).pack(pady=(0, 10))
        
        # Message secondaire
        ctk.CTkLabel(
            frame,
            text="L'application se fermera si vous n'√™tes pas connect√©.",
            wraplength=300,
            font=ctk.CTkFont(size=14)
        ).pack(pady=(0, 20))
        
        # Boutons centr√©s et espac√©s
        button_frame = ctk.CTkFrame(frame, fg_color="transparent")
        button_frame.pack(fill=ctk.X, pady=(10, 0))
        
        # Bouton Annuler
        ctk.CTkButton(
            button_frame,
            text="Annuler",
            width=150,
            height=40,
            corner_radius=8,
            fg_color=success_color,
            hover_color="#27ae60",
            font=ctk.CTkFont(size=14, weight="bold"),
            command=dialog.destroy
        ).pack(side=ctk.LEFT, padx=10, expand=True)
        
        # Bouton Quitter
        ctk.CTkButton(
            button_frame,
            text="Quitter",
            width=150,
            height=40,
            corner_radius=8,
            fg_color=error_color,
            hover_color="#c0392b",
            font=ctk.CTkFont(size=14, weight="bold"),
            command=lambda: [dialog.destroy(), self.window.destroy(), self.parent.destroy()]
        ).pack(side=ctk.RIGHT, padx=10, expand=True)
    
    def _verify_password(self):
        """V√©rifie le mot de passe entr√©"""
        try:
            password = self.password_var.get()
            
            # Hasher le mot de passe entr√©
            hashed = hashlib.sha256(password.encode()).hexdigest()
            
            if hashed == self.password_hash:
                # Enregistrer la tentative r√©ussie
                self.attempt_manager.record_attempt(True)
                
                logger.info("Connexion r√©ussie")
                self.window.destroy()
                self.window = None
                self.on_success()
                return True
            else:
                # Enregistrer la tentative √©chou√©e
                self.attempt_manager.record_attempt(False)
                self._password_attempts += 1
                
                can_attempt, lockout_time = self.attempt_manager.can_attempt()
                if not can_attempt and lockout_time:
                    # Compte bloqu√© temporairement
                    self.password_entry.configure(state="disabled")
                    self.login_button.configure(state="disabled")
                    self._start_countdown(lockout_time)
                else:
                    # Afficher le nombre de tentatives restantes
                    remaining = self._max_attempts - self._password_attempts
                    if remaining > 0:
                        self.error_label.configure(
                            text=f"Mot de passe incorrect. {remaining} tentative{'s' if remaining > 1 else ''} restante{'s' if remaining > 1 else ''}"
                        )
                    else:
                        # Si on d√©passe les tentatives mais pas encore de blocage
                        self.error_label.configure(
                            text="Mot de passe incorrect. Soyez prudent, le compte pourrait √™tre bloqu√© temporairement."
                        )
                return False
                
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification du mot de passe: {e}")
            self.error_label.configure(text="Une erreur est survenue")
            return False
    
    def _start_countdown(self, remaining_time):
        """
        D√©marre le compte √† rebours
        
        Args:
            remaining_time: Temps restant avant la fin du blocage
        """
        if self._countdown_timer:
            self.window.after_cancel(self._countdown_timer)
        
        end_time = datetime.now() + remaining_time
        
        def update_countdown():
            remaining = end_time - datetime.now()
            if remaining.total_seconds() <= 0:
                # R√©activer les champs
                self.password_entry.configure(state="normal")
                self.login_button.configure(state="normal")
                
                # R√©initialiser le message
                self.error_label.configure(
                    text="Vous pouvez maintenant r√©essayer.",
                    text_color="#2ecc71"
                )
                
                # Vider le champ de mot de passe
                self.password_var.set("")
                
                # Donner le focus au champ de mot de passe
                self.password_entry.focus()
                
                return
            
            minutes = int(remaining.total_seconds() // 60)
            seconds = int(remaining.total_seconds() % 60)
            self.error_label.configure(
                text=f"Compte temporairement bloqu√©. R√©essayez dans {minutes:02d}:{seconds:02d}",
                text_color="#e74c3c"
            )
            self._countdown_timer = self.window.after(1000, update_countdown)
        
        update_countdown()
    
    def _show_reset_dialog(self):
        """Affiche la bo√Æte de dialogue de r√©initialisation du mot de passe"""
        # D√©finir les couleurs
        primary_color = "#3498db"     # Bleu principal
        success_color = "#2ecc71"     # Vert pour succ√®s
        error_color = "#e74c3c"       # Rouge pour erreurs
        hover_color = "#2980b9"       # Bleu plus fonc√© pour hover
        
        dialog = ctk.CTkToplevel(self.window)
        dialog.title("R√©initialisation du mot de passe")
        dialog.geometry("550x450")    # Augmentation de la taille pour √©viter les troncatures
        dialog.resizable(False, False)
        dialog.transient(self.window)
        dialog.grab_set()
        
        # Centrer parfaitement la fen√™tre
        dialog.update_idletasks()
        width = 550
        height = 450
        x = (dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (dialog.winfo_screenheight() // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")
        
        # Frame principal avec coins arrondis
        main_frame = ctk.CTkFrame(
            dialog,
            corner_radius=15,
            border_width=1,
            border_color=("gray85", "gray25")
        )
        main_frame.pack(fill=ctk.BOTH, expand=True, padx=20, pady=20)
        
        # Ic√¥ne de r√©initialisation
        reset_icon = ctk.CTkLabel(
            main_frame,
            text="üîÑ",
            font=ctk.CTkFont(size=40)
        )
        reset_icon.pack(pady=(20, 5))
        
        # Titre
        title_label = ctk.CTkLabel(
            main_frame,
            text="R√©initialisation du mot de passe",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=(0, 15))
        
        # Message d'instructions
        message_label = ctk.CTkLabel(
            main_frame,
            text="Entrez votre adresse email pour recevoir\nun mot de passe temporaire",
            wraplength=400,
            font=ctk.CTkFont(size=14)
        )
        message_label.pack(pady=(0, 20))
        
        # Champ email avec ic√¥ne
        email_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        email_frame.pack(pady=(0, 20), fill=ctk.X, padx=50)
        
        email_var = ctk.StringVar()
        email_entry = ctk.CTkEntry(
            email_frame,
            placeholder_text="Adresse email",
            textvariable=email_var,
            height=40,
            border_width=1,
            corner_radius=8,
            font=ctk.CTkFont(size=14)
        )
        email_entry.pack(fill=ctk.X)
        
        # Message d'erreur
        error_label = ctk.CTkLabel(
            main_frame,
            text="",
            text_color=error_color,
            wraplength=400,
            font=ctk.CTkFont(size=13)
        )
        error_label.pack(pady=(0, 20))
        
        def send_reset_email():
            """Envoie l'email de r√©initialisation"""
            email = email_var.get().strip()
            
            if not email:
                error_label.configure(text="Veuillez entrer une adresse email")
                return
            
            # V√©rifier que l'email est configur√©
            if not self.email_config.is_configured():
                error_label.configure(text="La configuration email n'est pas disponible. Veuillez configurer l'email dans les param√®tres.")
                return
            
            # V√©rifier que l'email est autoris√© (√† adapter selon vos besoins)
            config_file = os.path.join("data", "config.json")
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                authorized_email = config.get("security", {}).get("admin_email")
                if not authorized_email or email != authorized_email:
                    error_label.configure(text="Cette adresse email n'est pas autoris√©e")
                    return
                
                # G√©n√©rer un mot de passe temporaire
                temp_password = self._generate_temp_password()
                
                # Envoyer l'email
                if self._send_temp_password(email, temp_password):
                    # Hasher et sauvegarder le mot de passe temporaire
                    temp_hash = hashlib.sha256(temp_password.encode()).hexdigest()
                    config["security"]["password_hash"] = temp_hash
                    config["security"]["require_password_change"] = True
                    
                    with open(config_file, 'w', encoding='utf-8') as f:
                        json.dump(config, f, indent=2, ensure_ascii=False)
                    
                    # Mettre √† jour le hash dans la vue
                    self.password_hash = temp_hash
                    
                    # Fermer la bo√Æte de dialogue
                    dialog.destroy()
                    
                    # Afficher un message de succ√®s
                    self.error_label.configure(
                        text="Un mot de passe temporaire a √©t√© envoy√© √† votre adresse email",
                        text_color=success_color
                    )
                    
                    logger.info(f"Mot de passe temporaire envoy√© √† {email}")
                else:
                    error_label.configure(text="Erreur lors de l'envoi de l'email. V√©rifiez la configuration email dans les param√®tres.")
            
            except Exception as e:
                logger.error(f"Erreur lors de la r√©initialisation: {e}")
                error_label.configure(text="Une erreur est survenue")
        
        # Boutons avec disposition am√©lior√©e
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(fill=ctk.X, pady=(0, 25))  # Augmentation du padding vertical
        
        # Bouton Annuler - √† gauche
        cancel_button = ctk.CTkButton(
            button_frame,
            text="Annuler",
            width=100,               # R√©duit de 130 √† 100
            height=35,               # R√©duit de 40 √† 35
            corner_radius=8,
            fg_color=error_color,
            hover_color="#c0392b",
            font=ctk.CTkFont(size=13, weight="bold"),  # Taille de police r√©duite
            command=dialog.destroy
        )
        cancel_button.pack(side=ctk.LEFT, padx=(80, 10), pady=10)  # Padding horizontal augment√©
        
        # Bouton Envoyer - √† droite
        send_button = ctk.CTkButton(
            button_frame,
            text="Envoyer",
            width=100,               # R√©duit de 130 √† 100
            height=35,               # R√©duit de 40 √† 35
            corner_radius=8,
            fg_color=success_color,
            hover_color="#27ae60",
            font=ctk.CTkFont(size=13, weight="bold"),  # Taille de police r√©duite
            command=send_reset_email
        )
        send_button.pack(side=ctk.RIGHT, padx=(10, 80), pady=10)  # Padding horizontal augment√©

        # Ajout du lien "Aide" discret et subtil
        help_label = ctk.CTkLabel(
            main_frame,
            text="Aide",
            text_color=("gray40", "gray60"),  # Couleur sombre et subtile
            cursor="hand2",
            font=ctk.CTkFont(size=11, underline=True)  # Petite taille de police
        )
        help_label.pack(pady=(15, 5))  # Position juste en dessous des boutons
        help_label.bind("<Button-1>", lambda e: self._open_email())
        help_label.bind("<Enter>", lambda e: help_label.configure(text_color=("#555555", "#aaaaaa")))
        help_label.bind("<Leave>", lambda e: help_label.configure(text_color=("gray40", "gray60")))
        
        # Focus sur le champ email
        email_entry.focus()
    
    def _open_email(self):
        """Ouvre le client email par d√©faut"""
        import webbrowser
        webbrowser.open("mailto:contact@vynalapp.com")