#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Gestionnaire de mod√®les de documents
G√®re la cr√©ation, la s√©lection et la correction des mod√®les de documents
"""

import os
import json
import logging
from typing import Dict, List, Optional, Tuple
from difflib import get_close_matches

logger = logging.getLogger("VynalDocsAutomator.DocumentModelManager")

class DocumentModelManager:
    """Gestionnaire de mod√®les de documents"""
    
    def __init__(self, models_path: str = "data/documents/types"):
        """
        Initialise le gestionnaire de mod√®les.
        
        Args:
            models_path (str): Chemin vers le r√©pertoire des mod√®les
        """
        self.models_path = models_path
        self.categories: Dict[str, List[str]] = {}
        self.available_models: Dict[str, List[str]] = {}
        self.current_context: Dict = {
            "state": "initial",
            "category": None,
            "model": None,
            "last_action": None
        }
        
        # Dictionnaire de correction des fautes de frappe courantes
        self.typo_corrections = {
            # Accents et caract√®res sp√©ciaux normalis√©s
            '√©': 'e', '√®': 'e', '√™': 'e',
            '√†': 'a', '√¢': 'a',
            '√Æ': 'i', '√Ø': 'i',
            '√¥': 'o', '√∂': 'o',
            '√ª': 'u', '√º': 'u',
            '√ß': 'c',
            
            # Variations de "mod√®le"
            "modele": "mod√®le",
            "md√®le": "mod√®le",
            "modl": "mod√®le",
            "mod√®l": "mod√®le",
            "modle": "mod√®le",
            "model": "mod√®le",
            
            # Variations de "nouveau"
            "nouvo": "nouveau",
            "nvo": "nouveau",
            "nvx": "nouveau",
            "nouveaux": "nouveau",
            "noueau": "nouveau",
            
            # Variations de cat√©gories
            "juridik": "juridique",
            "jurdik": "juridique",
            "jurdique": "juridique",
            "jurid": "juridique",
            "juri": "juridique",
            "legal": "juridique",
            
            "comercial": "commercial",
            "comerical": "commercial",
            "comm": "commercial",
            "com": "commercial",
            "vente": "commercial",
            
            "admin": "administratif",
            "administration": "administratif",
            
            "ressource": "ressources humaines",
            "humain": "ressources humaines",
            "rh": "ressources humaines",
            
            "fisc": "fiscales",
            "fiscal": "fiscales",
            "impot": "fiscales",
            "taxe": "fiscales",
            
            "correspondance": "correspondances",
            "lettre": "correspondances",
            "courrier": "correspondances",
            
            "bancaire": "bancaires",
            "banque": "bancaires",
            "finance": "bancaires",
            
            "entreprise": "corporate",
            "societe": "corporate",
            
            "immobilier": "immobiliers",
            "immo": "immobiliers",
            "propriete": "immobiliers",
            
            "autre": "autres",
            "divers": "autres",
            
            # Variations num√©riques
            "un": "1",
            "premier": "1",
            "deux": "2",
            "deuxieme": "2",
            "trois": "3",
            "troisieme": "3",
            
            # Mots de navigation
            "retour": "retour",
            "back": "retour",
            "annuler": "annuler",
            "cancel": "annuler",
            "quitter": "quitter",
            "exit": "quitter"
        }
        
        # Charger les cat√©gories et mod√®les
        self._load_categories()
        self._update_available_models()
        
        logger.info("DocumentModelManager initialis√©")
    
    def _load_categories(self) -> None:
        """Charge les cat√©gories depuis le fichier de configuration."""
        try:
            templates_file = os.path.join(self.models_path, "templates.json")
            if os.path.exists(templates_file):
                with open(templates_file, "r", encoding="utf-8") as f:
                    templates = json.load(f)
                
                # Organiser les templates par cat√©gorie
                for template in templates:
                    category = template.get("category", "").lower()
                    if category:
                        if category not in self.categories:
                            self.categories[category] = []
                        self.categories[category].append(template.get("name", ""))
                
                logger.info("Cat√©gories charg√©es avec succ√®s")
            else:
                logger.warning("Fichier templates.json non trouv√©")
        except Exception as e:
            logger.error(f"Erreur lors du chargement des cat√©gories : {e}")
            self.categories = {}
    
    def _update_available_models(self) -> None:
        """Met √† jour la liste des mod√®les disponibles."""
        try:
            self.available_models = {}
            
            # Explorer les dossiers de cat√©gories
            for category_dir in os.listdir(self.models_path):
                category_path = os.path.join(self.models_path, category_dir)
                if os.path.isdir(category_path):
                    category = category_dir.lower()
                    if category not in self.available_models:
                        self.available_models[category] = []
                    
                    # Ajouter les fichiers de mod√®les
                    for file in os.listdir(category_path):
                        if file.endswith(('.docx', '.pdf', '.txt')):
                            self.available_models[category].append(file)
            
            logger.info("Liste des mod√®les mise √† jour avec succ√®s")
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des mod√®les : {e}")
            self.available_models = {}
    
    def _normalize_input(self, text: str) -> str:
        """
        Normalise l'entr√©e utilisateur.
        
        Args:
            text (str): Texte √† normaliser
            
        Returns:
            str: Texte normalis√©
        """
        if not text:
            return ""
            
        # Convertir en minuscules et supprimer les espaces superflus
        text = text.lower().strip()
        
        # V√©rifier d'abord une correspondance exacte dans les corrections
        if text in self.typo_corrections:
            return self.typo_corrections[text]
            
        # Appliquer les corrections pour les sous-cha√Ænes
        for old, new in self.typo_corrections.items():
            text = text.replace(old, new)
        
        # Supprimer les caract√®res sp√©ciaux restants, 
        # mais conserver les espaces pour les noms de fichiers multi-mots
        text = ''.join(c for c in text if c.isalnum() or c.isspace())
        
        return text.strip()
    
    def _correct_typo(self, text: str, options: List[str]) -> str:
        """
        Corrige les fautes de frappe dans le texte.
        
        Args:
            text (str): Texte √† corriger
            options (List[str]): Liste des options valides
            
        Returns:
            str: Texte corrig√© ou texte original si aucune correction trouv√©e
        """
        # Normaliser le texte
        normalized_text = self._normalize_input(text)
        
        # Normaliser les options pour permettre une comparaison √©quitable
        normalized_options = {self._normalize_input(opt): opt for opt in options}
        
        # V√©rifier si le texte normalis√© correspond exactement √† une option normalis√©e
        if normalized_text in normalized_options:
            return normalized_options[normalized_text]
        
        # V√©rifier si le texte normalis√© est une sous-cha√Æne d'une option normalis√©e
        for norm_opt, original_opt in normalized_options.items():
            if normalized_text in norm_opt or norm_opt in normalized_text:
                return original_opt
        
        # Utiliser difflib pour trouver la meilleure correspondance avec un seuil plus bas
        matches = get_close_matches(normalized_text, normalized_options.keys(), n=1, cutoff=0.6)
        if matches:
            return normalized_options[matches[0]]
            
        # Si num√©rique, tenter de l'interpr√©ter comme un index
        if normalized_text.isdigit():
            index = int(normalized_text) - 1  # Indexation √† partir de 1 pour l'utilisateur
            if 0 <= index < len(options):
                return options[index]
                
        # Si tout √©choue, retourner le texte original
        return text
    
    def _get_category_emoji(self, category: str) -> str:
        """
        Retourne l'emoji appropri√© pour une cat√©gorie.
        
        Args:
            category (str): La cat√©gorie
            
        Returns:
            str: L'emoji correspondant
        """
        emojis = {
            "juridique": "‚öñÔ∏è",
            "commercial": "üíº",
            "administratif": "üìã",
            "fiscal": "üí∞",
            "rh": "üë•",
            "technique": "üîß",
            "marketing": "üì¢",
            "autre": "üìÑ"
        }
        return emojis.get(category.lower(), "üìÑ")
    
    def get_available_categories(self) -> str:
        """
        Retourne la liste des cat√©gories disponibles.
        
        Returns:
            str: Message format√© avec les cat√©gories
        """
        if not self.categories:
            return "‚ùå Aucune cat√©gorie n'est disponible pour le moment."
        
        categories_list = []
        for category in self.categories:
            emoji = self._get_category_emoji(category)
            categories_list.append(f"{emoji} {category.capitalize()}")
        
        return f"""üìå Voici les cat√©gories de mod√®les disponibles :

{chr(10).join(categories_list)}

Veuillez choisir une cat√©gorie en tapant son nom."""
    
    def get_available_models(self, category: str) -> str:
        """
        Retourne la liste des mod√®les disponibles dans une cat√©gorie.
        
        Args:
            category (str): La cat√©gorie
            
        Returns:
            str: Message format√© avec les mod√®les
        """
        models = self.available_models.get(category.lower(), [])
        if not models:
            return f"""‚ùå Aucun mod√®le n'est disponible dans la cat√©gorie {category}.
Voulez-vous revenir √† la liste des cat√©gories ? (oui/non)"""
        
        models_list = "\n".join(f"{i+1}Ô∏è‚É£ {model}" for i, model in enumerate(models))
        return f"""üìå Mod√®les disponibles dans {category} :

{models_list}

Tapez le num√©ro du mod√®le que vous souhaitez utiliser."""
    
    def handle_user_input(self, user_input: str) -> Tuple[str, Optional[str]]:
        """
        G√®re l'entr√©e utilisateur et retourne une r√©ponse appropri√©e.
        
        Args:
            user_input (str): L'entr√©e de l'utilisateur
            
        Returns:
            Tuple[str, Optional[str]]: (Message de r√©ponse, √âtat suivant)
        """
        # V√©rifier si l'entr√©e est vide
        if not user_input or not user_input.strip():
            return "Je n'ai pas compris votre demande. Comment puis-je vous aider ?", self.current_context.get("state", "initial")
            
        normalized_input = self._normalize_input(user_input)
        
        # S'assurer que last_action est initialis√©
        if "last_action" not in self.current_context:
            self.current_context["last_action"] = None
            
        # Tracer l'entr√©e normalis√©e pour le d√©bogage
        logger.debug(f"Entr√©e normalis√©e: '{normalized_input}' (originale: '{user_input}')")
        logger.debug(f"√âtat actuel: {self.current_context.get('state', 'initial')}")
        logger.debug(f"Derni√®re action: {self.current_context.get('last_action', 'none')}")
        
        # G√©rer les salutations et questions g√©n√©rales
        if normalized_input in ["bonjour", "salut", "cava", "cava?", "ca va", "ca va?", "comment allez-vous", "comment allez vous"]:
            self.current_context["state"] = "initial"
            self.current_context["last_action"] = "greeting"
            return "Bonjour ! Je suis l√† pour vous aider √† cr√©er des documents. Que souhaitez-vous faire ?", "initial"
        
        # G√©rer les commandes de navigation
        if normalized_input in ["retour", "back", "arriere", "annuler", "cancel"]:
            # Revenir √† l'√©tat pr√©c√©dent
            prev_state = self.current_context.get("state", "initial")
            
            if prev_state == "choosing_model":
                # Si on √©tait en train de choisir un mod√®le, revenir √† la s√©lection de cat√©gorie
                self.current_context["state"] = "choosing_category"
                self.current_context["last_action"] = "retour_categories"
                return "D'accord, revenons √† la liste des cat√©gories.\n\n" + self.get_available_categories(), "choosing_category"
            elif prev_state == "choosing_category":
                # Si on √©tait en train de choisir une cat√©gorie, revenir au menu initial
                self.current_context["state"] = "initial"
                self.current_context["last_action"] = "retour_initial"
                return """D'accord, revenons au d√©but. Que souhaitez-vous faire ?

1Ô∏è‚É£ Utiliser un mod√®le existant
2Ô∏è‚É£ Cr√©er un nouveau document""", "initial"
            else:
                # Sinon, revenir au tout d√©but
                self.current_context["state"] = "initial"
                self.current_context["last_action"] = "retour_initial"
                return "D'accord, revenons au d√©but. Comment puis-je vous aider ?", "initial"
        
        # G√©rer la demande de document (nouvelle ou r√©p√©t√©e)
        if "document" in normalized_input or "modele" in normalized_input or "creer" in normalized_input or "nouveau" in normalized_input:
            if self.current_context.get("state") not in ["choosing_category", "choosing_model", "model_selected"]:
                # R√©initialiser l'√©tat pour une nouvelle demande
                self.current_context["state"] = "initial"
                self.current_context["last_action"] = "document_request"
                return """üìå Quel type de document souhaitez-vous ?

1Ô∏è‚É£ Utiliser un mod√®le existant
2Ô∏è‚É£ Cr√©er un nouveau document

Veuillez choisir une option en tapant 1 ou 2.""", "initial"
        
        # G√©rer la s√©lection de cat√©gorie
        if self.current_context["state"] == "choosing_category":
            try:
                # Essayer d'interpr√©ter comme un num√©ro de cat√©gorie
                index = int(normalized_input) - 1
                if 0 <= index < len(self.categories):
                    category = list(self.categories.keys())[index]
                    self.current_context["category"] = category
                    self.current_context["last_action"] = "category_selected"
                    return f"Parfait ! Voici les mod√®les disponibles dans la cat√©gorie {category} :\n\n{self.get_available_models(category)}", "choosing_model"
                else:
                    self.current_context["last_action"] = "invalid_category"
                    return f"‚ùå Je ne trouve pas la cat√©gorie num√©ro {normalized_input}. Veuillez choisir un num√©ro entre 1 et {len(self.categories)}.", "choosing_category"
            except ValueError:
                # Si ce n'est pas un num√©ro, essayer de corriger la faute de frappe
                corrected_category = self._correct_typo(normalized_input, list(self.categories.keys()))
                if corrected_category in self.categories:
                    self.current_context["category"] = corrected_category
                    self.current_context["last_action"] = "category_selected"
                    return f"Je comprends que vous voulez la cat√©gorie {corrected_category}. Voici les mod√®les disponibles :\n\n{self.get_available_models(corrected_category)}", "choosing_model"
                
                # V√©rifier si c'est un choix de type de document initial
                if normalized_input in ["1", "modele", "existant"]:
                    self.current_context["state"] = "choosing_category"
                    self.current_context["last_action"] = "use_existing"
                    return "D'accord, vous voulez utiliser un mod√®le existant. Voici les cat√©gories disponibles :\n\n" + self.get_available_categories(), "choosing_category"
                elif normalized_input in ["2", "nouveau", "nvx", "nv", "nveaux", "creer"]:
                    self.current_context["state"] = "new_document"
                    self.current_context["last_action"] = "create_new"
                    return "Je vais vous aider √† cr√©er un nouveau document. Voici les cat√©gories disponibles :\n\n" + self.get_available_categories(), "new_document"
                
                self.current_context["last_action"] = "invalid_category"
                return "‚ùå Je ne trouve pas cette cat√©gorie. Voici les cat√©gories disponibles :\n\n" + self.get_available_categories(), "choosing_category"
        
        # G√©rer la s√©lection de mod√®le
        if self.current_context["state"] == "choosing_model":
            try:
                index = int(normalized_input) - 1
                category = self.current_context["category"]
                models = self.available_models.get(category.lower(), [])
                
                if not models:
                    self.current_context["state"] = "choosing_category"
                    self.current_context["last_action"] = "no_models"
                    return f"‚ùå Aucun mod√®le n'est disponible dans la cat√©gorie {category}. Veuillez choisir une autre cat√©gorie :\n\n" + self.get_available_categories(), "choosing_category"
                
                if 0 <= index < len(models):
                    self.current_context["model"] = models[index]
                    self.current_context["last_action"] = "model_selected"
                    return f"‚úÖ Excellent choix ! Je vais cr√©er un document avec le mod√®le {models[index]}.", "model_selected"
                else:
                    self.current_context["last_action"] = "invalid_model"
                    return f"‚ùå Je ne trouve pas le mod√®le num√©ro {normalized_input}. Veuillez choisir un num√©ro entre 1 et {len(models)}.", "choosing_model"
            except ValueError:
                # Si ce n'est pas un num√©ro, essayer de corriger la faute de frappe
                category = self.current_context["category"]
                models = self.available_models.get(category.lower(), [])
                
                if not models:
                    self.current_context["state"] = "choosing_category"
                    self.current_context["last_action"] = "no_models"
                    return f"‚ùå Aucun mod√®le n'est disponible dans la cat√©gorie {category}. Veuillez choisir une autre cat√©gorie :\n\n" + self.get_available_categories(), "choosing_category"
                
                corrected_model = self._correct_typo(normalized_input, models)
                if corrected_model in models:
                    self.current_context["model"] = corrected_model
                    self.current_context["last_action"] = "model_selected"
                    return f"‚úÖ J'ai compris que vous voulez le mod√®le {corrected_model}. Je vais l'utiliser pour cr√©er votre document.", "model_selected"
                
                self.current_context["last_action"] = "invalid_model"
                return "‚ùå Je ne comprends pas ce choix. Veuillez choisir un num√©ro de la liste ou tapez 'retour' pour revenir aux cat√©gories.", "choosing_model"
        
        # Traitement du choix initial (√©tat initial ou apr√®s une erreur)
        if self.current_context["state"] in ["initial", None]:
            # V√©rifier les choix pour utiliser un mod√®le existant
            if normalized_input in ["1", "un", "modele", "existant", "mod√®le", "mod√®l", "md√®le", "existants", "utiliser"]:
                self.current_context["state"] = "choosing_category"
                self.current_context["last_action"] = "use_existing"
                return "D'accord, vous voulez utiliser un mod√®le existant. Voici les cat√©gories disponibles :\n\n" + self.get_available_categories(), "choosing_category"
            # V√©rifier les choix pour cr√©er un nouveau document
            elif normalized_input in ["2", "deux", "nouveau", "nvx", "nv", "nveaux", "creer", "cr√©er", "nouvelle"]:
                self.current_context["state"] = "new_document"
                self.current_context["last_action"] = "create_new"
                return "Je vais vous aider √† cr√©er un nouveau document. Voici les cat√©gories disponibles :\n\n" + self.get_available_categories(), "new_document"
            
            # R√©agir √† une demande g√©n√©rale de document
            if "document" in normalized_input or "modele" in normalized_input or "contrat" in normalized_input or "aide" in normalized_input:
                self.current_context["last_action"] = "help_request"
                return """üìå Je peux vous aider avec vos documents. Que souhaitez-vous faire ?

1Ô∏è‚É£ Utiliser un mod√®le existant
2Ô∏è‚É£ Cr√©er un nouveau document

Veuillez choisir une option en tapant 1 ou 2.""", "initial"
        
        # Si on arrive ici, c'est que l'entr√©e n'a pas √©t√© reconnue
        self.current_context["last_action"] = "invalid_choice"
        
        # Message d'aide contextuel en fonction de l'√©tat actuel
        if self.current_context["state"] == "choosing_category":
            return f"""‚ùì Je ne suis pas s√ªr de comprendre votre choix. 
            
Voici les cat√©gories disponibles :
{chr(10).join([f"{i+1}. {cat}" for i, cat in enumerate(self.categories.keys())])}

Veuillez choisir une cat√©gorie en tapant son num√©ro ou son nom, ou 'retour' pour revenir au menu pr√©c√©dent.""", "choosing_category"
        elif self.current_context["state"] == "choosing_model":
            category = self.current_context.get("category", "")
            models = self.available_models.get(category.lower(), [])
            return f"""‚ùì Je ne suis pas s√ªr de comprendre votre choix.
            
Voici les mod√®les disponibles dans la cat√©gorie {category} :
{chr(10).join([f"{i+1}. {model}" for i, model in enumerate(models)])}

Veuillez choisir un mod√®le en tapant son num√©ro ou son nom, ou 'retour' pour revenir √† la liste des cat√©gories.""", "choosing_model"
        elif self.current_context["state"] == "new_document":
            return """‚ùì Je n'ai pas bien compris. Pour cr√©er un nouveau document, j'ai besoin de plus d'informations.

Quel type de document souhaitez-vous cr√©er ? Par exemple :
- Un contrat
- Une lettre
- Un rapport
- Une facture

Ou tapez 'retour' pour revenir au menu pr√©c√©dent.""", "new_document"
        else:
            # Message g√©n√©rique si l'√©tat n'est pas reconnu
            return """‚ùì Je ne suis pas s√ªr de comprendre votre demande. Voici les options disponibles :

1Ô∏è‚É£ Utiliser un mod√®le existant
2Ô∏è‚É£ Cr√©er un nouveau document

Que souhaitez-vous faire ?""", "initial" 