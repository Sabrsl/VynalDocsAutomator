"""
Script pour corriger le probl√®me avec _show_available_categories dans ai/model_patch.py
"""

import re
import os

# Fonction _show_available_categories √† ins√©rer dans la fonction patch_ai_model
show_available_categories_func = """
    def _show_available_categories(self):
        \"\"\"
        Affiche les cat√©gories disponibles en utilisant _get_available_categories.
        \"\"\"
        try:
            # Obtenir les cat√©gories disponibles
            categories = self._get_available_categories()
            
            if not categories:
                return \"\"\"‚ùå Je n'ai trouv√© aucune cat√©gorie de documents.
                
Veuillez contacter l'administrateur syst√®me.\"\"\"
            
            # Construire le message de r√©ponse
            response = "üìÇ Voici les cat√©gories de documents disponibles :\\n\\n"
            for i, category in enumerate(categories, 1):
                response += f"{i}Ô∏è‚É£ {category}\\n"
            
            response += "\\nVeuillez choisir une cat√©gorie en tapant son num√©ro ou son nom."
            
            # Mettre √† jour le contexte
            self.current_context["state"] = "choosing_category"
            self.current_context["last_action"] = "afficher_categories"
            self.current_context["available_categories"] = categories
            
            return response
            
        except Exception as e:
            logger.error(f"Erreur lors de l'affichage des cat√©gories: {e}")
            logger.error(traceback.format_exc())
            return \"\"\"‚ùå Une erreur s'est produite lors de la r√©cup√©ration des cat√©gories.
            
Veuillez r√©essayer ou contacter l'administrateur syst√®me.\"\"\"
"""

file_path = "ai/model_patch.py"
with open(file_path, 'r', encoding='utf-8') as f:
    content = f.read()

# Rechercher la section o√π les fonctions sont d√©finies dans patch_ai_model, juste apr√®s la d√©finition de enhanced_normalize_input
pattern = r'def enhanced_normalize_input\(self, text\):.*?return result\.strip\(\)'
match = re.search(pattern, content, re.DOTALL)

if match:
    # Insertion point juste apr√®s la fonction enhanced_normalize_input
    insertion_point = match.end()
    # Ins√©rer la fonction _show_available_categories
    updated_content = content[:insertion_point] + "\n" + show_available_categories_func + content[insertion_point:]
    
    # √âcrire le contenu mis √† jour
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print("_show_available_categories ajout√© avec succ√®s √†", file_path)
else:
    print("Impossible de trouver le point d'insertion pour _show_available_categories") 